<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hmgqzx&#39;s Wiki</title>
  
  <subtitle>知识需要分享</subtitle>
  <link href="/wiki/atom.xml" rel="self"/>
  
  <link href="https://hmgqzx.github.io/wiki/"/>
  <updated>2018-03-01T18:13:19.000Z</updated>
  <id>https://hmgqzx.github.io/wiki/</id>
  
  <author>
    <name>hmgqzx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>PlainTasks</title>
    <link href="https://hmgqzx.github.io/wiki/Sublime%20Text/%E6%8F%92%E4%BB%B6/PlainTasks/"/>
    <id>https://hmgqzx.github.io/wiki/Sublime Text/插件/PlainTasks/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>PlainTasks 是一个Sublime Text 插件，可以用来管理 todo-list。</p><p>我目前是利用它来帮助践行番茄工作法（每天的 todo 作为单独的一个文件记录，如<code>2017-07-16.todo</code>；脑里蹦出来的注意放在临时的<code>collect.todo</code>；经过整理、安排后的将来计划放入<code>activity-inventory.todo</code>）</p><p>阅读插件主页获取更多信息：<a href="https://github.com/aziz/PlainTasks" target="_blank" rel="noopener">aziz/PlainTasks: An opinionated todo-list plugin for Sublime Text editor (version 2 and 3)</a></p><h2 id="笔记"><a class="markdownIt-Anchor" href="#笔记"></a> 笔记</h2><p>下面是我学习使用该插件过程中的一点笔记（较简略，我只是为了掌握更多所需的内容而摘抄节选在此）</p><ul><li><p>标签快捷添加</p><ul><li>type <code>t</code>, press <code>tab</code> — it’ll become <code>@today</code> — this one is highlighted differently than other tags;</li><li><code>c</code>, <code>tab</code> — <code>@critical</code>;</li><li><code>h</code>, <code>tab</code> — <code>@high</code>;</li><li><code>l</code>, <code>tab</code> — <code>@low</code>;</li></ul></li><li><p>打开超链接：<code>cmd + shift + U</code></p><ul><li>超链接格式：<a href="skype:nickname" target="_blank" rel="noopener">skype:nickname</a></li></ul></li><li><p>file link：.\filename ，一行一个文件</p><ul><li>有点疑惑，支持什么格式?——在 tutorial 里有，在 preferences-&gt;package setting 中</li></ul></li><li><p>notes</p><ul><li>Use <code>_</code> or <code>*</code> for italic and bold just like in Markdown.</li></ul></li><li><p>截止日期 （<code>高频使用</code>）</p><ul><li><code>d</code>, tab — <code>@due( )</code></li><li>详细格式见下面</li></ul></li></ul><h3 id="editor-useful-tools"><a class="markdownIt-Anchor" href="#editor-useful-tools"></a> Editor Useful Tools:</h3><ul><li>Use <code>⌘ + control + up/down</code> to move tasks up and down.</li><li>Use <code>⌘ + r</code> to see a list of projects and quickly jump between them</li></ul><h3 id="due-格式"><a class="markdownIt-Anchor" href="#due-格式"></a> due 格式</h3><p>比较常用的：</p><table><thead><tr><th>Notation</th><th>Meaning</th></tr></thead><tbody><tr><td><code>@due(+)</code></td><td>tomorrow as well as <code>@due( +1)</code> or <code>@due( +1d)</code></td></tr><tr><td><code>@due(+2:)</code></td><td>two hours since current date</td></tr><tr><td><code>@due(+:555)</code></td><td>555 minutes since current date</td></tr></tbody></table><p>解释：格式是 <code>+[number][DdWw][h:m]</code></p><p><code>[ ]</code>里的选项是可选的，当没有指定<code>[DdWw]</code>的选项时，<code>[number]</code>默认是天数，单独指定小时使用<code>[h:]</code>，单独指定分钟数使用<code>[:m]</code>（因为要指定是0 hour，不然少了 <code>:</code> 就解析为天数了）</p><p>更多请看插件主页</p><h3 id="changing-color-scheme"><a class="markdownIt-Anchor" href="#changing-color-scheme"></a> Changing color scheme</h3><p>我不喜欢默认的屎黄色……还是黑色好点。在 <code>preferences-&gt;package setting</code> 中可以找到设置，里面的配置文件提供了几个主题</p><blockquote><p>If you don’t like colors used in bundled schemes just copy any <code>.hidden-tmTheme</code> from PlainTasks to your User directory, change colors and paste the code below in your user settings file:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;&#123; &quot;color_scheme&quot;: &quot;Path to your custom color scheme file. e.g. Packages/User/custom_plaintasks.hidden-tmTheme&quot; &#125;</span><br><span class="line">&gt;</span><br></pre></td></tr></table></figure></blockquote><blockquote><p><strong>N.B.</strong>, sometimes you have to restart Sublime Text to apply changes made in tmTheme file.<br><strong>N.B.</strong>, <code>scope_past_due</code>, <code>scope_due_soon</code>, and <code>scope_misformatted</code> settings can assign any scopes defined in tmTheme file, e.g. you can set <code>&quot;scope_past_due&quot;: &quot;my.own.super.expired.whatever&quot;</code> and then just add style definition in tmTheme for this scope.</p></blockquote><h2 id="其他"><a class="markdownIt-Anchor" href="#其他"></a> 其他</h2><h3 id="预览mac-空格键"><a class="markdownIt-Anchor" href="#预览mac-空格键"></a> 预览（Mac 空格键）</h3><p><a href="https://github.com/whomwah/qlstephen" target="_blank" rel="noopener">qlstephen</a> 这个插件虽然声称只是用来预览 without a file extension 的纯文本，但经测试，也可以预览 .todo 后缀的文件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;PlainTasks 是一个Sublime Text 插件，可以用来管理 todo-list。&lt;/p&gt;
&lt;p&gt;我目前是利用它来帮助践行番茄工作法（每天的 todo 作为单独的一个文件记录，如&lt;code&gt;2017-07-16.todo&lt;/code&gt;；脑里蹦出来的注意放在临时的
      
    
    </summary>
    
      <category term="Sublime Text" scheme="https://hmgqzx.github.io/wiki/categories/Sublime-Text/"/>
    
      <category term="插件" scheme="https://hmgqzx.github.io/wiki/categories/Sublime-Text/%E6%8F%92%E4%BB%B6/"/>
    
    
      <category term="番茄工作法" scheme="https://hmgqzx.github.io/wiki/tags/%E7%95%AA%E8%8C%84%E5%B7%A5%E4%BD%9C%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>Python 字符串的常用知识</title>
    <link href="https://hmgqzx.github.io/wiki/Python/%E5%B8%B8%E7%94%A8%E6%9C%AD%E8%AE%B0/Python%20%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://hmgqzx.github.io/wiki/Python/常用札记/Python 字符串/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="字符串处理"><a class="markdownIt-Anchor" href="#字符串处理"></a> 字符串处理</h2><h3 id="删除字符串中不需要的字符"><a class="markdownIt-Anchor" href="#删除字符串中不需要的字符"></a> 删除字符串中不需要的字符</h3><p><code>strip()</code> 方法能用于删除开始或结尾的字符。 <code>lstrip()</code> 和 <code>rstrip()</code> 分别从左和从右执行删除操作。 默认情况下，这些方法会去除空白字符，但是你也可以指定其他字符<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><p>需要注意的是这些 <code>strip</code>方法不会对字符串的中间的文本执行去除操作。<sup class="footnote-ref"><a href="#fn1" id="fnref1:1">[1:1]</a></sup></p><p>如果要处理中间的空格，需要使用 <code>replace()</code>方法或者是用正则表达式进行替换<sup class="footnote-ref"><a href="#fn1" id="fnref1:2">[1:2]</a></sup></p><h3 id="查找是否含有某个子字符串"><a class="markdownIt-Anchor" href="#查找是否含有某个子字符串"></a> 查找是否含有某个子字符串</h3><p>最快、最简洁的方法是<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> text <span class="keyword">in</span> string:  </span><br><span class="line"><span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="str-和-数值类型的转化"><a class="markdownIt-Anchor" href="#str-和-数值类型的转化"></a> str 和 数值类型的转化</h3><p>Python 中的都是在方法中传入参数，非常简单<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">int(<span class="string">'123'</span>)</span><br><span class="line">str(<span class="number">123</span>)</span><br></pre></td></tr></table></figure><h2 id="注脚"><a class="markdownIt-Anchor" href="#注脚"></a> 注脚</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p11_strip_unwanted_characters.html" target="_blank" rel="noopener">2.11 删除字符串中不需要的字符 — python3-cookbook 2.0.0 文档</a> <a href="#fnref1" class="footnote-backref">↩︎</a> <a href="#fnref1:1" class="footnote-backref">↩︎</a> <a href="#fnref1:2" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://stackoverflow.com/questions/4901523/whats-a-faster-operation-re-match-search-or-str-find" target="_blank" rel="noopener">python - What’s a faster operation, re.match/search or str.find? - Stack Overflow</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="http://blog.csdn.net/shanliangliuxing/article/details/7920400" target="_blank" rel="noopener">python数据类型转换（str跟int的转换） - Hello World! - CSDN博客</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;字符串处理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#字符串处理&quot;&gt;&lt;/a&gt; 字符串处理&lt;/h2&gt;
&lt;h3 id=&quot;删除字符串中不需要的字符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#删除字符串中不需
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
      <category term="常用札记" scheme="https://hmgqzx.github.io/wiki/categories/Python/%E5%B8%B8%E7%94%A8%E6%9C%AD%E8%AE%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Hexo 博客搭建过程注意点</title>
    <link href="https://hmgqzx.github.io/wiki/Hexo/Hexo%20%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%BF%87%E7%A8%8B%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>https://hmgqzx.github.io/wiki/Hexo/Hexo 博客搭建过程注意点/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>主要记录 Hexo 搭建过程中的一些注意点和一些问题的解决方向。其他详细的基础设置等网上有大量文章，官方文档也有清晰说明</p><h2 id="搭建教程"><a class="markdownIt-Anchor" href="#搭建教程"></a> 搭建教程</h2><p>搭建教程在网上有很多（不过有些实在太冗长，按需选择），下面是推荐的几个：</p><ul><li><p><a href="https://linghucong.js.org/2016/04/15/2016-04-15-hexo-github-pages-blog/" target="_blank" rel="noopener">手把手教你使用Hexo + Github Pages搭建个人独立博客 | 令狐葱@前端笔记</a> # 很好的文章</p></li><li><p><a href="https://github.com/limedroid/HexoLearning" target="_blank" rel="noopener">limedroid/HexoLearning: Hexo博客搭建全攻略</a></p></li></ul><h2 id="hexo-相关"><a class="markdownIt-Anchor" href="#hexo-相关"></a> Hexo  相关</h2><h3 id="配置文件-_configyml"><a class="markdownIt-Anchor" href="#配置文件-_configyml"></a> 配置文件 _config.yml</h3><p>在 Hexo 中，以 <code>_config.yml</code> 作为配置文件。</p><ul><li>在站点根目录下有一份，通常称为 <strong>站点配置文件</strong></li><li>在每个主题的目录下也有一份，称为 <strong>主题配置文件</strong>，用于配置主题自带的选项</li></ul><p>新手配置时不要弄混了哦 😯 ~</p><p><strong>注意事项‼️</strong>：<code>_config.yml</code> 使用的是 yaml 语言，不能有多余的空格，在每个配置选项的冒号后有且只能有一个空格</p><p>如：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><h3 id="常用命令行"><a class="markdownIt-Anchor" href="#常用命令行"></a> <strong>常用</strong>命令行</h3><h4 id="本地运行预览效果"><a class="markdownIt-Anchor" href="#本地运行预览效果"></a> 本地运行，预览效果</h4><p>启动 sever，在浏览器进行访问：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo s -g --debug</span></span><br></pre></td></tr></table></figure><p>支持热更新，修改配置文件后刷新一下可以看到即时效果</p><p>但如果修改了 post，则需要重新运行一下。（命令中 g 是 generate 的缩写，s 是 sever 的缩写）</p><h3 id="其他通用设置"><a class="markdownIt-Anchor" href="#其他通用设置"></a> 其他通用设置</h3><h4 id="read-more-阅读全文"><a class="markdownIt-Anchor" href="#read-more-阅读全文"></a> read more 阅读全文</h4><p>推荐使用这种方法：在 MarkDown 文章中使用 <code>&lt;!-- more --&gt;</code> 手动进行截断。由 Hexo 原生提供，可以精确控制需要显示的摘录内容，也可以让 Hexo 中的插件更好的识别。<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p><h2 id="发布到-github"><a class="markdownIt-Anchor" href="#发布到-github"></a> 发布到 GitHub</h2><h3 id="使用-git-部署"><a class="markdownIt-Anchor" href="#使用-git-部署"></a> 使用 git 部署<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> npm install hexo-deployer-git --save</span></span><br></pre></td></tr></table></figure><p>在站点配置文件添加设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">&lt;repository</span> <span class="string">url&gt;</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">[branch]</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">[message]</span></span><br><span class="line">  </span><br><span class="line"><span class="comment"># 实例</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line"><span class="attr">  type:</span> <span class="string">git</span></span><br><span class="line"><span class="attr">  repo:</span> <span class="string">git@github.com:hmgqzx/dotors.git</span></span><br><span class="line"><span class="attr">  branch:</span> <span class="string">gh-pages</span></span><br><span class="line"><span class="attr">  message:</span> <span class="string">"Site updated: <span class="template-variable">&#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;</span>)"</span></span><br></pre></td></tr></table></figure><p>部署命令：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> hexo deploy --generate</span></span><br></pre></td></tr></table></figure><h3 id="额外再搭建另一个博客-项目-gh-pages-方式"><a class="markdownIt-Anchor" href="#额外再搭建另一个博客-项目-gh-pages-方式"></a> 额外再搭建另一个博客 - 项目 gh-pages 方式</h3><p>GitHub上建立的每个项目(<code>repository</code>)都是可以拥有独立主页的，将 hexo 生成的静态内容放置在 gh-pages 分支下即可</p><p>当我们想额外搭建另一个博客（使用不用的主题），就可以利用这种方式，在 Github 给的域名（<code>http(s)://&lt;username&gt;.github.io</code>）下创建二级域名</p><h4 id="github-设置"><a class="markdownIt-Anchor" href="#github-设置"></a> Github 设置</h4><p>详细步骤参考链接<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~/my-personal-projects/github-repo/motors not empty, please run hexo init on an empty folder and then copy your files into it</span><br></pre></td></tr></table></figure><p>因为我们是先在 Github 创建仓库，再 clone 下来，这样文件夹就非空了。需要在另一个地方 <code>hexo init</code> 一个站点，再复制过来（ master 分支）</p><h4 id="hexo-设置"><a class="markdownIt-Anchor" href="#hexo-设置"></a> hexo 设置</h4><p>在 Github 设置好后，项目访问链接是这样的：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http(s)://<span class="tag">&lt;<span class="name">username</span>&gt;</span>.github.io/<span class="tag">&lt;<span class="name">projectname</span>&gt;</span></span><br></pre></td></tr></table></figure><p>那么在 hexo 的站点配置文件中，需要这样设置，才能生成对应的链接：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/&lt;projectname&gt;/</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 实例对照</span></span><br><span class="line"><span class="attr">url:</span> <span class="attr">https://hmgqzx.github.io/dotors/</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/dotors/</span></span><br></pre></td></tr></table></figure><p>原因：正如注释所说，因为项目主页站点内容是放在二级域名下的，所以要那样设置</p><h2 id="注脚"><a class="markdownIt-Anchor" href="#注脚"></a> 注脚</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="http://theme-next.iissnan.com/faqs.html" target="_blank" rel="noopener">常见问题 - NexT 使用文档</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment | Hexo</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="http://coderunthings.com/2015/10/23/%E6%89%8B%E5%8A%A8%E7%BB%99%E4%BD%A0%E7%9A%84GitHub%E9%A1%B9%E7%9B%AE%E8%AE%BE%E7%BD%AE%E4%B8%80%E4%B8%AA%E4%B8%BB%E9%A1%B5/" target="_blank" rel="noopener">手动给你的GitHub项目设置一个主页 | 把生命浪费在美好的代码上</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;主要记录 Hexo 搭建过程中的一些注意点和一些问题的解决方向。其他详细的基础设置等网上有大量文章，官方文档也有清晰说明&lt;/p&gt;
&lt;h2 id=&quot;搭建教程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#搭建教程&quot;&gt;&lt;/a&gt; 搭建教程&lt;/h2&gt;
&lt;
      
    
    </summary>
    
      <category term="Hexo" scheme="https://hmgqzx.github.io/wiki/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>Git 其他常见相关问题</title>
    <link href="https://hmgqzx.github.io/wiki/Git/Git-%E5%85%B6%E4%BB%96%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98/"/>
    <id>https://hmgqzx.github.io/wiki/Git/Git-其他相关问题/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="github-等远程仓库的相关问题"><a class="markdownIt-Anchor" href="#github-等远程仓库的相关问题"></a> Github 等远程仓库的相关问题</h2><h3 id="将已存在的项目通过-git-传到-github-等"><a class="markdownIt-Anchor" href="#将已存在的项目通过-git-传到-github-等"></a> 将已存在的项目通过 Git 传到 GitHub 等</h3><p>主要步骤概括起来就是：</p><ul><li>对该已存在的本地项目 <code>git init</code></li><li>对需要的文件进行提交（如有需要，可以编辑 <code>.gitignore</code> 文件、进行多次小提交等操作）</li><li>关联 <code>remote repository</code> （远程仓库）</li><li>push 本地改动到 <code>remote repository</code> （远程仓库）</li></ul><p>更详细的具体命令，请参考：<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup><sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://help.github.com/articles/adding-an-existing-project-to-github-using-the-command-line/" target="_blank" rel="noopener">Adding an existing project to GitHub using the command line - User Documentation</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="http://leonshi.com/2016/02/01/add-existing-project-to-github/" target="_blank" rel="noopener">如何将一个已存在的目录转换为一个 Git 项目并托管到 GitHub 仓库 - Leon’s scribble.</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;github-等远程仓库的相关问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#github-等远程仓库的相关问题&quot;&gt;&lt;/a&gt; Github 等远程仓库的相关问题&lt;/h2&gt;
&lt;h3 id=&quot;将已存在的项目通过-git-传到-githu
      
    
    </summary>
    
      <category term="Git" scheme="https://hmgqzx.github.io/wiki/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>LaTeX</title>
    <link href="https://hmgqzx.github.io/wiki/LaTex/LaTeX/"/>
    <id>https://hmgqzx.github.io/wiki/LaTex/LaTeX/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://hahack.com/tools/latex-note/" target="_blank" rel="noopener">LaTeX札记 | HaHack</a></p><p><a href="http://hahack.com/codes/handout-with-script/" target="_blank" rel="noopener">Handout With Script | HaHack</a></p><blockquote><p>生成幻灯片的 LaTeX 样式包</p></blockquote><ul><li>安装、配置好一个 TeX 发行版；</li><li>选择一个顺手的编辑器（和 PDF 阅读器）</li></ul><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>在 OS X 上，主流是用 MacTex，他是一个基于 TeX Live 之上的封装，方便新手</p><h3 id="mactex"><a class="markdownIt-Anchor" href="#mactex"></a> MacTex</h3><p><a href="http://liam0205.me/2014/11/02/latex-mactex-chinese-support/" target="_blank" rel="noopener">为 MacTeX 配置中文支持 | 始终</a></p><p>要做的事情只有两件：</p><ul><li>配置一个 UTF-8 的编辑环境；</li><li>用 <code>ctex</code> 的语法选择合适的字体。</li></ul><h2 id="编辑器"><a class="markdownIt-Anchor" href="#编辑器"></a> 编辑器</h2><p>有很多种，各有所长</p><ul><li>Latexian</li><li>GNU Emacs</li><li>texstudio</li><li>Sublime Text</li><li>texmaker</li><li>Texshop（MacTex自带）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://hahack.com/tools/latex-note/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LaTeX札记 | HaHack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hahack.com/codes
      
    
    </summary>
    
      <category term="LaTex" scheme="https://hmgqzx.github.io/wiki/categories/LaTex/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 中的回调</title>
    <link href="https://hmgqzx.github.io/wiki/JavaScript/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://hmgqzx.github.io/wiki/JavaScript/回调函数/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回调是什么"><a class="markdownIt-Anchor" href="#回调是什么"></a> 回调是什么？</h2><blockquote><p>A <code>callback</code> is a function that is passed as an argument to another function and is executed after its parent function has completed.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></blockquote><blockquote><p>A <code>callback function</code>, also known as a <code>higher-order function</code>, is a function that is passed to another function (let’s call this other function “<strong>otherFunction</strong>”) as a parameter, and the <code>callback function</code> is called (or executed) inside the <strong>otherFunction</strong>. <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><p>A <code>callback function</code> is essentially a <strong>pattern</strong> (an established solution to a common problem), and therefore, the use of a callback function is also known as a <code>callback pattern</code>.<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2:1]</a></sup></p></blockquote><p><strong>简单地说:</strong> 一个回调函数是，当执行完另外一个函数（通常是异步的）之后，再来执行的一种函数<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。也就是说，回调函数是，做完其他“任务”后，再 call back 来执行的函数</p><p><strong>更进一步地说:</strong> 在 JavaScript 中，因为函数是对象，所以可以作为参数传入所谓的<code>高阶函数</code>，也能被<code>高阶函数</code>作为返回值返回<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>。任何函数，只要它作为参数传入且随后被调用，都可称之为回调函数<sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3:1]</a></sup>。</p><p>也就是说，在高阶函数中，作为参数传入的回调函数被当成一个整体来进行调用，从这一层上说，回调函数与抽离出来的子函数没有区别。只是因为他的用途而赋予了“回调”的名称。</p><h2 id="how-callback-functions-work"><a class="markdownIt-Anchor" href="#how-callback-functions-work"></a> How Callback Functions Work?</h2><h3 id="pass-definition-as-parameter"><a class="markdownIt-Anchor" href="#pass-definition-as-parameter"></a> pass definition as parameter</h3><blockquote><p>When we pass a <code>callback function</code> as an argument to another function, we are only passing the <strong>function definition</strong>. We are not executing the function in the parameter.<br>And since the containing function has the callback function in its parameter as a function definition, it can execute the callback anytime.<sup class="footnote-ref"><a href="#fn2" id="fnref2:2">[2:2]</a></sup></p></blockquote><p>我们对 the containing function<sub>（“外层的那个函数、方法”）</sub>传递的只是回调函数的定义，而不是在参数处执行这个回调函数<sub>（执行的话是这个样子`callback()`，是吧）</sub><br>当  the containing function “拿到” 了回调函数的定义，那么他想在什么时候执行这个回调函数都可以了</p><h3 id="closure"><a class="markdownIt-Anchor" href="#closure"></a> closure</h3><blockquote><p>The callback is a <code>closure</code>. As we know, closures have access to the containing function’s scope, so the <code>callback function</code> can access the containing functions’ variables, and even the variables from the global scope.<sup class="footnote-ref"><a href="#fn2" id="fnref2:3">[2:3]</a></sup></p></blockquote><p>callback 是一个 closure，所以回调函数可以访问 the containing function 里的变量</p><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><h3 id="this-的指向问题"><a class="markdownIt-Anchor" href="#this-的指向问题"></a> this 的指向问题</h3><p>现在可以用 ES6 的箭头函数<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>来解决</p><h3 id="callback-hell-problem"><a class="markdownIt-Anchor" href="#callback-hell-problem"></a> “Callback Hell” Problem</h3><p>也就是多重嵌套的匿名回调，使得代码可读性很低</p><p>solutions<sup class="footnote-ref"><a href="#fn2" id="fnref2:4">[2:4]</a></sup>：</p><ol><li>Name your functions and declare them and pass just the name of the function as the callback, instead of defining an anonymous function in the parameter of the main function.</li><li>Modularity: Separate your code into modules, so you can export a section of code that does a particular job. Then you can import that module into your larger application.</li></ol><h3 id="利用回调函数分离职能"><a class="markdownIt-Anchor" href="#利用回调函数分离职能"></a> 利用回调函数分离职能<sup class="footnote-ref"><a href="#fn2" id="fnref2:5">[2:5]</a></sup></h3><h2 id="使用场合"><a class="markdownIt-Anchor" href="#使用场合"></a> 使用场合<sup class="footnote-ref"><a href="#fn2" id="fnref2:6">[2:6]</a></sup></h2><ul><li>For asynchronous execution (such as reading files, and making HTTP requests)</li><li>In Event Listeners/Handlers</li><li>In setTimeout and setInterval methods</li><li>For Generalization: code conciseness</li></ul><h2 id="疑问"><a class="markdownIt-Anchor" href="#疑问"></a> 疑问</h2><p>在 ajax 等中，“引擎”是如何知道所要的数据到达了，从而来执行 callback 呢？</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="http://www.igeekbar.com/igeekbar/post/161.htm" target="_blank" rel="noopener">关于Javascript回调函数的那些事 | 人人都是互联网创意G客</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/" target="_blank" rel="noopener">Understand JavaScript Callback Functions and Use Them | JavaScript is Sexy</a> <a href="#fnref2" class="footnote-backref">↩︎</a> <a href="#fnref2:1" class="footnote-backref">↩︎</a> <a href="#fnref2:2" class="footnote-backref">↩︎</a> <a href="#fnref2:3" class="footnote-backref">↩︎</a> <a href="#fnref2:4" class="footnote-backref">↩︎</a> <a href="#fnref2:5" class="footnote-backref">↩︎</a> <a href="#fnref2:6" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://juejin.im/entry/595ba8025188250d957632d9" target="_blank" rel="noopener">回归基础：在JavaScript中回调函数是什么？ - 前端 - 掘金</a> <a href="#fnref3" class="footnote-backref">↩︎</a> <a href="#fnref3:1" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>They（Functions） can be “stored in variables, passed as arguments to functions, created within functions, and returned from functions”. <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数 - JavaScript | MDN</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;回调是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#回调是什么&quot;&gt;&lt;/a&gt; 回调是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;callback&lt;/code&gt; is a function that is pas
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://hmgqzx.github.io/wiki/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Dock</title>
    <link href="https://hmgqzx.github.io/wiki/Mac/Dock/"/>
    <id>https://hmgqzx.github.io/wiki/Mac/Dock/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="综合设置"><a class="markdownIt-Anchor" href="#综合设置"></a> 综合设置</h2><h3 id="只显示已打开应用"><a class="markdownIt-Anchor" href="#只显示已打开应用"></a> 只显示已打开应用<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.dock static-only -boolean true; killall Dock</span><br><span class="line"><span class="meta">#</span><span class="bash"> 恢复为默认设置：</span></span><br><span class="line">defaults delete com.apple.dock static-only; killall Dock</span><br></pre></td></tr></table></figure><h3 id="关掉-dock-动画"><a class="markdownIt-Anchor" href="#关掉-dock-动画"></a> 关掉 Dock 动画</h3><p>主要参考：<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><h2 id="隐藏-dock-特定-app-图标"><a class="markdownIt-Anchor" href="#隐藏-dock-特定-app-图标"></a> 隐藏 dock 特定 app 图标</h2><h3 id="主要原理"><a class="markdownIt-Anchor" href="#主要原理"></a> 主要原理</h3><p>在 Info.plist  添加</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">key</span>&gt;</span>LSUIElement<span class="tag">&lt;/<span class="name">key</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">true</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>LSUIElement 是 Launch Services Keys <sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>中的一项。其 Specifies whether the app is an agent app, that is, an app that should not appear in the Dock or Force Quit window. <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup></p><p>If this key is set to <code>YES</code>, Launch Services runs the app as an agent app. <sup class="footnote-ref"><a href="#fn4" id="fnref4:1">[4:1]</a></sup></p><h3 id="cli"><a class="markdownIt-Anchor" href="#cli"></a> cli</h3><p>可以用如下命令<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write /Applications/Adium.app/Contents/Info.plist LSUIElement true</span><br></pre></td></tr></table></figure><h3 id="乱码问题"><a class="markdownIt-Anchor" href="#乱码问题"></a> 乱码问题</h3><p>用其他编辑器打开 <code>Info.plist</code> 时，有可能乱码（我不知道什么原因），这时可以使用 Xcode 来打开。它的 Property List Editor 也使得阅读选项非常清晰。<sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="https://sspai.com/post/33493" target="_blank" rel="noopener">装点你的 Dock：外观篇丨一日一技 · Mac - 少数派</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="https://zhuanlan.zhihu.com/p/20667030" target="_blank" rel="noopener">Mac 加速：干掉那些「炫酷」的动画 - MacTips - 知乎专栏</a> <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html" target="_blank" rel="noopener">Launch Services Keys</a> <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p><a href="https://developer.apple.com/library/content/documentation/General/Reference/InfoPlistKeyReference/Articles/LaunchServicesKeys.html#//apple_ref/doc/uid/20001431-108256" target="_blank" rel="noopener">Launch Services Keys</a> <a href="#fnref4" class="footnote-backref">↩︎</a> <a href="#fnref4:1" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://apple.stackexchange.com/questions/130390/hide-adium-or-any-other-apps-icon-in-the-dock" target="_blank" rel="noopener">macos - Hide Adium (or any other app’s) icon in the dock - Ask Different</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p><a href="https://apple.stackexchange.com/questions/130390/hide-adium-or-any-other-apps-icon-in-the-dock/131136#131136" target="_blank" rel="noopener">macos - Hide Adium (or any other app’s) icon in the dock - Ask Different</a> <a href="#fnref6" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;综合设置&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#综合设置&quot;&gt;&lt;/a&gt; 综合设置&lt;/h2&gt;
&lt;h3 id=&quot;只显示已打开应用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#只显示已打开应用&quot;&gt;&lt;/a&gt; 
      
    
    </summary>
    
      <category term="Mac" scheme="https://hmgqzx.github.io/wiki/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac OS X 里特有的那些命令行</title>
    <link href="https://hmgqzx.github.io/wiki/Mac/Mac%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    <id>https://hmgqzx.github.io/wiki/Mac/Mac 命令行工具/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 里的不少配置可以通过特定的命令行来设定，以下是我比较常用的、感兴趣的命令。我一般是在 zsh 里对这些常用的命令设定 alias，非常方便。<br><em>更多的命令请参考：</em></p><ul><li><a href="https://github.com/herrbischoff/awesome-osx-command-line" target="_blank" rel="noopener">herrbischoff/awesome-osx-command-line: Use your OS X terminal shell to do awesome things.</a></li></ul><h3 id="finder"><a class="markdownIt-Anchor" href="#finder"></a> Finder</h3><h4 id="show-all-file-extensions-显示所有的文件扩展名"><a class="markdownIt-Anchor" href="#show-all-file-extensions-显示所有的文件扩展名"></a> Show All File Extensions 显示所有的文件扩展名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write -g AppleShowAllExtensions -bool true</span><br></pre></td></tr></table></figure><h4 id="hide-folder-in-finder-隐藏-finder-里的指定文件夹"><a class="markdownIt-Anchor" href="#hide-folder-in-finder-隐藏-finder-里的指定文件夹"></a> Hide Folder in Finder 隐藏 Finder 里的指定文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chflags hidden /path/to/folder/</span><br></pre></td></tr></table></figure><h4 id="show-hidden-files-显示隐藏文件"><a class="markdownIt-Anchor" href="#show-hidden-files-显示隐藏文件"></a> Show Hidden Files 显示隐藏文件</h4><p>隐藏文件是指以<code>.</code>开头的系统文件等，在 Finder 里默认隐藏；开启显示后，数目会很多，建议平时不用时关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Show All #要重启才行？</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles true</span><br><span class="line"></span><br><span class="line"># Restore Default File Visibility</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles false</span><br></pre></td></tr></table></figure><h4 id="unhide-user-library-folder-不隐藏用户的库文件夹"><a class="markdownIt-Anchor" href="#unhide-user-library-folder-不隐藏用户的库文件夹"></a> Unhide User Library Folder 不隐藏用户的库文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chflags nohidden ~/Library</span><br></pre></td></tr></table></figure><h4 id="increase-number-of-recent-places-增加-finder-中的最近使用文件夹数量"><a class="markdownIt-Anchor" href="#increase-number-of-recent-places-增加-finder-中的最近使用文件夹数量"></a> Increase Number of Recent Places 增加 Finder 中的“最近使用文件夹”数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write -g NSNavRecentPlacesLimit -int 10 &amp;&amp; \</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure><h4 id="show-quit-finder-menu-item-设定-finder-可退出强烈推荐"><a class="markdownIt-Anchor" href="#show-quit-finder-menu-item-设定-finder-可退出强烈推荐"></a> Show “Quit Finder” Menu Item 设定 Finder 可退出（<code>强烈推荐</code>）</h4><blockquote><p>Makes possible to see Finder menu item “Quit Finder” with default shortcut Cmd + Q</p></blockquote><p>这个好用，这样就能使用 <code>Cmd + Q</code> 一次性关闭所有的 Finder 窗口了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Enable</span><br><span class="line">defaults write com.apple.finder QuitMenuItem -bool true &amp;&amp; \</span><br><span class="line">killall Finder</span><br><span class="line"></span><br><span class="line"># Disable (Default)</span><br><span class="line">defaults write com.apple.finder QuitMenuItem -bool false &amp;&amp; \</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure><h4 id="path-bar显示路径栏"><a class="markdownIt-Anchor" href="#path-bar显示路径栏"></a> Path Bar显示路径栏</h4><p>开启后会在 Finder  底部显示当前路径信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Show</span><br><span class="line">defaults write com.apple.finder ShowPathbar -bool true</span><br><span class="line"></span><br><span class="line"># Hide (Default)</span><br><span class="line">defaults write com.apple.finder ShowPathbar -bool false</span><br></pre></td></tr></table></figure><h4 id="status-bar-状态栏"><a class="markdownIt-Anchor" href="#status-bar-状态栏"></a> Status Bar 状态栏</h4><p>在 Finder 最底部，显示当前文件夹项目数量、光标选中数量、硬盘可用容量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Show</span><br><span class="line">defaults write com.apple.finder ShowStatusBar -bool true</span><br><span class="line"></span><br><span class="line"># Hide (Default)</span><br><span class="line">defaults write com.apple.finder ShowStatusBar -bool false</span><br></pre></td></tr></table></figure><h4 id="set-current-folder-as-default-search-scope-设置当前文件夹为默认搜索域"><a class="markdownIt-Anchor" href="#set-current-folder-as-default-search-scope-设置当前文件夹为默认搜索域"></a> Set Current Folder as Default Search Scope 设置当前文件夹为默认搜索域</h4><p>整理有序的话，大部分情况下只是搜索当前目录，这样就不用每次都要多点击一次来选择了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder FXDefaultSearchScope -string &quot;SCcf&quot;</span><br></pre></td></tr></table></figure><h3 id="layout"><a class="markdownIt-Anchor" href="#layout"></a> Layout</h3><h4 id="desktop-icon-visibility-显示隐藏桌面图标"><a class="markdownIt-Anchor" href="#desktop-icon-visibility-显示隐藏桌面图标"></a> Desktop Icon Visibility 显示/隐藏桌面图标</h4><p>OS X 桌面的右键功能里没有 Windows 的“隐藏桌面图标”选项，可以通过下面的命令实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Hide Icons</span><br><span class="line">defaults write com.apple.finder CreateDesktop -bool false &amp;&amp; \</span><br><span class="line">killall Finder</span><br><span class="line"></span><br><span class="line"># Show Icons (Default)</span><br><span class="line">defaults write com.apple.finder CreateDesktop -bool true &amp;&amp; \</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure><h3 id="battery-电池"><a class="markdownIt-Anchor" href="#battery-电池"></a> Battery 电池</h3><p>哈哈，这个纯粹是列在这儿，平时并没多大用</p><h4 id="remaining-battery-percentage-剩余电量"><a class="markdownIt-Anchor" href="#remaining-battery-percentage-剩余电量"></a> Remaining Battery Percentage 剩余电量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pmset -g batt | egrep "([0-9]+\%).*" -o --colour=auto | cut -f1 -d';'</span><br></pre></td></tr></table></figure><h4 id="remaining-battery-time-电池剩余使用时间"><a class="markdownIt-Anchor" href="#remaining-battery-time-电池剩余使用时间"></a> Remaining Battery Time 电池剩余使用时间</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pmset -g batt | egrep "([0-9]+\%).*" -o --colour=auto | cut -f3 -d';'</span><br></pre></td></tr></table></figure><h3 id="power-management-电源管理"><a class="markdownIt-Anchor" href="#power-management-电源管理"></a> Power Management 电源管理</h3><h4 id="prevent-system-sleep-防止系统进入睡眠一段时间"><a class="markdownIt-Anchor" href="#prevent-system-sleep-防止系统进入睡眠一段时间"></a> Prevent System Sleep 防止系统进入睡眠一段时间</h4><p>参数单位是秒</p><p>Prevent sleep for 1 hour:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caffeinate -u -t 3600</span><br></pre></td></tr></table></figure><h4 id="put-display-to-sleep-after-15-minutes-of-inactivity-一段时间不活动后关闭显示器"><a class="markdownIt-Anchor" href="#put-display-to-sleep-after-15-minutes-of-inactivity-一段时间不活动后关闭显示器"></a> Put Display to Sleep after 15 Minutes of Inactivity 一段时间不活动后关闭显示器</h4><p>参数单位是分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pmset displaysleep 15</span><br></pre></td></tr></table></figure><h4 id="put-computer-to-sleep-after-30-minutes-of-inactivity-一段时间不活动后使-mac-睡眠"><a class="markdownIt-Anchor" href="#put-computer-to-sleep-after-30-minutes-of-inactivity-一段时间不活动后使-mac-睡眠"></a> Put Computer to Sleep after 30 Minutes of Inactivity 一段时间不活动后使 Mac 睡眠</h4><p>参数单位是分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pmset sleep 30</span><br></pre></td></tr></table></figure><h4 id="check-system-sleep-idle-time-查看系统进入休眠的间隔"><a class="markdownIt-Anchor" href="#check-system-sleep-idle-time-查看系统进入休眠的间隔"></a> Check System Sleep Idle Time 查看系统进入休眠的间隔</h4><p>目前我的是 1 分钟</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemsetup -getcomputersleep</span></span><br><span class="line">Computer Sleep: after 1 minutes</span><br></pre></td></tr></table></figure><h4 id="set-system-sleep-idle-time-to-60-minutes-设置系统进入休眠的间隔"><a class="markdownIt-Anchor" href="#set-system-sleep-idle-time-to-60-minutes-设置系统进入休眠的间隔"></a> Set System Sleep Idle Time to 60 Minutes 设置系统进入休眠的间隔</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemsetup -setcomputersleep 60</span><br></pre></td></tr></table></figure><h3 id="audio"><a class="markdownIt-Anchor" href="#audio"></a> Audio</h3><h4 id="set-audio-volume"><a class="markdownIt-Anchor" href="#set-audio-volume"></a> Set Audio Volume</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osascript -e &apos;set volume 4&apos;</span><br></pre></td></tr></table></figure><h4 id="play-audio-file"><a class="markdownIt-Anchor" href="#play-audio-file"></a> Play Audio File</h4><p>You can play all audio formats that are natively supported by QuickTime.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afplay -q 1 filename.mp3</span><br></pre></td></tr></table></figure><h3 id="tts"><a class="markdownIt-Anchor" href="#tts"></a> TTS</h3><p>吐槽下，综合各方面考虑，Mac 上可用的 TTS 大概最好的就是系统自带的了。然而——还是那么地垃圾……</p><h4 id="speak-text-with-system-default-voice-用-tts-发音朗读文本"><a class="markdownIt-Anchor" href="#speak-text-with-system-default-voice-用-tts-发音朗读文本"></a> Speak Text with System Default Voice 用 TTS 发音朗读文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say &apos;All your base are belong to us!&apos;</span><br></pre></td></tr></table></figure><h4 id="create-audiobook-from-text"><a class="markdownIt-Anchor" href="#create-audiobook-from-text"></a> Create Audiobook From Text</h4><p>Uses “Alex” voice, a plain UTF-8 encoded text file for input and AAC output.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say -v Alex -f file.txt -o &quot;output.m4a&quot;</span><br></pre></td></tr></table></figure><h3 id="networking-tools-网络工具"><a class="markdownIt-Anchor" href="#networking-tools-网络工具"></a> Networking Tools 网络工具</h3><h4 id="ping-a-host-to-see-whether-its-available"><a class="markdownIt-Anchor" href="#ping-a-host-to-see-whether-its-available"></a> Ping a Host to See Whether It’s Available</h4><p>这个大概是天朝特色了……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -o github.com</span><br></pre></td></tr></table></figure><h4 id="troubleshoot-routing-problems"><a class="markdownIt-Anchor" href="#troubleshoot-routing-problems"></a> Troubleshoot Routing Problems</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute github.com</span><br></pre></td></tr></table></figure><h3 id="ssh"><a class="markdownIt-Anchor" href="#ssh"></a> SSH</h3><h4 id="remote-login-远程登录"><a class="markdownIt-Anchor" href="#remote-login-远程登录"></a> Remote Login 远程登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Enable remote login</span><br><span class="line">sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist</span><br><span class="line"></span><br><span class="line"># Disable remote login</span><br><span class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure><h3 id="tcpip"><a class="markdownIt-Anchor" href="#tcpip"></a> TCP/IP</h3><h4 id="show-application-using-a-certain-port-显示当前占用特定端口的应用列表-强烈推荐"><a class="markdownIt-Anchor" href="#show-application-using-a-certain-port-显示当前占用特定端口的应用列表-强烈推荐"></a> Show Application Using a Certain Port 显示当前占用特定端口的应用列表 （<code>强烈推荐</code>）</h4><p>这个用来检查端口占用很不错</p><p>This outputs all applications currently using port 80.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i :80</span><br></pre></td></tr></table></figure><h4 id="show-external-ip-address"><a class="markdownIt-Anchor" href="#show-external-ip-address"></a> Show External IP Address</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig +short myip.opendns.com @resolver1.opendns.com</span><br></pre></td></tr></table></figure><h3 id="wi-fi"><a class="markdownIt-Anchor" href="#wi-fi"></a> Wi-Fi</h3><h4 id="show-local-ip-address"><a class="markdownIt-Anchor" href="#show-local-ip-address"></a> Show Local IP Address</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig getifaddr en0</span><br></pre></td></tr></table></figure><h4 id="show-wi-fi-connection-history"><a class="markdownIt-Anchor" href="#show-wi-fi-connection-history"></a> Show Wi-Fi Connection History</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults read /Library/Preferences/SystemConfiguration/com.apple.airport.preferences | grep LastConnected -A 7</span><br></pre></td></tr></table></figure><h4 id="show-wi-fi-network-passwords"><a class="markdownIt-Anchor" href="#show-wi-fi-network-passwords"></a> Show Wi-Fi Network Passwords</h4><p>Exchange SSID with the SSID of the access point you wish to query the password from.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">security find-generic-password -D &quot;AirPort network password&quot; -a &quot;SSID&quot; -gw</span><br></pre></td></tr></table></figure><h3 id="spotlight"><a class="markdownIt-Anchor" href="#spotlight"></a> Spotlight</h3><p>这个要怎么用？听说这个很久了，还没去具体了解使用</p><h4 id="spotlight-indexing"><a class="markdownIt-Anchor" href="#spotlight-indexing"></a> Spotlight Indexing</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Disable</span><br><span class="line">mdutil -i off -d /path/to/volume</span><br><span class="line"></span><br><span class="line"># Enable (Default)</span><br><span class="line">mdutil -i on /path/to/volume</span><br></pre></td></tr></table></figure><h4 id="erase-spotlight-index-and-rebuild-重建索引"><a class="markdownIt-Anchor" href="#erase-spotlight-index-and-rebuild-重建索引"></a> Erase Spotlight Index and Rebuild 重建索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdutil -E /path/to/volume</span><br></pre></td></tr></table></figure><h4 id="search-via-spotlight-搜索"><a class="markdownIt-Anchor" href="#search-via-spotlight-搜索"></a> Search via Spotlight 搜索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -name &apos;searchterm&apos;</span><br></pre></td></tr></table></figure><h4 id="show-spotlight-indexed-metadata"><a class="markdownIt-Anchor" href="#show-spotlight-indexed-metadata"></a> Show Spotlight Indexed Metadata</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdls /path/to/file</span><br></pre></td></tr></table></figure><h3 id="screenshots-屏幕截图"><a class="markdownIt-Anchor" href="#screenshots-屏幕截图"></a> Screenshots 屏幕截图</h3><p>目前在用软件<code>Snip</code>，满足基本所需了</p><h4 id="take-delayed-screenshot"><a class="markdownIt-Anchor" href="#take-delayed-screenshot"></a> Take Delayed Screenshot</h4><p>Takes a screenshot as JPEG after 3 seconds and displays in Preview.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screencapture -T 3 -t jpg -P delayedpic.jpg</span><br></pre></td></tr></table></figure><h4 id="save-screenshots-to-given-location"><a class="markdownIt-Anchor" href="#save-screenshots-to-given-location"></a> Save Screenshots to Given Location</h4><p>Sets location to <code>~/Desktop</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture location ~/Desktop &amp;&amp; \</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><h4 id="save-screenshots-in-given-format"><a class="markdownIt-Anchor" href="#save-screenshots-in-given-format"></a> Save Screenshots in Given Format</h4><p>Sets format to <code>png</code>. Other options are <code>bmp</code>, <code>gif</code>, <code>jpg</code>, <code>jpeg</code>, <code>pdf</code>, <code>tiff</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture type -string &quot;png&quot;</span><br></pre></td></tr></table></figure><h4 id="disable-shadow-in-screenshots-隐藏截图里的阴影"><a class="markdownIt-Anchor" href="#disable-shadow-in-screenshots-隐藏截图里的阴影"></a> Disable Shadow in Screenshots 隐藏截图里的阴影</h4><p>有阴影好看很多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture disable-shadow -bool true &amp;&amp; \</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><h4 id="set-default-screenshot-name"><a class="markdownIt-Anchor" href="#set-default-screenshot-name"></a> Set Default Screenshot Name</h4><p>Date and time remain unchanged.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;Example name&quot; &amp;&amp; \</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><h3 id="login-window"><a class="markdownIt-Anchor" href="#login-window"></a> Login Window</h3><h4 id="set-login-window-text"><a class="markdownIt-Anchor" href="#set-login-window-text"></a> Set Login Window Text</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText &quot;Your text&quot;</span><br></pre></td></tr></table></figure><h3 id="security"><a class="markdownIt-Anchor" href="#security"></a> Security</h3><h3 id="application-firewall"><a class="markdownIt-Anchor" href="#application-firewall"></a> Application Firewall</h3><p>这个是不是可以阻止应用联网？？（之前试了下，好像没什么效果，😓）</p><h4 id="firewall-service"><a class="markdownIt-Anchor" href="#firewall-service"></a> Firewall Service</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Show Status</span><br><span class="line">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate</span><br><span class="line"></span><br><span class="line"># Enable</span><br><span class="line">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on</span><br><span class="line"></span><br><span class="line"># Disable (Default)</span><br><span class="line">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off</span><br></pre></td></tr></table></figure><h4 id="add-application-to-firewall"><a class="markdownIt-Anchor" href="#add-application-to-firewall"></a> Add Application to Firewall</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /path/to/file</span><br></pre></td></tr></table></figure><h3 id="passwords"><a class="markdownIt-Anchor" href="#passwords"></a> Passwords</h3><h4 id="generate-secure-password-and-copy-to-clipboard"><a class="markdownIt-Anchor" href="#generate-secure-password-and-copy-to-clipboard"></a> Generate Secure Password and Copy to Clipboard</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LC_ALL=C tr -dc &quot;[:alpha:][:alnum:]&quot; &lt; /dev/urandom | head -c 20 | pbcopy</span><br></pre></td></tr></table></figure><h3 id="physical-access"><a class="markdownIt-Anchor" href="#physical-access"></a> Physical Access</h3><h4 id="launch-screen-saver-启动屏幕保护程序"><a class="markdownIt-Anchor" href="#launch-screen-saver-启动屏幕保护程序"></a> Launch Screen Saver  启动屏幕保护程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app</span><br></pre></td></tr></table></figure><h4 id="lock-screen-锁屏"><a class="markdownIt-Anchor" href="#lock-screen-锁屏"></a> Lock Screen 锁屏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend</span><br></pre></td></tr></table></figure><h4 id="screensaver-immediate-lock"><a class="markdownIt-Anchor" href="#screensaver-immediate-lock"></a> Screensaver Immediate Lock</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Status</span><br><span class="line">defaults read com.apple.screensaver askForPasswordDelay</span><br><span class="line"></span><br><span class="line"># Enable (Default)</span><br><span class="line">defaults write com.apple.screensaver askForPasswordDelay -int 0</span><br><span class="line"></span><br><span class="line"># Disable (Integer = lock delay in seconds)</span><br><span class="line">defaults write com.apple.screensaver askForPasswordDelay -int 10</span><br></pre></td></tr></table></figure><h4 id="screensaver-password"><a class="markdownIt-Anchor" href="#screensaver-password"></a> Screensaver Password</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Status</span><br><span class="line">defaults read com.apple.screensaver askForPassword</span><br><span class="line"></span><br><span class="line"># Enable</span><br><span class="line">defaults write com.apple.screensaver askForPassword -int 1</span><br><span class="line"></span><br><span class="line"># Disable (Default)</span><br><span class="line">defaults write com.apple.screensaver askForPassword -int 0</span><br></pre></td></tr></table></figure><h4 id="shutdown-关机"><a class="markdownIt-Anchor" href="#shutdown-关机"></a> Shutdown 关机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo poweroff</span><br></pre></td></tr></table></figure><h4 id="uptime-已开机时间"><a class="markdownIt-Anchor" href="#uptime-已开机时间"></a> Uptime 已开机时间</h4><p>How long since your last restart.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uptime</span></span><br><span class="line">15:38  up 19 days, 14:48, 6 users, load averages: 1.85 1.55 1.47</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac 里的不少配置可以通过特定的命令行来设定，以下是我比较常用的、感兴趣的命令。我一般是在 zsh 里对这些常用的命令设定 alias，非常方便。&lt;br&gt;
&lt;em&gt;更多的命令请参考：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.co
      
    
    </summary>
    
      <category term="Mac" scheme="https://hmgqzx.github.io/wiki/categories/Mac/"/>
    
    
      <category term="配置" scheme="https://hmgqzx.github.io/wiki/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="小技巧" scheme="https://hmgqzx.github.io/wiki/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>QuickLook 预览增强插件</title>
    <link href="https://hmgqzx.github.io/wiki/Mac/QuickLook%20%E9%A2%84%E8%A7%88%E5%A2%9E%E5%BC%BA%E6%8F%92%E4%BB%B6/"/>
    <id>https://hmgqzx.github.io/wiki/Mac/QuickLook 预览增强插件/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>QuickLook（快速预览）是 Mac OS X 中一项很好的功能。用户选择文件后，按下空格键即可快速预览。因为不用点击打开，还能使用方向键切换，从而节省了大量的时间。但对于开发者来说，系统内置的功能还不能完全满足需求。</p><p>需要预览如下文件时，这些插件帮助了我许多：</p><ul><li>MarkDown文件</li><li>源代码文件，支持语法高亮</li><li>纯文本或无后缀的“文本”文件<ul><li>可直接预览，而不用去设置打开方式，太棒👍</li></ul></li></ul><h2 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h2><p>这里是一个列表，包含了不少有用的外部插件，可以通过 <code>brew</code> 安装：</p><p><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="noopener">sindresorhus/quick-look-plugins: List of useful Quick Look plugins for developers</a></p><p>在这里：<a href="http://www.quicklookplugins.com/" target="_blank" rel="noopener">QuickLook Plugins List</a> 你能找到更多的插件</p><h2 id="附言"><a class="markdownIt-Anchor" href="#附言"></a> 附言</h2><p>还不了解 <code>brew</code> 的普通用户可参考这篇文章 <a href="https://sspai.com/post/31927" target="_blank" rel="noopener">加强你的「一指禅」：Mac QuickLook「快速预览」兼容性扩展教程 - 少数派</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;QuickLook（快速预览）是 Mac OS X 中一项很好的功能。用户选择文件后，按下空格键即可快速预览。因为不用点击打开，还能使用方向键切换，从而节省了大量的时间。但对于开发者来说，系统内置的功能还不能完全满足需求。&lt;/p&gt;
&lt;p&gt;需要预览如下文件时，这些插件帮助了我
      
    
    </summary>
    
      <category term="Mac" scheme="https://hmgqzx.github.io/wiki/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>dotfiles</title>
    <link href="https://hmgqzx.github.io/wiki/Mac/dotfiles/"/>
    <id>https://hmgqzx.github.io/wiki/Mac/dotfiles/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>dotfiles，就是以 <code>.</code> (dot)为前缀的文件，一般在系统里是隐藏的，而很多配置就是这些文件。<a href="https://dotfiles.github.io/" target="_blank" rel="noopener">这里</a> 列出了不少人的配置，可以借鉴</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="http://blog.amowu.com/2015/01/hacker-guide-to-setting-up-your-mac.html" target="_blank" rel="noopener">如何優雅地在 Mac 上使用 dotfiles?</a></p><p><a href="http://cloudchen.logdown.com/posts/49264746647/dotfiles" target="_blank" rel="noopener">善用 dotfiles 個人化自己的工作環境 « Cloudの丘</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dotfiles，就是以 &lt;code&gt;.&lt;/code&gt; (dot)为前缀的文件，一般在系统里是隐藏的，而很多配置就是这些文件。&lt;a href=&quot;https://dotfiles.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a
      
    
    </summary>
    
      <category term="Mac" scheme="https://hmgqzx.github.io/wiki/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 中的常量</title>
    <link href="https://hmgqzx.github.io/wiki/Python/Python%20%E5%B8%B8%E9%87%8F/"/>
    <id>https://hmgqzx.github.io/wiki/Python/Python 常量/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python在语法上并没有定义常量，尽管PEP 8定义了常量的命名规范为大写字母和下划线组成。</p><p>解决方案 <a href="http://code.activestate.com/recipes/65207-constants-in-python/" target="_blank" rel="noopener">Constants in Python</a></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="http://www.malike.net.cn/blog/2013/11/03/python-constants/" target="_blank" rel="noopener">Python常量 - Like的世界</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python在语法上并没有定义常量，尽管PEP 8定义了常量的命名规范为大写字母和下划线组成。&lt;/p&gt;
&lt;p&gt;解决方案 &lt;a href=&quot;http://code.activestate.com/recipes/65207-constants-in-python/&quot; targ
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Homebrew</title>
    <link href="https://hmgqzx.github.io/wiki/Mac/homebrew/"/>
    <id>https://hmgqzx.github.io/wiki/Mac/homebrew/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Homebrew 是 Mac OS X 上的软件包管理系统，使用它可以方便地安装、更新许多软件（“无人值守”~自动化）。称之为“ Mac 必备神器”一点也不为过。</p><h2 id="homebrew"><a class="markdownIt-Anchor" href="#homebrew"></a> Homebrew</h2><h3 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h3><p>常用的命令没几个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install wget <span class="comment"># 安装源码</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew info svn <span class="comment"># 显示软件的各种信息，包括版本啊源码地址啊等等</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew uninstall wget <span class="comment"># 卸载软件，很爽，一键静默卸载</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew search git <span class="comment"># 模糊搜索brew 支持的软件。如果不加软件名，就会列出所有它支持的软件。多的很。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew list <span class="comment"># 列出本机通过brew安装的所有软件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew update <span class="comment"># 跟新brew软件自身</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew upgrade wget <span class="comment"># 更新安装过的软件,如果不加软件名，就更新所有可以更新的软件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cleanup <span class="comment"># 清除下载的各种缓存</span></span></span><br></pre></td></tr></table></figure><p><mark>装任何东西前都看看能不能用 brew 啊！</mark>（很多包/软件都支持 brew 安装）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew search &lt;软件名&gt;</span></span><br></pre></td></tr></table></figure><p>查看 brew 安装的某个包所在路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew ls &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure><h3 id="services-utility"><a class="markdownIt-Anchor" href="#services-utility"></a> services utility</h3><p>brew services are really useful for managing system services, type <code>$ brew services --help</code> for more info.</p><h4 id="查看所有的已启用的服务"><a class="markdownIt-Anchor" href="#查看所有的已启用的服务"></a> 查看所有的已启用的服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew services list</span></span><br></pre></td></tr></table></figure><p>可以用来检查某些包<sub>如Tomcat</sub>的运行情况（从而判断是否已正确安装）</p><h3 id="cellar-包安装路径"><a class="markdownIt-Anchor" href="#cellar-包安装路径"></a> Cellar 包安装路径</h3><p>Homebrew 安装的包在 <code>/usr/local/Cellar/</code> 下</p><p>Homebrew keeps packages (known as <strong>kegs</strong>) in the <strong>Cellar</strong>, where you can check config and data files. It is a directory located at:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Cellar/</span></span><br></pre></td></tr></table></figure><p>有时因为要指定某个包的执行程序<sub>如Tomcat等</sub>来启动，需要填写安装路径，可以这样查找：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew ls &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure><h1 id="homebrew-dupes"><a class="markdownIt-Anchor" href="#homebrew-dupes"></a> homebrew-dupes</h1><blockquote><p>System duplicate formulae for the Homebrew package manager  —— <a href="https://github.com/Homebrew/homebrew-dupes" target="_blank" rel="noopener">homebrew-dupes</a></p></blockquote><p>因为 homebrew 默认的措施是：not to offer duplicates for system tools。所以当我们需要安装像 <code>grep</code>（系统自带版本太低）等系统工具时就要用到 <code>homebrew-dupes</code> 这个 repository 以作替代</p><h2 id="槽点"><a class="markdownIt-Anchor" href="#槽点"></a> 槽点</h2><p>安装 <code>MySQL</code> 就不要用 <code>Homebrew</code> 了，多台机器上试验过，会存在问题。还是推荐用官网 dmg 安装</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Homebrew 是 Mac OS X 上的软件包管理系统，使用它可以方便地安装、更新许多软件（“无人值守”~自动化）。称之为“ Mac 必备神器”一点也不为过。&lt;/p&gt;
&lt;h2 id=&quot;homebrew&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
      <category term="Mac" scheme="https://hmgqzx.github.io/wiki/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 数据持久化</title>
    <link href="https://hmgqzx.github.io/wiki/Python/Python%20%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>https://hmgqzx.github.io/wiki/Python/Python 数据持久化/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="http://brieflyx.me/2015/python-module/python-data-persistence/" target="_blank" rel="noopener">Python 数据持久化方式——JSON与Pickle - BrieflyX’s Base</a></p><p><a href="https://hmgqzx.github.io/wiki/Python/pickle">pickle| Hmgqzx’s Wiki</a></p><h2 id="json-和-pickle-的比较"><a class="markdownIt-Anchor" href="#json-和-pickle-的比较"></a> JSON 和 Pickle 的比较</h2><ul><li>JSON是文本形式的存储，Pickle则是二进制形式（至少常用二进制）</li><li>JSON是人可读的，Pickle不可读</li><li>JSON广泛应用于除Python外的其他领域，Pickle是Python独有的。</li><li>JSON只能dump一些python的内置对象，<strong>Pickle可以存储几乎所有对象</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#参考&quot;&gt;&lt;/a&gt; 参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://brieflyx.me/2015/python-module/python-data-persistence/&quot;
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>19.6 控制结构与复杂度</title>
    <link href="https://hmgqzx.github.io/wiki/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E7%BC%96%E7%A8%8B/%20Code%20Complete%20%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/Chapter%2019%20%E4%B8%80%E8%88%AC%E6%8E%A7%E5%88%B6%E9%97%AE%E9%A2%98/19.6%20%E6%8E%A7%E5%88%B6%E7%BB%93%E6%9E%84%E4%B8%8E%E5%A4%8D%E6%9D%82%E5%BA%A6/"/>
    <id>https://hmgqzx.github.io/wiki/书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.6 控制结构与复杂度/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>如果控制流不是影响复杂度的最大因素，那么至少也是最大的因素之一</p></blockquote><h2 id="复杂度的重要性"><a class="markdownIt-Anchor" href="#复杂度的重要性"></a> 复杂度的重要性</h2><p>参考[[……]]</p><h2 id="如何衡量复杂度"><a class="markdownIt-Anchor" href="#如何衡量复杂度"></a> 如何衡量复杂度</h2><h3 id="利用决策点decision-point数量"><a class="markdownIt-Anchor" href="#利用决策点decision-point数量"></a> 利用决策点（decision point）数量</h3><p>最著名的方法，源自 Tom McCabe。又称[[圈复杂度]]</p><p>具体操作：</p><ul><li>计数从 1 开始，一直往下阅读程序</li><li>一旦遇到如下关键字（或其他同性质的词），就加 1：<ul><li>if、while、repeat、for、and、or</li></ul></li><li>对 case 语句中的每一种情况都加 1</li></ul><p>对照下表：</p><table><thead><tr><th>子程序中的决策点数量</th><th>结论</th></tr></thead><tbody><tr><td>1 ~ 5</td><td>子程序可能还不错，起码不复杂</td></tr><tr><td>6 ~ 10</td><td>得想办法简化子程序了</td></tr><tr><td>10 +</td><td>应该将这个子程序的某一部分改写为另一个子程序再调用它</td></tr></tbody></table><p>关于上限：</p><p>10 个决策点的上限并不是绝对的（如 flask8 推荐上限是12 ），而是应该把决策点的数量当做警示。当警示出现时，就要仔细考虑子程序是否真的过于复杂、是否需要重新设计了</p><h3 id="其他衡量手段"><a class="markdownIt-Anchor" href="#其他衡量手段"></a> 其他衡量手段</h3><h4 id="智力实体数量"><a class="markdownIt-Anchor" href="#智力实体数量"></a> 智力实体数量</h4><p>为了理解应用程序，你必须在同一时间记住的智力实体的数量</p><h4 id="所用的数据量"><a class="markdownIt-Anchor" href="#所用的数据量"></a> 所用的数据量</h4><p>？？</p><h4 id="控制结构中的嵌套层数"><a class="markdownIt-Anchor" href="#控制结构中的嵌套层数"></a> 控制结构中的嵌套层数</h4><p><code>toWrite</code></p><h4 id="代码行数"><a class="markdownIt-Anchor" href="#代码行数"></a> 代码行数</h4><p><code>toWrite</code></p><h4 id="同一变量的跨度"><a class="markdownIt-Anchor" href="#同一变量的跨度"></a> 同一变量的跨度</h4><p><code>toNote</code></p><h4 id="变量的生存期"><a class="markdownIt-Anchor" href="#变量的生存期"></a> 变量的生存期</h4><p><code>toNote</code></p><h4 id="输入和输出的量"><a class="markdownIt-Anchor" href="#输入和输出的量"></a> 输入和输出的量</h4><p>？？</p><h3 id="延伸"><a class="markdownIt-Anchor" href="#延伸"></a> 延伸</h3><p>python 中的 flask8 可以用来衡量圈复杂度</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;如果控制流不是影响复杂度的最大因素，那么至少也是最大的因素之一&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;复杂度的重要性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#复杂度的重要性&quot;&gt;&lt;/a&gt; 复杂度的重要性
      
    
    </summary>
    
      <category term="书籍阅读笔记" scheme="https://hmgqzx.github.io/wiki/categories/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/"/>
    
      <category term="编程" scheme="https://hmgqzx.github.io/wiki/categories/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E7%BC%96%E7%A8%8B/"/>
    
      <category term=" Code Complete 代码大全" scheme="https://hmgqzx.github.io/wiki/categories/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E7%BC%96%E7%A8%8B/Code-Complete-%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/"/>
    
      <category term="Chapter 19 一般控制问题" scheme="https://hmgqzx.github.io/wiki/categories/%E4%B9%A6%E7%B1%8D%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0/%E7%BC%96%E7%A8%8B/Code-Complete-%E4%BB%A3%E7%A0%81%E5%A4%A7%E5%85%A8/Chapter-19-%E4%B8%80%E8%88%AC%E6%8E%A7%E5%88%B6%E9%97%AE%E9%A2%98/"/>
    
    
  </entry>
  
  <entry>
    <title>Pyenv —— Python版本管理工具</title>
    <link href="https://hmgqzx.github.io/wiki/Python/Python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>https://hmgqzx.github.io/wiki/Python/Python 虚拟环境/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>pyenv可以帮助你建立多个版本的 python 环境，它们相互隔离，不会污染到系统自带的 Python（ pip 安装的包也是在各自目录下的）</p><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><h2 id="安装-pyenv"><a class="markdownIt-Anchor" href="#安装-pyenv"></a> 安装 pyenv</h2><p><a href="https://github.com/yyuu/pyenv#installation" target="_blank" rel="noopener">pyenv 项目主页#安装步骤</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install pyenv</span><br></pre></td></tr></table></figure><h4 id="添加环境变量"><a class="markdownIt-Anchor" href="#添加环境变量"></a> 添加环境变量</h4><p><code>PYENV_ROOT</code>指向pyenv检出的根目录，并向<code>$PATH</code>添加<code>$PYENV_ROOT/bin</code>以提供访问<code>pyenv</code>这条命令的路径(这里的shell配置文件依不同SHELL而需作修改,如bash：<code>~/.bash_profile</code>，Zsh：<code>~/.zshrc</code> ）</p><h5 id="zsh"><a class="markdownIt-Anchor" href="#zsh"></a> ZSH</h5><p>用 brew 安装的话，配置好环境变量的了（我自己又按手动方法在 zsh 里加了环境变量）</p><p>After installation, you’ll still need to add</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval "$(pyenv init -)"</span><br><span class="line">eval "$(pyenv virtualenv-init -)"</span><br></pre></td></tr></table></figure><p>to your profile (as stated in the caveats). You’ll only ever have to do this once.</p><hr><p><a href="https://github.com/yyuu/pyenv#installation" target="_blank" rel="noopener">pyenv 项目主页#安装步骤</a></p><ol><li><strong>Define environment variable PYENV_ROOT</strong> to point to the path where pyenv repo is cloned and add <code>$PYENV_ROOT/bin</code> to your <code>$PATH</code> for access to the <code>pyenv</code> command-line utility.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的 zsh 将环境变量放在另一个文件（env.sh）中，在那里添加环境变量就可以了</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Add pyenv init to your shell</strong> to enable shims and autocompletion. Please make sure <code>eval &quot;$(pyenv init -)&quot;</code>is placed toward the end of the shell configuration file since it manipulates <code>PATH</code> during the initialization.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用自动完成功能，要将配置写在 shell configuration file 末尾</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Restart your shell so the path changes take effect.</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">exec</span> <span class="variable">$SHELL</span> <span class="comment"># 重启shell(因为修改了$PATH)</span></span><br></pre></td></tr></table></figure><h2 id="安装-pyenv-virtualenv"><a class="markdownIt-Anchor" href="#安装-pyenv-virtualenv"></a> 安装 pyenv-virtualenv</h2><p><a href="https://github.com/yyuu/pyenv-virtualenv#installation" target="_blank" rel="noopener">pyenv-virtualenv 项目主页#安装步骤</a></p><p>使用 brew 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install pyenv-virtualenv</span><br></pre></td></tr></table></figure><p><strong>Add pyenv virtualenv-init to your shell</strong> to enable auto-activation of virtualenvs. This is entirely optional but pretty useful. See “Activate virtualenv” below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用自动完成等功能，直接将下面这句写在 shell configuration file (~/.zshrc) 末尾就可以</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用命令的话是下面那样：</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h1><h2 id="pyenv-使用"><a class="markdownIt-Anchor" href="#pyenv-使用"></a> pyenv 使用</h2><p><a href="https://github.com/yyuu/pyenv/blob/master/COMMANDS.md#command-reference" target="_blank" rel="noopener">命令参考 · yyuu/pyenv</a></p><p><code>pyenv install</code>安装指定的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv install -v 2.7.13 <span class="comment">#添加-v参数用于显示细节</span></span><br><span class="line">$ pyenv <span class="built_in">rehash</span>  <span class="comment">#安装新版本的python或者其他二进制包后都需要运行，或者重启shell</span></span><br></pre></td></tr></table></figure><h2 id="pyenv-virtualenv-使用"><a class="markdownIt-Anchor" href="#pyenv-virtualenv-使用"></a> pyenv-virtualenv 使用</h2><h4 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h4><p>创建虚拟环境–<code>pyenv virtualenv 版本号 虚拟环境名</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pyenv virtualenv 3.5.1 venv-3.5.1</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv uninstall my-virtual-env</span><br><span class="line"><span class="comment"># 删除时会弹出对话框，输入‘y’确认</span></span><br><span class="line"><span class="comment"># 或者你可以直接删除 ~/.pyenv/versions中的相应目录</span></span><br></pre></td></tr></table></figure><h4 id="仅查看python的虚拟环境"><a class="markdownIt-Anchor" href="#仅查看python的虚拟环境"></a> 仅查看python的虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv virtualenvs</span><br></pre></td></tr></table></figure><h4 id="自动激活"><a class="markdownIt-Anchor" href="#自动激活"></a> 自动激活</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir myproject</span><br><span class="line">$ <span class="built_in">cd</span> myproject</span><br><span class="line">$ pyenv <span class="built_in">local</span> myenv</span><br></pre></td></tr></table></figure><h4 id="手动激活"><a class="markdownIt-Anchor" href="#手动激活"></a> 手动激活</h4><p>You can also activate and deactivate a pyenv virtualenv manually:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv activate &lt;name&gt;</span><br><span class="line">pyenv deactivate</span><br></pre></td></tr></table></figure><h1 id="管理版本的其他简单方法"><a class="markdownIt-Anchor" href="#管理版本的其他简单方法"></a> 管理版本的其他简单方法</h1><ul><li>不要更改系统默认的python2（因为改了可能会导致系统某些用python2写的系统文件出错），每次执行时加版本号，<code>python</code> 就是2的版本，<code>python3</code>就是3的版本；用 <code>pip</code>会安装包到 2 的版本，用<code>pip3</code>会安装到 3的版本。</li><li>直接在自己写的程序里指定环境变量，如 <code>#!/usr/bin/env python3</code>。</li></ul><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="http://www.jianshu.com/p/9ebce087da1f" target="_blank" rel="noopener">python虚拟开发环境配置 - 简书</a> #配置好了 #相关使用可以再参考这个</p><p><a href="http://www.jianshu.com/p/1842a363257c" target="_blank" rel="noopener">Python多版本管理器pyenv和虚拟环境pyenv-virtualenv的安装设置 - 简书</a></p><p><a href="http://www.10tiao.com/html/357/201604/2247483759/1.html" target="_blank" rel="noopener">使用pyenv搭建python虚拟环境 - 运维之美 | 十条</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pyenv可以帮助你建立多个版本的 python 环境，它们相互隔离，不会污染到系统自带的 Python（ pip 安装的包也是在各自目录下的）&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装&quot;&gt;&lt;/a&gt; 安装&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python collections模块</title>
    <link href="https://hmgqzx.github.io/wiki/Python/collections%E6%A8%A1%E5%9D%97/"/>
    <id>https://hmgqzx.github.io/wiki/Python/collections模块/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="collections模块"><a class="markdownIt-Anchor" href="#collections模块"></a> collections模块</h1><h2 id="ordered-dict"><a class="markdownIt-Anchor" href="#ordered-dict"></a> Ordered Dict</h2><p><a href="http://www.zlovezl.cn/articles/collections-in-python/" target="_blank" rel="noopener">不可不知的Python模块: collections | piglei’s blog</a></p><p>在Python中，dict这个数据结构由于hash的特性，是无序的</p><p>内置字典：</p><p>可以看到，在迭代时是“乱”序的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = dict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> a.items():</span><br><span class="line">    print(k, v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># run:</span></span><br><span class="line">&#123;<span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'four'</span>: <span class="number">4</span>, <span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>&#125;</span><br><span class="line">three <span class="number">3</span></span><br><span class="line">four <span class="number">4</span></span><br><span class="line">one <span class="number">1</span></span><br><span class="line">two <span class="number">2</span></span><br></pre></td></tr></table></figure><p>OrderedDict：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">b = OrderedDict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line">print(b)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> b.items():</span><br><span class="line">    print(k, v)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># run:</span></span><br><span class="line">OrderedDict([(<span class="string">'one'</span>, <span class="number">1</span>), (<span class="string">'two'</span>, <span class="number">2</span>), (<span class="string">'four'</span>, <span class="number">4</span>), (<span class="string">'three'</span>, <span class="number">3</span>)])</span><br><span class="line">one <span class="number">1</span></span><br><span class="line">two <span class="number">2</span></span><br><span class="line">four <span class="number">4</span></span><br><span class="line">three <span class="number">3</span></span><br></pre></td></tr></table></figure><p>顺序以添加顺序为准，和修改的顺序无关。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;collections模块&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#collections模块&quot;&gt;&lt;/a&gt; collections模块&lt;/h1&gt;
&lt;h2 id=&quot;ordered-dict&quot;&gt;&lt;a class=&quot;markdownIt
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
      <category term="Python模块" scheme="https://hmgqzx.github.io/wiki/tags/Python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>pickle</title>
    <link href="https://hmgqzx.github.io/wiki/Python/pickle/"/>
    <id>https://hmgqzx.github.io/wiki/Python/pickle/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时，我们需要将一个Python对象保存到硬盘里，这时就可以用 pickle 来将其序列化为一个字节流，以便保存。（在需要的时候，可以 load to 重建对象）</p><p>pickle 是内置的</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c05/p21_serializing_python_objects.html" target="_blank" rel="noopener">5.21 序列化Python对象 — python3-cookbook 2.0.0 文档</a> #解释得非常详细</p><p><a href="https://docs.python.org/3/library/pickle.html" target="_blank" rel="noopener">12.1. pickle — Python object serialization — Python 3.6.1 documentation</a></p><p><a href="http://www.cnblogs.com/evening/archive/2012/04/01/2427876.html" target="_blank" rel="noopener">pickle模块介绍 - Goodpy - 博客园</a></p><p><a href="https://blog.oldj.net/2010/05/26/python-pickle/" target="_blank" rel="noopener">Python中使用pickle持久化对象 – oldj’s blog</a> #评论中的内容不错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时，我们需要将一个Python对象保存到硬盘里，这时就可以用 pickle 来将其序列化为一个字节流，以便保存。（在需要的时候，可以 load to 重建对象）&lt;/p&gt;
&lt;p&gt;pickle 是内置的&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a class=&quot;markdownIt
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Sublime Text 主题</title>
    <link href="https://hmgqzx.github.io/wiki/Sublime%20Text/Sublime%20Text%20%E4%B8%BB%E9%A2%98/"/>
    <id>https://hmgqzx.github.io/wiki/Sublime Text/Sublime Text 主题/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时我没有怎么折腾主题，你可以在 <a href="https://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai" target="_blank" rel="noopener">TmTheme Editor</a> 找到很多不同配色的主题，并且可以再加自定义后下载</p><h2 id="我使用的"><a class="markdownIt-Anchor" href="#我使用的"></a> 我使用的</h2><p>我一直使用着默认的 Monokai，往年不变……</p><p><a href="https://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai" target="_blank" rel="noopener">Monokai • TmTheme Editor</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时我没有怎么折腾主题，你可以在 &lt;a href=&quot;https://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TmTheme Editor&lt;/a&gt;
      
    
    </summary>
    
      <category term="Sublime Text" scheme="https://hmgqzx.github.io/wiki/categories/Sublime-Text/"/>
    
    
  </entry>
  
  <entry>
    <title>pyc文件</title>
    <link href="https://hmgqzx.github.io/wiki/Python/pyc%E6%96%87%E4%BB%B6/"/>
    <id>https://hmgqzx.github.io/wiki/Python/pyc文件/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/30296617" target="_blank" rel="noopener">Python什么情况下会生成pyc文件？ - 知乎</a></p><p>简单来说，&quot;.pyc&quot; 就是编译过的 “.py” 源代码</p><h2 id="具体过程"><a class="markdownIt-Anchor" href="#具体过程"></a> 具体过程</h2><p>如果 Python 进程在机器上拥有写入权限，那么它将把程序的字节码保存为一个以 .pyc 为扩展名的文件。当程序运行之后，你会在那些源代码的附近（也就是说同一个目录下）看到这些文件</p><h2 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h2><p>Python这样保存字节码是作为一种启动速度的优化。下一次运行程序时，如果你在上次保存字节码之后没有修改过源代码的话，Python将会加载.pyc文件并<code>跳过编译</code>这个步骤。当Python必须重编译时，它会自动检查源文件和字节码文件的时间戳：如果你又保存了源代码，下次程序运行时，字节码将自动重新创建。</p><p>A program <code>doesn't run any faster</code> when it is read from a ‘.pyc’ or ‘.pyo’ file than when it is read from a ‘.py’ file; the only thing that’s faster about ‘.pyc’ or ‘.pyo’files is the speed with which they are <code>loaded</code>.</p><p>.pyc 文件的作用是提高 load 的速度</p><p>When a script is run by giving its name on the command line, the bytecode for the script is never written to a ‘.pyc’ or ‘.pyo’ file. Thus, the startup time of a script may be reduced by moving most of its code to a module and having a small bootstrap script that imports that module. It is also possible to name a ‘.pyc’ or ‘.pyo’file directly on the command line.</p><p>在 import 别的 py 文件时，那个 py 文件会被存一份 pyc 加速下次装载。而主文件因为只需要装载一次就没有存 pyc。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/30296617&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python什么情况下会生成pyc文件？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说，&amp;quot;.pyc&amp;quo
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Zsh 安装</title>
    <link href="https://hmgqzx.github.io/wiki/Zsh/zsh-%E5%AE%89%E8%A3%85/"/>
    <id>https://hmgqzx.github.io/wiki/Zsh/zsh-安装/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Zsh" scheme="https://hmgqzx.github.io/wiki/categories/Zsh/"/>
    
    
  </entry>
  
</feed>
