<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hmgqzx&#39;s Wiki</title>
  
  <subtitle>知识需要分享</subtitle>
  <link href="/wiki/atom.xml" rel="self"/>
  
  <link href="https://hmgqzx.github.io/wiki/"/>
  <updated>2018-05-13T08:46:17.000Z</updated>
  <id>https://hmgqzx.github.io/wiki/</id>
  
  <author>
    <name>hmgqzx</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>幸福课 第十讲</title>
    <link href="https://hmgqzx.github.io/wiki/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE/%E5%AD%97%E5%B9%95%E5%86%85%E5%AE%B9/%E7%AC%AC%E5%8D%81%E8%AE%B2/"/>
    <id>https://hmgqzx.github.io/wiki/心理学/哈佛幸福课/字幕内容/第十讲/</id>
    <published>2018-05-13T08:45:29.000Z</published>
    <updated>2018-05-13T08:46:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>早上好！今天要讲的是变化。今天很多事都会发生变化，我们之间的关系会发生变化，敬请关注啊！<br>上节课结束的时候，我们谈到很多种不同的变化。第一种方式是渐进式的，好像滴水穿石，要花时间的、一点一点的、慢慢的；第二种方式是突发式的，好像用大锤开山劈石，凿出一条路，一个隧道。对于这两种变化，或是所有形式的变化，必须要注意的是：我们讲的重点是要将变化持续下去，而不是突然一变之后又恢复原状。因此要注意的是，变化并不是药到病除的灵丹妙药——即便当我们举起大锤，就是这举起来的动作，也需要我们在之前做很多准备的功夫。因此，举例来说，渐进式的变化，就好像每天都做感恩练习，慢慢成为一个更容易找寻美好的人，逐渐的看到更多积极的事物，一点一点的构建起新的神经通路。<br>还记得我们之前说过的两个重要概念，神经塑性和新生神经元吗？因为通过了解和理解我们大脑的变化，我们自身也将更容易产生变化。Carol Dweck做过相关研究（我们之后谈到完美主义的时候还会提到她）。另外大锤的例子和探索经验是一回事——真知灼见不是凭空产生的，而是经过长时间准备后千锤百炼而得来的。大家都知道所谓的灵感来自于99%的汗水，所以说没有灵丹妙药，而且正是那种对灵丹妙药的笃信和渴求导致了今天抑郁症如此高发频发。因为大家都很郁闷，很失望，发现灵丹妙药不管用的时候，就觉得是自己出了问题。我在书里也写了很可能他们认为“如果做完这五件事，我的人生就会美满了”。结果五件事做完，我却没有变得更快乐，于是我就开始怀疑自己。其实没有灵丹妙药。任何事都需要时间。没有所谓什么“幸福生活五步走”。<br>在我们讲变化过程之前，我们先要厘清一些概念。首先我们要问的是：我，或者你，真的想要改变吗？这不是一个无关紧要的问题，也不是象征性地问自己一下，因为表面上我们可能会说当然了，但是潜意识里却有东西在阻挠我们。<br>我给大家举个例子吧。早在80年代的时候，Langer和Thompson曾做过一个实验。这个实验是这样的：他们找来一些学生或参与实验的人，然后问这些人他们想不想要摆脱自己性格的某个方面，比如说古板、或者容易轻信别人、或是冷酷。他们问这些人想不想要摆脱这些性格，想不想在这方面变的更好，是不是真的能改变自己。也就是说，如果改变对于你来说真的很重要，那你能不能最终变得不那么古板、不那么容易轻信别人、不那么冷酷。这就是他们最初问的两个问题——想不想改善？想不想改变？然后，在他们问了这些问题之后，实验还有第二个阶段。在这个阶段，他们让这些人去评估，评估下列正面性格，比如：言行一致对于你来说是否重要；值得信赖是不是重要；以及被认为是一个严肃认真的人对于你来说有多重要。下面我们来说这个实验的有趣的结果：所有给这些正面性格打高分的人（这些黄色的是正面性格）认为这些性格很重要的人，反而比较不容易去改变自己的负面性格。大家明白这其中的奥妙么？我想要摆脱古板的个性，我不喜欢自己那么古板，与此同时，言行一致在我看来是非常重要的品格。但是我反而不容易去改变自己的古板。因为在我的意识里，它们是相互关联的。对，我不想要古板下去了，同时我潜意识里有个小人却在说：我想要言行一致，别摆脱古板。因为我把两者结合起来了，我把两者联系在一起了，因此不想舍其一；因为我不想把婴儿和洗澡水一起倒掉，对于我来说两者是紧密相连的。同理，还有轻信和值得信赖。这两种品质可以说，值得信赖的人，另一方面很容易轻信别人。这种性格极端化以后，人会变得容易轻信别人，然而我却不想丢掉轻信别人的习惯，因为同时我不想丢掉我值得信赖的优点。同样的例子还有冷酷。我的冷酷可能在潜意识里正反映出我的严肃认真。<br>很多年来，真的是很久以来，我在思考分析并写了很多关于完美主义的东西。我不能理解为什么我自身的情况长久以来并未好转 ——因为我知道自己深受完美主义其害。我读了研究报告，反省个人经历，我知道完美主义对我百害无益，有损于我的健康。从长远来看也阻挠我成功，但是我却摆脱不了它，直到我读了这个报告。于是我问自己：在我的意识里它和什么联系在一起？和它密切相联的是动力和雄心。如果我需要自我定义的话，首当其冲的，同时因为我不想失去这些品格，我的潜意识便阻止我摆脱对完美主义的追求。我对完美主义的定义是（我们会用整整一周来讲完美主义，到时候会讲的更深入一些）只有当我明白了这两者之间的密切关联，我才能够把它们拆开，分开。我只想保留其一。再比如担忧和焦虑（其实我已经说过很多次了）我最终摆脱了焦虑的困扰。下次我会和大家说说具体的过程。<br>自从很久以前开始，我上大学的时候，每当有壁球比赛也好，或者是考试也好，或是在分组讨论的时候发言之前，我都会非常焦虑。我不想再这样下去了。我不想要焦虑。然而，我却丢不掉这种担忧和焦虑，因为我同时很重视责任感。如果我会焦虑，说明我有责任感，我会在上课前更认真的做准备而不是随便糊弄、偷懒。因此我把焦虑和正面品格责任感联系起来。还记得关于Brandon的故事吗？责任感是非常重要的品质，但是它却阻挠我摆脱担忧和焦虑。这都是在潜意识里发生的，我之前并没有意识到这些。<br>还有罪恶感。有好的罪恶感也有不好的罪恶感。我不想摆脱罪恶感，因为我不想变得对他人冷漠无情。我们经常会把这两者联系起来。还有一对概念，是精简化。这也是我的切身体会。我想要减少工作量，因为我明白同时参与太多活动有损于，有损于我的工作效率、创造力和健康。但是我却没办法做到精简。为什么呢？因为我将它和失去优势联系起来，所以我没办法做到精简。还有我们上周谈到的寻找过错。为什么人们不能停止寻找过错呢？为什么要维持悲观的态度呢？因为他们把寻找过错和现实主义联系起来。我不想放弃这种现实的态度，不想变成一个脱离现实盲目乐观的人，因此我不会放弃寻找过错的习惯。<br>幸福，通往幸福路上最大的障碍，就是人们把幸福和偷懒联系在一起，因为当今文化中最为人所追捧。如果我现在很快乐，就意味着我不再经历痛苦，就意味着我放弃了，意味着我不会成功，意味着我已经失去了棱角，意味着我不再有动力和雄心，所以我们在潜意识里选择不快乐。这样的话，我们就不会失去其它珍贵的东西，比如雄心壮志、比如长处优势、比如勤奋刻苦。当然，依我们现在来看，我们知道这些东西并不是密不可分的。正相反，比如说快乐，我们从“拓延-建构”理论中学到：正面的情绪是和成功联系在一起的。等到春假之后当我们讲到完美主义的时候，我会讲一些从研究中得来的理论。大家可以把这些理论和你们个人联系起来。你们中间有很多人会发现可以将其和自身联系起来。如果我们能赶走对失败的恐惧，学会面对它，学会冒险，从失败中学习经验，将失败看作是未来成功路上的垫脚石，这些都不意味着我们会相应的失去动力和雄心抱负，克服对失败的恐惧，或担忧焦虑，或罪恶感，或种种不幸福的关键，或更好的去理解这些品格的含义。<br>举个例子，要理解我想要摆脱对失败的恐惧感，不是一般的恐惧，而是消磨人意志的恐惧，因为每个人都在某种程度上害怕失败。但是要摆脱这种消磨人意志的恐惧，同时保存我的动力和雄心，就必须要理解两者是密不可分的。又或者，你们知道我以前不会对人说不。这么短小的一个词，简单的一个词，有时候是那么难以说出口。为什么？因为我眼中的自己和我希望别人眼中的自己是有同情心的、善解人意的、是老好人。于是我把两者拆开了，它们并不一定要连在一起。我可以善解人意的说不，因为很多时候当我对别人说好，我其实同时在对自己说不。从长远来看，也是在对亲密关系说不。所以现在我更好更深入的了解了我什么时候能说不，什么时候不想说。同时，我还能保留自己的善解人意和同情心，也不必在每次说不的时候感到有种罪恶感。这里列出来的每种品格，都是可以被拆开的。大家可以想想有哪些品性是你很久以前就想改掉却改不掉的。对完美主义的追求？还是严酷无情？还是你想变得更顽皮活泼？也许你并不想摆脱这种个性，因为害怕自己会失去严肃认真的品性。其实你根本不需要失去，把婴儿留下，把洗澡水倒掉。前提是我们能搞清楚我们到底想改变什么。<br>下周的小组讨论活动，你们要和助教一起做一个叫完成句子的练习。下面要说的正是你们在练习中要做的事：你们要识别……这个练习是Nathaniel Branden设计的，它将帮助你识别自己分别想要摆脱和保留的品格。很多时候，不管在显意识还是潜意识中，都有一个你自己制作的开关，可以引发洪水，打开通往新隧道的大门，大脑里新的通路，真正永久性的变化。<br>我们现在要讨论三个截然不同却又相互连结的通向变化的途径——这就是我们之前提过的“心理学ABC理论”。ABC理论——A代表情感，情绪；B代表行为，行动；C代表认知，思维。我们今天要做的是……我们会分别讲这三个元素。在分别讲这三个元素的时候我们会谈到渐进式变化和突发式变化。可以说我们用两种方法解释三元素，情感、行为、认知乘以渐进式和突发式，一共有六种变化的方式。这六种方式彼此相通，把它们联系起来很重要。我们希望能三者兼得。为什么呢？引用一句我们提过多次，以后也会再提的名言，Dryden和Poet说的：为了能改变习惯，产生永久性的变化，我们不仅需要一种稳定的变化模式，也同样需要一种外部介入的力量。仅仅把注意力放在情感上是不够的，放在行动上也是不够的，放在思维上也是不够的，我们要对三元素同时下功夫——A B和C三元素。大家可以想想看，就好像我们把习惯看成一股洪流，一股我们思维的洪流。这股洪流是由来自不同通路的神经元构成的。我们现在要做的是对抗这股洪流。为了做到这点，我们需要足够大的外力，因此我们要尝试尽可能多的方法。<br>在我们讲A元素之前，我再问一个问题：我们想改变什么？我们能改变什么？不能改变什么？以Lyubomirsky Diener等人为首的，在我们试图分析一个人的幸福感时，我们需要研究三个因素。第一个因素是遗传排列，不是遗传点，而是排列。我们都生来具备一些特定的快乐和健康倾向性体质。有些人生来就是一张笑脸，嘴里含着“笑汤匙”。另一些人则不然。我们都排列在这条钟形曲线上，有些人注定比其他人更幸运。我之前也提过几次，我就没那么走运。我一出生就在曲线上偏焦虑的那一端，嘴里也没含着快乐的小汤匙，但我的天性令我有资格教这门课，因为我通过努力和各种尝试改变了自己的人生。我可以谈个人的经验，因为我有过那样的经历。现在有些人可能会说……对此我想说：这不是什么好事，也不是坏事，这只是既定事实。就好像万有引力，无所谓好坏。想要支配天性，必先服从天性。我们要认识自己的天性，理解，并充分善用这些天性。<br>我们健康中和快乐相关的指数差异有50%并不是由遗传所决定的。当然遗传基因是有影响的。比如双胞胎研究的案例。为什么有很多对双胞胎在长期分离的情况下彼此之间仍有那么多相似之处？因为遗传决定的。这作用无所谓好坏，也不是百分之百由它决定，感谢上帝，只有差异中的50%。我们应该随时牢记：对于如何运用这些基因，我们是有很多的支配能力的，我并不知道确切的数据。成功的篮球运动员 50%是由遗传基因决定的。比如肌肉里有多少快肌纤维和慢肌纤维，或者能跳多高，协调性如何，身高多少，这些都很重要。但是如果迈克尔乔丹从没练过篮球，我应该能比他打的好。如果他从没练过的话，而且我的确练过，换句话说，在遗传作用的前提下不去努力争取幸福的人，即便他们有最好的遗传基因，也不会比基因不如他们但努力争取的人快乐。所以说后天努力至关重要。<br>第二个对快乐差异指数有影响的因素是外部环境。当然了，外部环境很重要。我们生活在一个自由的国度，还是受人压迫，带来的结果是完全不同的。但总的来说，外部环境只要不过于极端，比如无家可归流浪街头，其实影响不大，在差异方面只有10%的作用。因此，遗传作用50%，外部环境包括居住地、包括收入、天气等等，另外，这个不包括有季节性情感异常的患者。对于他们来说，有没有阳光太重要了。我现在说的是大部分人，不包括有季节性情感异常的人。因此除去极端案例，外部环境的作用不大，大概是10%。<br>第三点，剩下的40%是由意向活动决定。意向活动包括我们的所作所为所想，我们对世界的诠释和我们关注的焦点。简而言之，就是这门课的内容，包括我们从第一节课开始讨论的内容以及下半学期我们将要讨论的内容，这些意向活动，我们关注的焦点其实就是我们的ABC。这也是产生有意义的变化的根源，是我们将要关注的重点。如果我们能改变遗传基因当然很好，是很好，但是不可能。如果我们能更好的控制外部环境当然很好，但是即便是我们能控制，结果也不会被改变。虽然在场的或是在家看视频的人中有很多的确能更好的控制外部环境，能改变结果的，能被我们所掌控的是内部活动，是我们对世界的诠释和我们的行动。好，现在我们就开始讲这部分的内容。<br>A——情感、情绪，是一种连接，更多的是从逻辑上，语言上将情感、动力、动作连接起来。情感让人感动。没有情感我们将寸步难行。你们在书中读到了，或者之后会读到关于Elliott的故事。Elliott失去了情感功能，并随之丧失了行动做事的所有动力，尽管他还有认知能力。我们要行动就必须要情感。现在我要从两个方面谈情感。首先是渐进式变化；之后是突发式变化。渐进式变化是一种专注冥想。专注冥想可以带来安宁沉静，被认为是最有效的疗法，有很多与其相关的研究，我们之后会用一周的时间讲专注冥想，今天我只想做一个简单的介绍，讲一下专注力的螺旋曲线。<br>从许多方面来说Jon Kabatt-Zin 在这个学科领域做了很多重要的研究，他和另外一些科学家，包括 Tara Bennett-Goleman和哈佛医学院的 Herbert Benson 一起在这个被认为很神秘的学科领域里做了很多重要研究。“对专注力的培养可以引领我们发现身心纾缓，自身宁静和洞察力的最高深的境界，而通向这个境界的路径恰恰就在于你自身。这就是专注力的奇妙之处。”那些研究结果是多么令人难以置信，它们仅仅通过专注于呼吸和身体的某个部位，通过亲临现场改变了我们的思维方式，改造了我们的大脑。“所有人都有专注的能力，关键在于开发我们在此时此刻全神贯注的能力”。让我们花一两分钟体验一下这种感觉。下面我想请大家做一个联系——还是那句话，如果你愿意做就做。请大家在椅子上坐好，将后背靠在椅背上，尽量坐舒服了，两脚放松平放在地上如果你愿意，如果你愿意的话闭上双眼，现在把注意力放在你的呼吸上。深吸一口气，吸至丹田，慢慢的、静静的、轻轻的呼气，再次慢慢的深吸一口气直至丹田，慢慢的轻轻的静静的长长的呼出来。如果你的思绪飘走了，把它放回到呼吸上来。现在想象你在脑中观察自己的身体：你的前额、眼睛、鼻子、嘴、脖子、胸膛、你的后背、腰、双腿，一直向下，直到你的双脚。上下观察你的身体，同时继续深深的慢慢的轻轻的呼吸。在你打量自己的时候，寻找身上的一个部位，它比其它部位更紧绷，可能是你的下巴，脖子，可能是你的肩膀，你的胃部；你感到这个部位有些不适，可能是你的腿，膝盖，双脚，找到这个部位，它比其它部位更紧绷，把注意力放在这个部位上，继续呼吸，深吸一口气，将气引至那个部位，然后在你放松呼气的时候把那种紧绷感也呼出去，放松；多深吸几口气至该部位然后放松，呼气，重新将注意力放在呼吸上；深吸一口气，慢慢的轻轻的静静的长长的呼气，同时放松；深吸一口气，慢慢的轻轻的长吐出来。在下次呼气之后轻轻的慢慢的静静的睁开你的双眼。另外如果坐在你旁边的人睡着了，请轻轻的把他们叫醒；如果有人还在说梦话，请把他们叫醒。<br>《情感炼金术》一书中写道：专注力意味着看到事物的本来面目，而不是试图去改变它们；关键是要消解我们，这就是所谓做人的权利。随着情绪感受情绪，在这个过程中呼吸吐纳，虽然不一定总会这样，但是很多时候，如此一来情绪就消解了，随着这种情绪的消解，令人痛苦的情感也得到了心理解离。还是那句话，春假回来以后，我们会谈到很多关于这个疗法的内容。这就是渐进式的变化。在我们待会说到研究报告的时候大家会发现——即便这种渐进式变化只是短短的8周的日常冥想，我们的大脑也会开始改变形状，我们的免疫系统得到增强；即便只有短短8周的日常冥想，而且不一定是一天5小时的冥想，有时候就是一天30或20分钟已经足以带来变化。这个过程是循序渐渐的，缓慢的，希望大家可以用一生去实践。这是一个终身疗法。<br>下面的例子是从突发变化的角度分析我们的情感。所以当我想填满这个3乘2模型的方盒子，我应该怎么去找情感突发式变化的案例呢？我立刻想到了一个临床心理学，研究的是关于创伤后应激障碍的。有成千上万的文章，都是关于创伤后应激障碍。我们系也做了相关的研究。当我想到它的时候，我对自己说：非常突然的变化，因为实际上当我们有创伤之后，很多人的一生因为创伤后应激障碍而从此改变了。它实际上改变了我们大脑中的化学物质；它改变了我们大脑的结构，建立了新的神经通路，破坏了很多以前的神经通路，全都是因为一个单独的经历，就像是大锤一挥。很不幸的是这是一个非常常见的疾病。我上次已经说过了，30%的越南战争老兵有创伤后应激障碍，30%之多；80%的第一次海湾战争老兵有创伤后应激障碍。我之前也提过，我们现在还没有关于第二次海湾战争的确切数据，但是相信人数只会更多不会更少。在911之前，在纽约110号大街以南，有两万人有创伤后应激障碍。911刚刚过去之后有6万人有创伤后应激障碍。这对人是有影响的，影响了我们的大脑功能，这种影响很多时候是终其一生的。这就是突发式的变化，伴随着创伤而来，比如911 或者在战争中的恐怖经历从而影响了余生，影响了整个人生。这是一种休克疗法，消极的休克疗法。当我想到创伤后应激障碍的时候……我的意思是这属于临床心理学的范畴。<br>首先，从1998年起开始有很多相关研究。仅仅是在10年以前，就是在人们开始关注幸福心理学的时候，开始有很多关于创伤后成长的研究。研究发现：实际上更多的人在经历创伤后得到的是成长而不是应激障碍。然而，没人提起创伤后成长。每个人都知道创伤后应激障碍，但是再次说明了这又是一个关于人们不愿去关注正面事物的案例。如何正面呢？就是大部分人其实是非常有能力去承受创伤的。这是一个非常振奋人心的事实。如果人们知道这是可能实现的，是常见的，如果人们不会对经历创伤后成长感到愧疚，那么我们就会有更多自我实现的预言，也会有更多人拥有创伤后成长的经历。在我经历了越南战争之后有了那样的所见所闻，我怎么会成长呢？这是不对的。再说一次：世事总有不幸，但是有些人能尽量从世事中受益。当人们开始关注事情带来的益处时，就会产生创伤后成长。<br>那么创伤能带来什么好处呢——发生这种事终归是不幸的。比如，我从患癌症这件事上学到什么呢——和家人的关系更亲密；更珍惜生命；更珍惜花草自然；更享受和朋友在一起的时光。这件事这就是价值发现。再或者，很多人能在写日记的时候得到启示。（我们下节课会讲到记日记）再或者，有些人能够分享创伤经历。还记得二战大屠杀的幸存者和越战老兵之间的区别吗？对于不幸的经历，大屠杀的幸存者拿来分享讨论，把它写出来；越战老兵则只是反复去想。<br>回到我们之前说的 Lyubomirsky的研究。当你只想不说，不把心里话倒出来，它会积压在心里，更容易形成创伤后应激障碍。并不一定要这样。了解创伤后成长的好处是至关重要的。那么现在我向大家提一个问题。既然这是讲幸福心理学的课程，大家应该还记得幸福心理学关注的是有用的有效的事物，因此在备课的时候，我问了自己一个问题：有没有一个正面的和创伤相对应的元素——它的效果强大，但同时是正面积极的，并最终能像猛击大锤一样瞬间改变我们大脑的运作模式？有这样的元素吗？换句话说，我想问：会不会有一种正面的经历可以创造一条正向的通道，引领我们得到更多健康、宁静和积极的回忆，也就是说和创伤后应激障碍正相反的反应。再重复一次：勤问必有所得，求索始于追问。当我问出这个问题，在我眼前立马开启了一条我前所未见的通道。这就是我多年来一直钻研其中的我心目中的最伟大的知识分子马斯洛提出的“高峰体验理论”。我现在要说的这个理论更多的是一种假设性理论，而未经过实证的。我希望你们当中有人能将这个假设性理论当成论文课题研究，或者以后能鼓励别人研究这个理论。我在这个课上讲的理论都是经过大量研究证实的，只有这个领域是假设性的，但还是请大家听一下，我讲完后，请好好想想这个假设性理论。因为虽然是有一些相关研究，但是不多，不足以证实其真实性。但还是请大家想想看它有没有道理。<br>那么，让我们先了解一下什么是高峰体验。马斯洛的定义是：最幸福的时刻，最令人心醉神迷欣喜若狂极乐体验的高度浓缩。我发现这种体验一般来自于深度美学体验，包括创作时的喜悦、爱情、完美的性体验、为人父母、自然分娩以及其他的人生体验。每个人或是绝大多数人都有这种体验。这种高峰体验，不管是你的男女朋友在一起的时候还是在读一本好书的时候，还是在听你最爱的音乐的时候，这种体验就好像……嗯，许多神学家会说宗教体验，信仰体验。比如当你走在花园里，突然你看到了约翰哈佛（铜像），也许不是他，总之是一种集之大成的体验。这种体验就是人们所说的“禅”。与现在连接起来感觉是如此美好如此完整，好像你已经完满了，拥有了一切。我和家人在一起的时候就有这样的体验。昨天晚上我和亲朋好友一起吃晚餐，你们知道吗，当我们围坐在一起，我感觉这就是了，夫复何求；感觉如此完整，享受当下，这就是高峰体验。但是这种体验一般不会长久，是会消逝的，它只存在于高峰一刻。但是它是有震荡效应的。<br>现在，也许你们已经知道我接下来要说什么了。当我想到高峰体验的时候，我发现它也许，只是也许，和创伤带来的影响是同等的。也许它是一种喜悦式的休克疗法，能够带来超越体验本身的效果，就好像创伤后应激障碍一样。<br>时至今日，仍有人活在911的回忆中，这些回忆仍然影响着他们的大脑，创造着新的通道，新的神经通路，01年9月11日之前并不存在的通路。所以说高峰体验是一种喜悦式的休克疗法。如果它反面对应的是创伤，那么和创伤后应激障碍对应的就是——我管它叫高峰体验后通路。我知道是土了一点，但是我觉得是有道理的。相关的研究其实很少，但是我认为这理论是有效的。其中一个研究，她研究的是生过小孩的妇女。她发现在一些时候——这种情况并不是大多数，妇女有时候在生小孩的时候会有高峰体验，这种体验改变了她们的人生。体验带来的后果是——她们变得更自信、更宽容、更友善、更快乐，一切都源于一个单独的人生体验，一种喜悦休克疗法。这种体验发生在她们身上，对她们意义非凡。这个实验是在50年代初期做的，或者是晚期，不对，确实是50年代初。<br>现在这种情况对于男士也更常见了。因为现在的男士比起以前更可能……David出生的时候我当场喜极而泣。对于我来说那是一种非常强烈的体验，绝对是一种高峰体验。下面是马斯洛对于高峰体验的阐释。他没明白说就是高峰体验后通路，但是也算是一种暗示。“效果等同于心理疗法，前提是体验者目标明确，有自知之明，并且清楚自己的方向。一方面，我们当然可以只讨论怎么分解症状，怎么老调重弹，分解焦虑或其它问题；另一方面，我们还可以去探讨怎么培养自主性和勇气，怎么培养奥运选手，幽默感诸如此类，感知认识，身体感知和其它。”所以他的意思是说——如果我们做一些事后跟进的工作，那么会产生一些具有影响力的效果，而不仅仅是高峰体验。W. James在《宗教经验多样化》一书中谈到改变人生的时刻，以及它们怎样改变人生。高峰体验可以创造新的大脑结构，虽然相关问题仍待研究，但已有越来越多的迹象显示这是有迹可寻的。如果我们知道该怎么做，高峰体验可以产生和创伤相对应的正面效应。下次我们会详细讲这部分的内容。<br>现在我们要说一个很关键的问题。首先，我们会有高峰体验吗？我们能有更多的高峰体验吗？ 其次，在我们经历了高峰体验之后，我们怎样做才能获得高峰体验后通路？因为正如同并不是所有人都会经历创伤后应激障碍一样（事实上大部分人没有）同样，大部分人在高峰体验过后并未获得高峰体验后通路。怎样增加首先是高峰体验发生的概率，其次是高峰体验后通路的概率？因此，怎么增强高峰体验？这堂课基本上讲的就是关于这个内容。现在我要讲几个概念。当中有我们以前讲过的，也有之后要讲的。<br>首先,全然为人，接纳，接纳你的情绪。为什么呢？因为如果我们不能接受痛苦的情绪，如果我们不能让自己全然为人，我们就阻断了自己的情绪通路，而所有积极和痛苦的情绪都流动于同一条情绪通路，当我们限制其一的时候，我们也限制了另一方。因此如果我们开启通路，接受自己全然为人，无论是出于悲伤或极度的喜悦允许自己哭泣，我们就能开启通路，让自己更容易感受到积极的情绪，看似矛盾，但这就是全然为人的隽语。当我们允许自己感受痛苦的情绪，我们就会更容易感受到积极的情绪。还有就是专注力，感受当下。举个例子，很多时候当我们听音乐，就是全神贯注的听音乐的时候，不是放着背景音乐在一边发短信、做功课、和朋友聊天，而是全神贯注的听我们喜欢的音乐，很多时候我们会有临场的高峰体验。根据马斯洛的理论，这两个条件能令我们最可能获得高峰体验。顺便说一下，我相信这也是一种天赋。我从我一岁的女儿Sherio身上看到了这种天赋。每当音乐响起，我们随之起舞，她就会开心的笑，这不是我们教她的。人对音乐和舞蹈的爱好是天生的，我们需要花时间去发掘这种天赋。制定一个有意义的目标。当我们有所追求，做自己爱做的事情，做自己觉得有意义、重要的事情，我们更容易获得高峰体验。最后，我们当今文化中最严重的问题——时间。当我们匆匆忙忙赶时间，倍感压力和焦虑的时候，我们很难获得高峰体验。这些都是高峰体验杀手，无论是在做爱的时候还是听音乐的时候，或者和朋友一起的时候，当所有这些发生情况的时候都一样。<br>那么一旦有了高峰体验我们应该如何增加获得高峰体验后通路的可能性呢？首先，我们可以重演画面。还记得吗？我们说过大脑并不能分辨真实和想象，它可以将发生过的画面多次重播，当我们多次重播该画面的时候，神经通路得到了巩固，这条通路由大锤凿开，之后我们通过画面重演来巩固它。我们还可以把经历写出来。下周我们的心得报告作业就是要大家写自己的高峰体验。当我们记录这种体验的时候——只是描述，而不是分析，记住Lyubomirsky说的两者差别：正面的情绪和经历不适于被分析。所以只要去描述这种经历，再次巩固神经通路，花时间去重演，花时间去重播它。最后，就是要采取行动，通过采取行动我们能巩固最初的体验（即高峰体验）巩固神经通路。所以说，当我有了高峰体验之后，我心里会感到柳暗花明，豁然开朗。现在我得付诸行动。这也是我今天要讲的第二部分——行为。<br>20年来，自从我还未满20岁的时候开始，我就一直在教和参与各类关于自我提升心理学、幸福心理学、临床心理学的课程、讲习班和研讨会。我发现不管是在别人的讲习班上还是自己的讲习班上，如果课程效果好的话，大部分人在周末或期末离开的时候，如果之前他们在这里，之后他们都会经历一个高峰。但是一般人会分为两组，两组人都会经历高峰。第一组人（很不幸这组人占大多数）在经历了高峰之后最后回到了原来的幸福基点，我们对此并不陌生；第二组人不是多数，是一小部分人在经历了高峰之后，这种高峰并不持久，但是当他们落下来的时候他们的幸福基点比之前高出来，之后尽管也有起起伏伏，但是都是在这个新基点上下起伏。不用说，我当然很想知道为什么有些人是这样，另一些人是那样。因为我想让参加我课程的人能拥有持久性的变化，而不是昙花一现的改变。只是短暂的感觉良好是不够的，这既对不住他们为课程所付出的努力，也对不住我为课程付出的努力，所以我很想弄明白两者之间的差异。下面就是我发现的这两组人之间存在的最重要的差异。第二组人所具备的显著特点就是在讲习班或课程或研讨会结束之后会立刻做出行为上的改变。如果是一个学期的课程，他们不是在学期结束后才做，而是每节课或几节课之后就做。我会重新评估人生，看自己能做什么，立刻采取实质上的行为改变。比如做一些上课讲过的练习，学着承担以前不敢承担的风险，总之，立刻改变，而不是等着。而这些立刻改变的人并不会因此而拥有永久的高峰体验，但是他们的幸福基点会提高，而不像其他人，因为没有改变而回落到和以前一样的水平。所以，现在每当我有长达数天的讲习班和研讨会，我都会在一开始就给大家介绍这种变化的模式。<br>我们从很多心理学研究中学到态度和行为是密切相关的，这一点我们以前提到过，所以说我们都有自己的态度，无论是关于心理学的态度 还是关于其他人或是关于自己的态度，这些态度影响着我们的行为。比如说，如果我对心理学或是幸福心理学抱有好感，相对于对心理学完全没好感的状况，我更有可能去选1504这门课，或者说如果我对一种想法或对一个人有好感，比起对其毫无好感的情况我更有可能和他成为朋友。所以说，态度影响行为。这是显而易见的，很容易理解。但是一些心理学家，包括Alice Eagly Daryl Bem和其他一些人，他们发现行为同样也能影响态度。这是一条双行线。<br>所以说如果我有某种行为模式，我的行为很可能会改变我相应的态度，这个问题我们以前也讲过。为什么呢？因为如果说我们有某种态度，我们的行为就好像外在的世界，我们的大脑不能接受内在和外在不一致的情况，因此如果我们的行为是这样的，那我们的态度就会被拉下来和行为相对应；如果我们的行为是这样，大脑不喜欢不一致的情况，它就会让两者达到对等，让两者之间达到一致。协调方法就是要不然改变我们的行为，或者——这点很关键——更多时候改变我们的态度。我们在场的所有人，不管你是 18岁还是80岁，我们都有自己的习惯。我们最初养成习惯，习惯之后造就了我们。习惯是一种行为模式，思维模式。行为，行动比语言更有力。如果我们在这堂课之前有某种行为习惯，这堂课改变了你对某件事的态度，如果因此你的态度变得和行为不相符，下课之后你的大脑寻求一致性，你的态度会被拉回到原来的状态，除非你改变自己的行为，所有的课程——不管是1504还是公正课或心理学1课，所有的课程、讲习班、研讨会所做的都是改变态度。在这门课上，态度的转变就是……比如说自尊，什么是自尊？是一种我对自己的态度。高自尊就是正面的，低自尊是负面的。<br>价值发现者和错误发现者的不同在于他们看待世界的态度不同。我是把这个看成是积极的，能带给我幸福的呢？还是像错误发现者一样觉得是消极的。完美主义是一种对待失败的态度。这门课能做的，我和你们的助教所能做的就是激发或鼓励你们在态度上的转变，通过介绍这些研究，让你们相信正向思维的作用。但是如果你们不在行为上做出改变，比如去做感恩练习，比如这周要交的感谢信，这个练习是应该定期去做的，除非之后有相应的行为否则你的态度会回复原状。你的态度和行为都和上课或是接受疗法之前没有两样，必须要有行为上的改变。<br>现在我要给你们看一些研究，这些研究的结果显示了行为改变的影响力。这个研究实验的对象是朝鲜战争期间的美国战俘。当时就在街对面的MIT 科学家E.Schein 发现关押战俘的人最终改变了美国战俘对于共产主义，对于中国人的态度。这些关押他们的人只是很简单的要求他们把共产主义的优越性写下来。我们知道我们不喜欢共产主义，如果喜欢的话我们也不会打仗了。但是要求他们只写优越性，写给你的狱友看，写信回家告诉家人你被如何对待——当然确保他们只能写好话。所以他们并没有要求战俘们撒谎，虽然战俘确实时常写些谎话。他们要求战俘只写优越性，长此以往，态度发生了转变。他们对关押者的戒备少了，好感多了，因为他们的态度变了，通过写信，和朋友聊天，还要做报告，长此以往，他们的态度发生了转变，变得更积极正面了。<br>“认知距离”这个词你们中间上过心理学1的人可能听说过。认知距离的产生是因为两种想法之间不一致，两种信念相冲突，或者说行为和信念相冲突。我们不愿看到这种情况，我们想要一致。认知距离理论是讲这种冲突必须要被消解，我们消解它的方法就是让我们的态度、我们的想法和信念尽量符合我们的行为。因为行为比语言更有力。“自我认知理论”我们已经讲过很多次了，这次我不打算详细说了，就是我们认识自己，并从中衍生出自我结论。“脸部回馈假说”——如果你现在皱眉或者轻柔的微笑你体内的化学物质会发生变化，这种变化反映了你表情的变化。引用一句名言是……一行禅师说的——他的名字不好念，他是一个佛教僧侣。“有时你的欢乐是微笑的源泉，但有时你的微笑也可以成为欢乐的源泉。”<br>所以说实际上我们面部表情的变化能够对我们的身体和情绪产生影响，这也解释了为什么演员，不管演的是什么角色，都经常会入戏很深，因为脸部回馈于身体其它部位，在你做面部表情的时候，你体内释放了相应的化学物质。William James的一段话：“吹口哨壮胆绝不仅仅是一种比喻；同样，无精打采的坐一天、哀声叹气、语气阴沉，都会加重你的忧郁；舒展眉头、发亮双眼、挺胸收腹、声音洪亮、友善的夸奖别人，除非你的心如钢铁。”William James所说的已经不仅仅是“脸部回馈假说”，而是一个很少有相关研究的假说——“身体回馈假说”。如果你整天这样坐着而不是骄傲的挺胸抬头，你的情绪会因此受到影响，它会从几个方面影响你对自己的观感。首当其冲的是你向自己传递的信息，也就是“自我认知理论”说的，但是同时还有别人是如何看你的。如果你握手是这样软绵绵的而不是这样坚定有力的握手，你在向与你握手的人传递某种信息，那种信息最终会回到你这里。一是通过别人对你的观感，一是通过你的自我认知。<br>你们知道，之前有个学生选了这门课，她当时是冰球队的，去年毕业了，今年夏天我碰到她的时候，她走过来同我握手，然后我哭了。因为实在是太疼了。我想她绝对是专心听课了，所以千万不要太过分。坚定也得友好，我是说真的，我觉得她把我的手骨握碎了好几块。但是这真的很重要，因为握手传递了信息，我以后绝对不会找她的麻烦，永远不会，我现在怕死她了。这个握手传递的信息就是力量和信心。如果我们走路时昂首阔步，我们在传递一种信息；如果我们走路时弯腰驼背，我们同样也是在向外界传递一种信息，外界因此会给予我们回馈。这种信息我们也会传递给自己并产生自我回馈。<br>最后我想给大家讲的是Hammerly做的研究。算了……我还是下次再讲这个研究，因为我今天还有一些重要的事情要讲，所以下节课一开始我就会讲这个研究。这个研究报告很长，但是又很重要，所以下节课我要讲的第一件事就是这个研究。今天下课前我还要讲一些内容，这些内容足以改变我们的人际关系，弄假直到成真。David Myers在这个属于幸福心理学的领域里做了很多相关的研究。他在研究中发现：很多时候即便我们是假装快乐，假装很有自尊——像William James 说的假装高兴——我们的情绪也会因此改变。问题来了：那我们怎么能全然为人呢？好，首先，总有些时候我们不想弄假直到成真，我们想要哭泣，我们想要难过并表现出来，但是同时我们还得要准时出门，参加派对，即便我们一点也不想出门。这里的区别就在于积极接受。我仍然接受我的情绪，接受我的痛苦并感受它，同时选择用最适当的最对自己有益的方式去面对，所以说我能接受被女友抛弃这个现实。我能接受自己感觉糟透了的现实，三天之后，照样出门到Oaks参加派对，疯玩一通。因此，正是因为脸部回馈假说，因为身体回馈假说，因为自我认知理论，行为影响了我的态度。在Oakes狂欢一夜之后，我实际上感觉好多了，也更健康了，好吧健康不一定，但是感觉是好多了。<br>下面我要播放一段Marva Collins的录像，当中她谈了一些自己的经历。我觉得也许我现在这样是因为我的父母和他们的坚持，我想要和他们一样成功，和我的祖父母一样成功，在以前成功的黑人是很少见的，所以我认为是我父母和祖父母的决心，他们……我们会抬头挺胸。我和比我小14岁的妹妹去教堂的时候，如果我们没有挺胸抬头，我妈妈会说；她会在我上学的时候，我常听见别人对她说“我一眼就能在操场找出你的小孩。”抬起你的头，直着走。如果你仔细观察 Marva Collins，你会发现她就是这么走路的，她的姿势就是如此，并因此给她的学生和其他人，也给她自己传递了一种信息。我现在要跳过一些内容，所以大部分行为上的变化都是渐进式的。那什么是突发式变化呢？突发式变化关注的是如何应对，关注的是承担风险。当我们去应对的时候需要做一些不太愿意做的事，换句话说就是离开舒适区，进入学习区。<br>现在我要给大家讲两个我自己的故事。这两个故事乍听起来毫不相关，但如果大家听明白了的话，就会发现它们息息相关。第一个故事不轻松；另一个也不轻松。我的第一个人生记忆，大家知道当人们开始记事的时候记得的第一件事就是第一个人生记忆。我的第一个人生记忆是发生在 1973年9月，那时我快满三岁了。那天是赎罪日，一年当中最神圣的一天。我记得我当时在家，突然电话响了。我的父母是非常正统的教徒，我从小成长在正统的家庭里。我们的电话在安息日、周六都不会响的，更不要说赎罪日了。但是这天电话响了。我记得他们当时跳了起来，向电话奔去。我爸爸拿起了电话，我当时站在父母中间，我爸爸看着我妈妈小声说着什么，我听不清，但是我看到我妈妈的脸色变了。我从她眼里看到了恐惧。我哭了起来，我爸爸把我抱起来，他对我说：“我要离开几天，不过我会回来的。”现在我知道当时发生了什么事。当时我父母接到我叔叔打来的电话，他当时在军队服役，在情报部门，他说战争爆发了。在以色列一年当中最神圣的一天，年轻人，以色列军队当时都不在边防线上，完全出乎大家的意料，5个阿拉伯国家同时向以色列宣战。我爸爸把我放下来，走进他的房间，一切仍历历在目。我看到他拿出自己的军装，穿好，拿出他的M16自动步枪，背好，穿上鞋，系好鞋带。我妈妈一直在他身边帮他整理，他们交谈当中偶尔会向我微笑一下，但是我感到一种紧张不安。我不明白为什么，然后我们一起下楼走到我爸爸的车旁边。他当时有一辆老式的绿色福特跑天下。他把鞋油拿出来，涂在车前灯上。为什么呢？也是后来我才知道，因为在夜里开车的时候你开着车灯，车灯不能太亮以防遭到空袭，所以他涂了车灯。我就在一旁看着他。然后他把我抱起来，又一次的，然后他上了车。我开始控制不住的哭泣。我们的邻居 Sharlon，他年岁太高不能服役。他站在一边，我们一起看着我爸爸开车走了。他把我抱起来，我还在哭，他看着我说：“去当兵吗？”<br>之后将近20年我再也没哭过。我上了哈佛大学，我开始学心理学。你们知道我要讲什么是吧？我开始学心理学，我知道自己想要做的，想要做的最重要的事情之一就是找到自己女性化的一面，雌雄同体。我想要找到自己女性化的一面是因为我知道压抑情感是不健康的，我压抑痛苦的情绪，同时也压抑积极正面的情绪。因为是同一条情绪通路，但是我在一个非常强调男子气概的文化环境中长大。男人不哭。士兵不哭。我们很坚强可以搞定任何事情。这是我长大的文化背景。而且那是我人生的第一个回忆。之后我反复听过同样的话无数次，传递的都是同样的讯息——这样不行，表露情绪一点也不爷们。我现在想起来，那时候我输掉了对于我来说最重要的壁球比赛，全国冠军。之前的一年我是冠军。当时我很震惊，我本不该输掉本该赢的。之后我和女朋友一起回家，我们就是一起消磨时间，突然间她哭了起来，因为她明白这场比赛对于我有多重要。这就是我在童年，青少年阶段的体验——要坚强。要像个男人。然后我来到这里。我明白我要释放出来，我要找到自己女性化的一面。这就是我的第一个故事。<br>现在让我来讲第二个故事。我以前的一个学生，你们当中可能有人认识她，她是04届毕业的叫Lindsay Hyde，在我这里学习。我们也有一对一教学，经常一起学习。组织的创始人，一个非常棒的组织，隶属于菲利普斯布鲁克斯内务协会，现在已是全国性的组织，我也是筹款委员会的一员，有兴趣的人可以去他们的网站swsg.org看看。Lindsay邀请我给波士顿其它院校的女会员作报告，于是我去做了一个报告。照片上的就是Lindsay。这是她和一个三年级学生在一起。她还有其他几位哈佛学生是这个学生的导师，他们一起做了很多很棒的事。我非常相信这个机构的理念，几乎从筹备的最初阶段我就支持他们，所以我做了一个报告，这个报告是关于模范人物的重要性，关于诚实。我跟他们讲了Marva Collins，讲了他们要做的重要工作。我觉得对于我和所有与会者来说整个报告进行的非常顺利。最后我收到了一份表示感激的礼物，礼物是一件衬衣，这可不是普通的衬衣，是一件粉色的衬衣。这个颜色我平时不穿，当然在以色列我从来没穿过，因为这是一件’顽强女人顽强女生’衬衣。这衬衣不仅是粉色的，而且尺码还很小，给三年级学生穿应该比较合适。但是他们还是对我说：“'我们希望你能收下这份表达我们谢意的礼物。”然后我就犯了一个错误。我当然是在开玩笑，当时我在教1504课程，我开玩笑的说：“这就是我收到的那件衬衫。”我在1504班上的另一个学生——Tory Martin，她在Lindsay走后接管了这个机构，她当时是主席。然后我又笑了，然后我差一点就哭了。“我是开玩笑的，”她说，“你看，你不是刚给我们讲过诚实的重要性么？”我的确是讲了。你们看这里，诚实。我说：“好吧我讲了，我现在怎么办？”诚实可是我的核心价值之一，然后我的眼前闪过了我的整个童年，然后我就想到了丘吉尔说过的一句话。于是我一直在寻找转机，现在转机来了，就在这件粉色衬衫上，让我找到自己女性化的一面。<br>女士们，先生们，你们也许不会相信，但还是相信我，当我说这个对于我来说是在我的舒适区之外，实际上这已经都不在我的学习区之内了，已经到我的恐慌区了。上课之前备课的时候，你们知道我都是要做笔记的，所以我在这里写下要干什么。我跟助教们说，我刚写进笔记的时候，每次看过去，我都感到肾上腺素在胃里飙升。这就是在舒适区之外。现在我也是在舒适区之外。这就是为什么我要在下课前而不是刚上课的时候干这件事。关键是要达到最适度的不适感，我可能的确是有点太吓人了。但是关键是最适度的不适感。为什么呢？想要改变别无他法，我可以想一天想破头，一直说我要找到女性化的一面，我要更勇敢，我要释放出来，我可以想一整天，什么也不会发生的，什么也不会发生的，除非我们有真正的实质的行为改变，真正的实质的行为动作。当我们做到这一点的时候就天高任鸟飞了。<br>谢谢大家！下周四再见！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;早上好！今天要讲的是变化。今天很多事都会发生变化，我们之间的关系会发生变化，敬请关注啊！&lt;br&gt;
上节课结束的时候，我们谈到很多种不同的变化。第一种方式是渐进式的，好像滴水穿石，要花时间的、一点一点的、慢慢的；第二种方式是突发式的，好像用大锤开山劈石，凿出一条路，一个隧道。
      
    
    </summary>
    
      <category term="心理学" scheme="https://hmgqzx.github.io/wiki/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
      <category term="哈佛幸福课" scheme="https://hmgqzx.github.io/wiki/categories/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE/"/>
    
      <category term="字幕内容" scheme="https://hmgqzx.github.io/wiki/categories/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE/%E5%AD%97%E5%B9%95%E5%86%85%E5%AE%B9/"/>
    
    
  </entry>
  
  <entry>
    <title>哈佛幸福课札记</title>
    <link href="https://hmgqzx.github.io/wiki/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE/%E6%9C%AD%E8%AE%B0/index/"/>
    <id>https://hmgqzx.github.io/wiki/心理学/哈佛幸福课/札记/index/</id>
    <published>2018-05-13T07:26:57.000Z</published>
    <updated>2018-05-13T08:44:12.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="记录"><a class="markdownIt-Anchor" href="#记录"></a> 记录</h2><h3 id="一刷"><a class="markdownIt-Anchor" href="#一刷"></a> 一刷</h3><p>本着二八原则，每看一集，只挑三个最大启发或共鸣的 point 进行记录。其余有兴趣，但超过“数量限制”的，记录标题留白。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;记录&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#记录&quot;&gt;&lt;/a&gt; 记录&lt;/h2&gt;
&lt;h3 id=&quot;一刷&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一刷&quot;&gt;&lt;/a&gt; 一刷&lt;/h3&gt;
&lt;p&gt;本着二八原则，
      
    
    </summary>
    
      <category term="心理学" scheme="https://hmgqzx.github.io/wiki/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
      <category term="哈佛幸福课" scheme="https://hmgqzx.github.io/wiki/categories/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE/"/>
    
      <category term="札记" scheme="https://hmgqzx.github.io/wiki/categories/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE/%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="人生价值" scheme="https://hmgqzx.github.io/wiki/tags/%E4%BA%BA%E7%94%9F%E4%BB%B7%E5%80%BC/"/>
    
      <category term="幸福" scheme="https://hmgqzx.github.io/wiki/tags/%E5%B9%B8%E7%A6%8F/"/>
    
  </entry>
  
  <entry>
    <title>哈佛幸福课札记 —— 第 10 讲</title>
    <link href="https://hmgqzx.github.io/wiki/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE/%E6%9C%AD%E8%AE%B0/%E7%AC%AC%E5%8D%81%E8%AE%B2/"/>
    <id>https://hmgqzx.github.io/wiki/心理学/哈佛幸福课/札记/第十讲/</id>
    <published>2018-05-13T07:26:57.000Z</published>
    <updated>2018-05-13T08:44:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="态度与行为"><a class="markdownIt-Anchor" href="#态度与行为"></a> 态度与行为</h2><p><mark>态度影响行为，这是显而易见的。但同时，行为同样也能影响态度。</mark> 而为了能更长久地改变我们的态度，改变行为更重要。</p><blockquote><p>想要改变别无他法，我可以想一天想破头，一直说我要找到女性化的一面，我要更勇敢，我要释放出来，我可以想一整天，什么也不会发生的，什么也不会发生的，除非我们有真正的实质的行为改变。</p></blockquote><p><strong>相关研究</strong>：</p><ul><li>美国战俘写信实验<ul><li>简单的要求他们把共产主义的优越性写下来，写给狱友看，写信回家告诉家人被如何对待 —— 当然确保他们只能写好话</li><li>通过写信，和朋友聊天，还要做报告，长此以往，他们的态度发生了转变，变得更积极正面了</li></ul></li><li>身体回馈假说<ul><li>如果你整天这样阴郁地坐着而不是骄傲的挺胸抬头，你的情绪会因此受到影响。一是通过别人对你的观感，一是通过你的自我认知。</li></ul></li></ul><h2 id="你真的想改变吗-把婴儿留下把洗澡水倒掉"><a class="markdownIt-Anchor" href="#你真的想改变吗-把婴儿留下把洗澡水倒掉"></a> 你真的<code>想</code>改变吗？—— 把婴儿留下，把洗澡水倒掉</h2><p>在 Langer和Thompson 的一个实验中，结果非常有趣：所有给这些正面性格打高分的人，即认为这些性格很重要的人，反而比较不容易去改变自己的负面性格。</p><p>Why？—— 因为在我的意识里，它们是相互关联的。比如：我想要摆脱古板的个性，我不喜欢自己那么古板，与此同时，言行一致在我看来是非常重要的品格。对，我不想要古板下去了，同时我潜意识里有个小人却在说：我想要言行一致，别摆脱古板。</p><p>同样，类似的“错误”绑定有：</p><ul><li>人们把幸福和偷懒联系在一起；</li><li>我丢不掉担忧和焦虑，因为我同时很重视责任感，如果我在比赛前、备课前等会焦虑，说明我有责任感；</li><li>拒绝他人与冷酷无情</li></ul><h2 id="影响幸福感的三个因素"><a class="markdownIt-Anchor" href="#影响幸福感的三个因素"></a> 影响幸福感的三个因素</h2><p>以Lyubomirsky Diener等人为首的，在我们试图分析一个人的幸福感时，我们需要研究三个因素：</p><ul><li>遗传排列</li><li>自我努力</li><li>外部环境</li></ul><p>占比如下：</p><ul><li>我们健康中和快乐相关的指数差异有50%并不是由遗传所决定的（也就是说，有 50% 是由遗传所决定的……）</li><li>努力的作用占比大约为 40%；但，<strong>在遗传作用的前提下不去努力争取幸福的人，即便他们有最好的遗传基因，也不会比基因不如他们但努力争取的人快乐</strong>。</li><li>外部环境，包括居住地、包括收入、天气等等，除去极端案例，外部环境的作用不大，大概是10%。</li></ul><h2 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习</h2><h3 id="练习的重要性"><a class="markdownIt-Anchor" href="#练习的重要性"></a> 练习的重要性</h3><p><strong>你应该立刻进行练习！因为幸福基点会提高</strong></p><blockquote><p>总之，立刻改变，而不是等着。而这些立刻改变的人并不会因此而拥有永久的高峰体验，但是他们的幸福基点会提高，而不像其他人，因为没有改变而回落到和以前一样的水平。</p></blockquote><p><strong>只有改变行为，才能最终转变态度</strong></p><blockquote><p>我和你们的助教所能做的就是激发或鼓励你们在态度上的转变，通过介绍这些研究，让你们相信正向思维的作用。但是如果你们不在行为上做出改变，比如去做感恩练习，比如这周要交的感谢信，这个练习是应该定期去做的，除非之后有相应的行为否则你的态度会回复原状。你的态度和行为都和上课或是接受疗法之前没有两样，必须要有行为上的改变。</p></blockquote><h3 id="提到的练习"><a class="markdownIt-Anchor" href="#提到的练习"></a> 提到的练习</h3><ul><li>感恩练习</li><li>冥想呼吸</li></ul><h2 id="高峰体验"><a class="markdownIt-Anchor" href="#高峰体验"></a> 高峰体验</h2><h2 id="弄假直到成真"><a class="markdownIt-Anchor" href="#弄假直到成真"></a> 弄假直到成真</h2><p>很多时候即便我们是假装快乐，假装很有自尊，我们的情绪也会因此改变。</p><p>当然，这不是最好的方法，更好的方法是——我仍然接受我的情绪，接受我的痛苦并感受它，同时选择用最适当的最对自己有益的方式去面对。</p><p>（同时，因为脸部回馈假说，因为身体回馈假说，因为自我认知理论，行为会影响我的态度。）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;态度与行为&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#态度与行为&quot;&gt;&lt;/a&gt; 态度与行为&lt;/h2&gt;
&lt;p&gt;&lt;mark&gt;态度影响行为，这是显而易见的。但同时，行为同样也能影响态度。&lt;/mark&gt; 而为了能更长久地改变我们的态度，改变行
      
    
    </summary>
    
      <category term="心理学" scheme="https://hmgqzx.github.io/wiki/categories/%E5%BF%83%E7%90%86%E5%AD%A6/"/>
    
      <category term="哈佛幸福课" scheme="https://hmgqzx.github.io/wiki/categories/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE/"/>
    
      <category term="札记" scheme="https://hmgqzx.github.io/wiki/categories/%E5%BF%83%E7%90%86%E5%AD%A6/%E5%93%88%E4%BD%9B%E5%B9%B8%E7%A6%8F%E8%AF%BE/%E6%9C%AD%E8%AE%B0/"/>
    
    
      <category term="人生价值" scheme="https://hmgqzx.github.io/wiki/tags/%E4%BA%BA%E7%94%9F%E4%BB%B7%E5%80%BC/"/>
    
      <category term="幸福" scheme="https://hmgqzx.github.io/wiki/tags/%E5%B9%B8%E7%A6%8F/"/>
    
  </entry>
  
  <entry>
    <title>在 Hexo 中插入图片的一种较好方式</title>
    <link href="https://hmgqzx.github.io/wiki/Hexo/Hexo%E6%8F%92%E5%85%A5%E5%9B%BE%E7%89%87/"/>
    <id>https://hmgqzx.github.io/wiki/Hexo/Hexo插入图片/</id>
    <published>2018-05-13T05:22:31.000Z</published>
    <updated>2018-05-13T06:22:33.000Z</updated>
    
    <content type="html"><![CDATA[<p>Hexo 中提供了 <a href="https://hexo.io/zh-cn/docs/asset-folders.html" target="_blank" rel="noopener">资源文件夹 </a> 的方式来插入图片，大致步骤如下：</p><ul><li><p>在 <code>_config.yml</code>  中填写 <code>post_asset_folder: true</code></p></li><li><p>自动或手动创建一个<strong>与 markdown 文件名字相同</strong>的资源文件夹</p></li><li><p>在资源文件夹中放置图片，按 测试例子中给出的格式进行引用</p><ul><li>这样，就能在站点看到了<ul><li>不过，有个缺点，因为图片放在了<code>资源文件夹</code>中，所以在 Typora 并不能预览</li><li>暂时的解决方法：将资源文件夹的图片拷贝出来，与 markdown 文件 放在同一目录</li></ul></li></ul></li></ul><p>此外，还有其他的几种方式（插件），不太适合这个主题的使用，故抛弃之。但这个方式也不是最好的，图片放在两处，增加了维护成本。</p><h2 id="测试例子"><a class="markdownIt-Anchor" href="#测试例子"></a> 测试例子</h2><h3 id="目录结构"><a class="markdownIt-Anchor" href="#目录结构"></a> 目录结构</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── Hexo插入图片<span class="comment"># 资源文件夹</span></span><br><span class="line">│   └── Lena.png<span class="comment"># 在站点显示的图片</span></span><br><span class="line">├── Hexo插入图片.md<span class="comment"># 文章 -- md 文件；资源文件夹必须和其同名</span></span><br><span class="line">└── Lena.png<span class="comment"># 本地预览显示的图片</span></span><br></pre></td></tr></table></figure><h3 id="文章引用图片格式"><a class="markdownIt-Anchor" href="#文章引用图片格式"></a> 文章引用图片格式</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![lena](./Lena.png)</span><br></pre></td></tr></table></figure><p><img src="./Lena.png" alt="lena"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Hexo 中提供了 &lt;a href=&quot;https://hexo.io/zh-cn/docs/asset-folders.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;资源文件夹 &lt;/a&gt; 的方式来插入图片，大致步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li
      
    
    </summary>
    
      <category term="Hexo" scheme="https://hmgqzx.github.io/wiki/categories/Hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>抓包工具 Wireshark</title>
    <link href="https://hmgqzx.github.io/wiki/Network/Wireshark/"/>
    <id>https://hmgqzx.github.io/wiki/Network/Wireshark/</id>
    <published>2018-05-11T07:32:35.000Z</published>
    <updated>2018-05-11T07:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="文档"><a class="markdownIt-Anchor" href="#文档"></a> 文档</h2><p><a href="https://www.wireshark.org/docs/wsug_html_chunked/" target="_blank" rel="noopener">Wireshark User’s Guide</a> 官方文档</p><h3 id="其他较详细的资料"><a class="markdownIt-Anchor" href="#其他较详细的资料"></a> 其他较详细的资料</h3><p><a href="https://community.emc.com/thread/194901" target="_blank" rel="noopener">EMC Community Network - DECN: 如果看了这个你还是不会用Wireshark，那就来找我吧（8月6日完结）</a> 较老，windows 版，但本质不变</p><h2 id="颜色"><a class="markdownIt-Anchor" href="#颜色"></a> 颜色</h2><p>绿色是TCP报文，深蓝色是DNS，浅蓝是UDP，黑色标识出有问题的TCP报文——比如乱序报文</p><h2 id="过滤器"><a class="markdownIt-Anchor" href="#过滤器"></a> 过滤器</h2><p>icmp</p><p>ip.addr (目标、源)</p><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><p>“追踪流”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;文档&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#文档&quot;&gt;&lt;/a&gt; 文档&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;https://www.wireshark.org/docs/wsug_html_chunked/&quot; target=&quot;_bla
      
    
    </summary>
    
      <category term="Network" scheme="https://hmgqzx.github.io/wiki/categories/Network/"/>
    
    
      <category term="未整理" scheme="https://hmgqzx.github.io/wiki/tags/%E6%9C%AA%E6%95%B4%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>LaTeX</title>
    <link href="https://hmgqzx.github.io/wiki/LaTex/LaTeX/"/>
    <id>https://hmgqzx.github.io/wiki/LaTex/LaTeX/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://hahack.com/tools/latex-note/" target="_blank" rel="noopener">LaTeX札记 | HaHack</a></p><p><a href="http://hahack.com/codes/handout-with-script/" target="_blank" rel="noopener">Handout With Script | HaHack</a></p><blockquote><p>生成幻灯片的 LaTeX 样式包</p></blockquote><ul><li>安装、配置好一个 TeX 发行版；</li><li>选择一个顺手的编辑器（和 PDF 阅读器）</li></ul><h2 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h2><p>在 OS X 上，主流是用 MacTex，他是一个基于 TeX Live 之上的封装，方便新手</p><h3 id="mactex"><a class="markdownIt-Anchor" href="#mactex"></a> MacTex</h3><p><a href="http://liam0205.me/2014/11/02/latex-mactex-chinese-support/" target="_blank" rel="noopener">为 MacTeX 配置中文支持 | 始终</a></p><p>要做的事情只有两件：</p><ul><li>配置一个 UTF-8 的编辑环境；</li><li>用 <code>ctex</code> 的语法选择合适的字体。</li></ul><h2 id="编辑器"><a class="markdownIt-Anchor" href="#编辑器"></a> 编辑器</h2><p>有很多种，各有所长</p><ul><li>Latexian</li><li>GNU Emacs</li><li>texstudio</li><li>Sublime Text</li><li>texmaker</li><li>Texshop（MacTex自带）</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;http://hahack.com/tools/latex-note/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;LaTeX札记 | HaHack&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://hahack.com/codes
      
    
    </summary>
    
      <category term="LaTex" scheme="https://hmgqzx.github.io/wiki/categories/LaTex/"/>
    
    
  </entry>
  
  <entry>
    <title>JavaScript 中的回调</title>
    <link href="https://hmgqzx.github.io/wiki/JavaScript/%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0/"/>
    <id>https://hmgqzx.github.io/wiki/JavaScript/回调函数/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回调是什么"><a class="markdownIt-Anchor" href="#回调是什么"></a> 回调是什么？</h2><blockquote><p>A <code>callback</code> is a function that is passed as an argument to another function and is executed after its parent function has completed.<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup></p></blockquote><blockquote><p>A <code>callback function</code>, also known as a <code>higher-order function</code>, is a function that is passed to another function (let’s call this other function “<strong>otherFunction</strong>”) as a parameter, and the <code>callback function</code> is called (or executed) inside the <strong>otherFunction</strong>. <sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup></p><p>A <code>callback function</code> is essentially a <strong>pattern</strong> (an established solution to a common problem), and therefore, the use of a callback function is also known as a <code>callback pattern</code>.<sup class="footnote-ref"><a href="#fn2" id="fnref2:1">[2:1]</a></sup></p></blockquote><p><strong>简单地说:</strong> 一个回调函数是，当执行完另外一个函数（通常是异步的）之后，再来执行的一种函数<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>。也就是说，回调函数是，做完其他“任务”后，再 call back 来执行的函数</p><p><strong>更进一步地说:</strong> 在 JavaScript 中，因为函数是对象，所以可以作为参数传入所谓的<code>高阶函数</code>，也能被<code>高阶函数</code>作为返回值返回<sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>。任何函数，只要它作为参数传入且随后被调用，都可称之为回调函数<sup class="footnote-ref"><a href="#fn3" id="fnref3:1">[3:1]</a></sup>。</p><p>也就是说，在高阶函数中，作为参数传入的回调函数被当成一个整体来进行调用，从这一层上说，回调函数与抽离出来的子函数没有区别。只是因为他的用途而赋予了“回调”的名称。</p><h2 id="how-callback-functions-work"><a class="markdownIt-Anchor" href="#how-callback-functions-work"></a> How Callback Functions Work?</h2><h3 id="pass-definition-as-parameter"><a class="markdownIt-Anchor" href="#pass-definition-as-parameter"></a> pass definition as parameter</h3><blockquote><p>When we pass a <code>callback function</code> as an argument to another function, we are only passing the <strong>function definition</strong>. We are not executing the function in the parameter.<br>And since the containing function has the callback function in its parameter as a function definition, it can execute the callback anytime.<sup class="footnote-ref"><a href="#fn2" id="fnref2:2">[2:2]</a></sup></p></blockquote><p>我们对 the containing function<sub>（“外层的那个函数、方法”）</sub>传递的只是回调函数的定义，而不是在参数处执行这个回调函数<sub>（执行的话是这个样子`callback()`，是吧）</sub><br>当  the containing function “拿到” 了回调函数的定义，那么他想在什么时候执行这个回调函数都可以了</p><h3 id="closure"><a class="markdownIt-Anchor" href="#closure"></a> closure</h3><blockquote><p>The callback is a <code>closure</code>. As we know, closures have access to the containing function’s scope, so the <code>callback function</code> can access the containing functions’ variables, and even the variables from the global scope.<sup class="footnote-ref"><a href="#fn2" id="fnref2:3">[2:3]</a></sup></p></blockquote><p>callback 是一个 closure，所以回调函数可以访问 the containing function 里的变量</p><h2 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h2><h3 id="this-的指向问题"><a class="markdownIt-Anchor" href="#this-的指向问题"></a> this 的指向问题</h3><p>现在可以用 ES6 的箭头函数<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>来解决</p><h3 id="callback-hell-problem"><a class="markdownIt-Anchor" href="#callback-hell-problem"></a> “Callback Hell” Problem</h3><p>也就是多重嵌套的匿名回调，使得代码可读性很低</p><p>solutions<sup class="footnote-ref"><a href="#fn2" id="fnref2:4">[2:4]</a></sup>：</p><ol><li>Name your functions and declare them and pass just the name of the function as the callback, instead of defining an anonymous function in the parameter of the main function.</li><li>Modularity: Separate your code into modules, so you can export a section of code that does a particular job. Then you can import that module into your larger application.</li></ol><h3 id="利用回调函数分离职能"><a class="markdownIt-Anchor" href="#利用回调函数分离职能"></a> 利用回调函数分离职能<sup class="footnote-ref"><a href="#fn2" id="fnref2:5">[2:5]</a></sup></h3><h2 id="使用场合"><a class="markdownIt-Anchor" href="#使用场合"></a> 使用场合<sup class="footnote-ref"><a href="#fn2" id="fnref2:6">[2:6]</a></sup></h2><ul><li>For asynchronous execution (such as reading files, and making HTTP requests)</li><li>In Event Listeners/Handlers</li><li>In setTimeout and setInterval methods</li><li>For Generalization: code conciseness</li></ul><h2 id="疑问"><a class="markdownIt-Anchor" href="#疑问"></a> 疑问</h2><p>在 ajax 等中，“引擎”是如何知道所要的数据到达了，从而来执行 callback 呢？</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><hr class="footnotes-sep"><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p><a href="http://www.igeekbar.com/igeekbar/post/161.htm" target="_blank" rel="noopener">关于Javascript回调函数的那些事 | 人人都是互联网创意G客</a> <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p><a href="http://javascriptissexy.com/understand-javascript-callback-functions-and-use-them/" target="_blank" rel="noopener">Understand JavaScript Callback Functions and Use Them | JavaScript is Sexy</a> <a href="#fnref2" class="footnote-backref">↩︎</a> <a href="#fnref2:1" class="footnote-backref">↩︎</a> <a href="#fnref2:2" class="footnote-backref">↩︎</a> <a href="#fnref2:3" class="footnote-backref">↩︎</a> <a href="#fnref2:4" class="footnote-backref">↩︎</a> <a href="#fnref2:5" class="footnote-backref">↩︎</a> <a href="#fnref2:6" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p><a href="https://juejin.im/entry/595ba8025188250d957632d9" target="_blank" rel="noopener">回归基础：在JavaScript中回调函数是什么？ - 前端 - 掘金</a> <a href="#fnref3" class="footnote-backref">↩︎</a> <a href="#fnref3:1" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>They（Functions） can be “stored in variables, passed as arguments to functions, created within functions, and returned from functions”. <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/Arrow_functions" target="_blank" rel="noopener">箭头函数 - JavaScript | MDN</a> <a href="#fnref5" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;回调是什么&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#回调是什么&quot;&gt;&lt;/a&gt; 回调是什么？&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;A &lt;code&gt;callback&lt;/code&gt; is a function that is pas
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://hmgqzx.github.io/wiki/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>Mac OS X 里特有的那些命令行</title>
    <link href="https://hmgqzx.github.io/wiki/Mac/Mac%20%E5%91%BD%E4%BB%A4%E8%A1%8C%E5%B7%A5%E5%85%B7/"/>
    <id>https://hmgqzx.github.io/wiki/Mac/Mac 命令行工具/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac 里的不少配置可以通过特定的命令行来设定，以下是我比较常用的、感兴趣的命令。我一般是在 zsh 里对这些常用的命令设定 alias，非常方便。<br><em>更多的命令请参考：</em></p><ul><li><a href="https://github.com/herrbischoff/awesome-osx-command-line" target="_blank" rel="noopener">herrbischoff/awesome-osx-command-line: Use your OS X terminal shell to do awesome things.</a></li></ul><h3 id="finder"><a class="markdownIt-Anchor" href="#finder"></a> Finder</h3><h4 id="show-all-file-extensions-显示所有的文件扩展名"><a class="markdownIt-Anchor" href="#show-all-file-extensions-显示所有的文件扩展名"></a> Show All File Extensions 显示所有的文件扩展名</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write -g AppleShowAllExtensions -bool true</span><br></pre></td></tr></table></figure><h4 id="hide-folder-in-finder-隐藏-finder-里的指定文件夹"><a class="markdownIt-Anchor" href="#hide-folder-in-finder-隐藏-finder-里的指定文件夹"></a> Hide Folder in Finder 隐藏 Finder 里的指定文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chflags hidden /path/to/folder/</span><br></pre></td></tr></table></figure><h4 id="show-hidden-files-显示隐藏文件"><a class="markdownIt-Anchor" href="#show-hidden-files-显示隐藏文件"></a> Show Hidden Files 显示隐藏文件</h4><p>隐藏文件是指以<code>.</code>开头的系统文件等，在 Finder 里默认隐藏；开启显示后，数目会很多，建议平时不用时关闭</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Show All #要重启才行？</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles true</span><br><span class="line"></span><br><span class="line"># Restore Default File Visibility</span><br><span class="line">defaults write com.apple.finder AppleShowAllFiles false</span><br></pre></td></tr></table></figure><h4 id="unhide-user-library-folder-不隐藏用户的库文件夹"><a class="markdownIt-Anchor" href="#unhide-user-library-folder-不隐藏用户的库文件夹"></a> Unhide User Library Folder 不隐藏用户的库文件夹</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chflags nohidden ~/Library</span><br></pre></td></tr></table></figure><h4 id="increase-number-of-recent-places-增加-finder-中的最近使用文件夹数量"><a class="markdownIt-Anchor" href="#increase-number-of-recent-places-增加-finder-中的最近使用文件夹数量"></a> Increase Number of Recent Places 增加 Finder 中的“最近使用文件夹”数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write -g NSNavRecentPlacesLimit -int 10 &amp;&amp; \</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure><h4 id="show-quit-finder-menu-item-设定-finder-可退出强烈推荐"><a class="markdownIt-Anchor" href="#show-quit-finder-menu-item-设定-finder-可退出强烈推荐"></a> Show “Quit Finder” Menu Item 设定 Finder 可退出（<code>强烈推荐</code>）</h4><blockquote><p>Makes possible to see Finder menu item “Quit Finder” with default shortcut Cmd + Q</p></blockquote><p>这个好用，这样就能使用 <code>Cmd + Q</code> 一次性关闭所有的 Finder 窗口了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Enable</span><br><span class="line">defaults write com.apple.finder QuitMenuItem -bool true &amp;&amp; \</span><br><span class="line">killall Finder</span><br><span class="line"></span><br><span class="line"># Disable (Default)</span><br><span class="line">defaults write com.apple.finder QuitMenuItem -bool false &amp;&amp; \</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure><h4 id="path-bar显示路径栏"><a class="markdownIt-Anchor" href="#path-bar显示路径栏"></a> Path Bar显示路径栏</h4><p>开启后会在 Finder  底部显示当前路径信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Show</span><br><span class="line">defaults write com.apple.finder ShowPathbar -bool true</span><br><span class="line"></span><br><span class="line"># Hide (Default)</span><br><span class="line">defaults write com.apple.finder ShowPathbar -bool false</span><br></pre></td></tr></table></figure><h4 id="status-bar-状态栏"><a class="markdownIt-Anchor" href="#status-bar-状态栏"></a> Status Bar 状态栏</h4><p>在 Finder 最底部，显示当前文件夹项目数量、光标选中数量、硬盘可用容量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Show</span><br><span class="line">defaults write com.apple.finder ShowStatusBar -bool true</span><br><span class="line"></span><br><span class="line"># Hide (Default)</span><br><span class="line">defaults write com.apple.finder ShowStatusBar -bool false</span><br></pre></td></tr></table></figure><h4 id="set-current-folder-as-default-search-scope-设置当前文件夹为默认搜索域"><a class="markdownIt-Anchor" href="#set-current-folder-as-default-search-scope-设置当前文件夹为默认搜索域"></a> Set Current Folder as Default Search Scope 设置当前文件夹为默认搜索域</h4><p>整理有序的话，大部分情况下只是搜索当前目录，这样就不用每次都要多点击一次来选择了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.finder FXDefaultSearchScope -string &quot;SCcf&quot;</span><br></pre></td></tr></table></figure><h3 id="layout"><a class="markdownIt-Anchor" href="#layout"></a> Layout</h3><h4 id="desktop-icon-visibility-显示隐藏桌面图标"><a class="markdownIt-Anchor" href="#desktop-icon-visibility-显示隐藏桌面图标"></a> Desktop Icon Visibility 显示/隐藏桌面图标</h4><p>OS X 桌面的右键功能里没有 Windows 的“隐藏桌面图标”选项，可以通过下面的命令实现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># Hide Icons</span><br><span class="line">defaults write com.apple.finder CreateDesktop -bool false &amp;&amp; \</span><br><span class="line">killall Finder</span><br><span class="line"></span><br><span class="line"># Show Icons (Default)</span><br><span class="line">defaults write com.apple.finder CreateDesktop -bool true &amp;&amp; \</span><br><span class="line">killall Finder</span><br></pre></td></tr></table></figure><h3 id="battery-电池"><a class="markdownIt-Anchor" href="#battery-电池"></a> Battery 电池</h3><p>哈哈，这个纯粹是列在这儿，平时并没多大用</p><h4 id="remaining-battery-percentage-剩余电量"><a class="markdownIt-Anchor" href="#remaining-battery-percentage-剩余电量"></a> Remaining Battery Percentage 剩余电量</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pmset -g batt | egrep "([0-9]+\%).*" -o --colour=auto | cut -f1 -d';'</span><br></pre></td></tr></table></figure><h4 id="remaining-battery-time-电池剩余使用时间"><a class="markdownIt-Anchor" href="#remaining-battery-time-电池剩余使用时间"></a> Remaining Battery Time 电池剩余使用时间</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pmset -g batt | egrep "([0-9]+\%).*" -o --colour=auto | cut -f3 -d';'</span><br></pre></td></tr></table></figure><h3 id="power-management-电源管理"><a class="markdownIt-Anchor" href="#power-management-电源管理"></a> Power Management 电源管理</h3><h4 id="prevent-system-sleep-防止系统进入睡眠一段时间"><a class="markdownIt-Anchor" href="#prevent-system-sleep-防止系统进入睡眠一段时间"></a> Prevent System Sleep 防止系统进入睡眠一段时间</h4><p>参数单位是秒</p><p>Prevent sleep for 1 hour:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">caffeinate -u -t 3600</span><br></pre></td></tr></table></figure><h4 id="put-display-to-sleep-after-15-minutes-of-inactivity-一段时间不活动后关闭显示器"><a class="markdownIt-Anchor" href="#put-display-to-sleep-after-15-minutes-of-inactivity-一段时间不活动后关闭显示器"></a> Put Display to Sleep after 15 Minutes of Inactivity 一段时间不活动后关闭显示器</h4><p>参数单位是分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pmset displaysleep 15</span><br></pre></td></tr></table></figure><h4 id="put-computer-to-sleep-after-30-minutes-of-inactivity-一段时间不活动后使-mac-睡眠"><a class="markdownIt-Anchor" href="#put-computer-to-sleep-after-30-minutes-of-inactivity-一段时间不活动后使-mac-睡眠"></a> Put Computer to Sleep after 30 Minutes of Inactivity 一段时间不活动后使 Mac 睡眠</h4><p>参数单位是分钟</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pmset sleep 30</span><br></pre></td></tr></table></figure><h4 id="check-system-sleep-idle-time-查看系统进入休眠的间隔"><a class="markdownIt-Anchor" href="#check-system-sleep-idle-time-查看系统进入休眠的间隔"></a> Check System Sleep Idle Time 查看系统进入休眠的间隔</h4><p>目前我的是 1 分钟</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemsetup -getcomputersleep</span></span><br><span class="line">Computer Sleep: after 1 minutes</span><br></pre></td></tr></table></figure><h4 id="set-system-sleep-idle-time-to-60-minutes-设置系统进入休眠的间隔"><a class="markdownIt-Anchor" href="#set-system-sleep-idle-time-to-60-minutes-设置系统进入休眠的间隔"></a> Set System Sleep Idle Time to 60 Minutes 设置系统进入休眠的间隔</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo systemsetup -setcomputersleep 60</span><br></pre></td></tr></table></figure><h3 id="audio"><a class="markdownIt-Anchor" href="#audio"></a> Audio</h3><h4 id="set-audio-volume"><a class="markdownIt-Anchor" href="#set-audio-volume"></a> Set Audio Volume</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">osascript -e &apos;set volume 4&apos;</span><br></pre></td></tr></table></figure><h4 id="play-audio-file"><a class="markdownIt-Anchor" href="#play-audio-file"></a> Play Audio File</h4><p>You can play all audio formats that are natively supported by QuickTime.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">afplay -q 1 filename.mp3</span><br></pre></td></tr></table></figure><h3 id="tts"><a class="markdownIt-Anchor" href="#tts"></a> TTS</h3><p>吐槽下，综合各方面考虑，Mac 上可用的 TTS 大概最好的就是系统自带的了。然而——还是那么地垃圾……</p><h4 id="speak-text-with-system-default-voice-用-tts-发音朗读文本"><a class="markdownIt-Anchor" href="#speak-text-with-system-default-voice-用-tts-发音朗读文本"></a> Speak Text with System Default Voice 用 TTS 发音朗读文本</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say &apos;All your base are belong to us!&apos;</span><br></pre></td></tr></table></figure><h4 id="create-audiobook-from-text"><a class="markdownIt-Anchor" href="#create-audiobook-from-text"></a> Create Audiobook From Text</h4><p>Uses “Alex” voice, a plain UTF-8 encoded text file for input and AAC output.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">say -v Alex -f file.txt -o &quot;output.m4a&quot;</span><br></pre></td></tr></table></figure><h3 id="networking-tools-网络工具"><a class="markdownIt-Anchor" href="#networking-tools-网络工具"></a> Networking Tools 网络工具</h3><h4 id="ping-a-host-to-see-whether-its-available"><a class="markdownIt-Anchor" href="#ping-a-host-to-see-whether-its-available"></a> Ping a Host to See Whether It’s Available</h4><p>这个大概是天朝特色了……</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping -o github.com</span><br></pre></td></tr></table></figure><h4 id="troubleshoot-routing-problems"><a class="markdownIt-Anchor" href="#troubleshoot-routing-problems"></a> Troubleshoot Routing Problems</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">traceroute github.com</span><br></pre></td></tr></table></figure><h3 id="ssh"><a class="markdownIt-Anchor" href="#ssh"></a> SSH</h3><h4 id="remote-login-远程登录"><a class="markdownIt-Anchor" href="#remote-login-远程登录"></a> Remote Login 远程登录</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Enable remote login</span><br><span class="line">sudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist</span><br><span class="line"></span><br><span class="line"># Disable remote login</span><br><span class="line">sudo launchctl unload -w /System/Library/LaunchDaemons/ssh.plist</span><br></pre></td></tr></table></figure><h3 id="tcpip"><a class="markdownIt-Anchor" href="#tcpip"></a> TCP/IP</h3><h4 id="show-application-using-a-certain-port-显示当前占用特定端口的应用列表-强烈推荐"><a class="markdownIt-Anchor" href="#show-application-using-a-certain-port-显示当前占用特定端口的应用列表-强烈推荐"></a> Show Application Using a Certain Port 显示当前占用特定端口的应用列表 （<code>强烈推荐</code>）</h4><p>这个用来检查端口占用很不错</p><p>This outputs all applications currently using port 80.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo lsof -i :80</span><br></pre></td></tr></table></figure><h4 id="show-external-ip-address"><a class="markdownIt-Anchor" href="#show-external-ip-address"></a> Show External IP Address</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dig +short myip.opendns.com @resolver1.opendns.com</span><br></pre></td></tr></table></figure><h3 id="wi-fi"><a class="markdownIt-Anchor" href="#wi-fi"></a> Wi-Fi</h3><h4 id="show-local-ip-address"><a class="markdownIt-Anchor" href="#show-local-ip-address"></a> Show Local IP Address</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ipconfig getifaddr en0</span><br></pre></td></tr></table></figure><h4 id="show-wi-fi-connection-history"><a class="markdownIt-Anchor" href="#show-wi-fi-connection-history"></a> Show Wi-Fi Connection History</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults read /Library/Preferences/SystemConfiguration/com.apple.airport.preferences | grep LastConnected -A 7</span><br></pre></td></tr></table></figure><h4 id="show-wi-fi-network-passwords"><a class="markdownIt-Anchor" href="#show-wi-fi-network-passwords"></a> Show Wi-Fi Network Passwords</h4><p>Exchange SSID with the SSID of the access point you wish to query the password from.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">security find-generic-password -D &quot;AirPort network password&quot; -a &quot;SSID&quot; -gw</span><br></pre></td></tr></table></figure><h3 id="spotlight"><a class="markdownIt-Anchor" href="#spotlight"></a> Spotlight</h3><p>这个要怎么用？听说这个很久了，还没去具体了解使用</p><h4 id="spotlight-indexing"><a class="markdownIt-Anchor" href="#spotlight-indexing"></a> Spotlight Indexing</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Disable</span><br><span class="line">mdutil -i off -d /path/to/volume</span><br><span class="line"></span><br><span class="line"># Enable (Default)</span><br><span class="line">mdutil -i on /path/to/volume</span><br></pre></td></tr></table></figure><h4 id="erase-spotlight-index-and-rebuild-重建索引"><a class="markdownIt-Anchor" href="#erase-spotlight-index-and-rebuild-重建索引"></a> Erase Spotlight Index and Rebuild 重建索引</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdutil -E /path/to/volume</span><br></pre></td></tr></table></figure><h4 id="search-via-spotlight-搜索"><a class="markdownIt-Anchor" href="#search-via-spotlight-搜索"></a> Search via Spotlight 搜索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdfind -name &apos;searchterm&apos;</span><br></pre></td></tr></table></figure><h4 id="show-spotlight-indexed-metadata"><a class="markdownIt-Anchor" href="#show-spotlight-indexed-metadata"></a> Show Spotlight Indexed Metadata</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mdls /path/to/file</span><br></pre></td></tr></table></figure><h3 id="screenshots-屏幕截图"><a class="markdownIt-Anchor" href="#screenshots-屏幕截图"></a> Screenshots 屏幕截图</h3><p>目前在用软件<code>Snip</code>，满足基本所需了</p><h4 id="take-delayed-screenshot"><a class="markdownIt-Anchor" href="#take-delayed-screenshot"></a> Take Delayed Screenshot</h4><p>Takes a screenshot as JPEG after 3 seconds and displays in Preview.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">screencapture -T 3 -t jpg -P delayedpic.jpg</span><br></pre></td></tr></table></figure><h4 id="save-screenshots-to-given-location"><a class="markdownIt-Anchor" href="#save-screenshots-to-given-location"></a> Save Screenshots to Given Location</h4><p>Sets location to <code>~/Desktop</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture location ~/Desktop &amp;&amp; \</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><h4 id="save-screenshots-in-given-format"><a class="markdownIt-Anchor" href="#save-screenshots-in-given-format"></a> Save Screenshots in Given Format</h4><p>Sets format to <code>png</code>. Other options are <code>bmp</code>, <code>gif</code>, <code>jpg</code>, <code>jpeg</code>, <code>pdf</code>, <code>tiff</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture type -string &quot;png&quot;</span><br></pre></td></tr></table></figure><h4 id="disable-shadow-in-screenshots-隐藏截图里的阴影"><a class="markdownIt-Anchor" href="#disable-shadow-in-screenshots-隐藏截图里的阴影"></a> Disable Shadow in Screenshots 隐藏截图里的阴影</h4><p>有阴影好看很多</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture disable-shadow -bool true &amp;&amp; \</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><h4 id="set-default-screenshot-name"><a class="markdownIt-Anchor" href="#set-default-screenshot-name"></a> Set Default Screenshot Name</h4><p>Date and time remain unchanged.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">defaults write com.apple.screencapture name &quot;Example name&quot; &amp;&amp; \</span><br><span class="line">killall SystemUIServer</span><br></pre></td></tr></table></figure><h3 id="login-window"><a class="markdownIt-Anchor" href="#login-window"></a> Login Window</h3><h4 id="set-login-window-text"><a class="markdownIt-Anchor" href="#set-login-window-text"></a> Set Login Window Text</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText &quot;Your text&quot;</span><br></pre></td></tr></table></figure><h3 id="security"><a class="markdownIt-Anchor" href="#security"></a> Security</h3><h3 id="application-firewall"><a class="markdownIt-Anchor" href="#application-firewall"></a> Application Firewall</h3><p>这个是不是可以阻止应用联网？？（之前试了下，好像没什么效果，😓）</p><h4 id="firewall-service"><a class="markdownIt-Anchor" href="#firewall-service"></a> Firewall Service</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Show Status</span><br><span class="line">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate</span><br><span class="line"></span><br><span class="line"># Enable</span><br><span class="line">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on</span><br><span class="line"></span><br><span class="line"># Disable (Default)</span><br><span class="line">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off</span><br></pre></td></tr></table></figure><h4 id="add-application-to-firewall"><a class="markdownIt-Anchor" href="#add-application-to-firewall"></a> Add Application to Firewall</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /path/to/file</span><br></pre></td></tr></table></figure><h3 id="passwords"><a class="markdownIt-Anchor" href="#passwords"></a> Passwords</h3><h4 id="generate-secure-password-and-copy-to-clipboard"><a class="markdownIt-Anchor" href="#generate-secure-password-and-copy-to-clipboard"></a> Generate Secure Password and Copy to Clipboard</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LC_ALL=C tr -dc &quot;[:alpha:][:alnum:]&quot; &lt; /dev/urandom | head -c 20 | pbcopy</span><br></pre></td></tr></table></figure><h3 id="physical-access"><a class="markdownIt-Anchor" href="#physical-access"></a> Physical Access</h3><h4 id="launch-screen-saver-启动屏幕保护程序"><a class="markdownIt-Anchor" href="#launch-screen-saver-启动屏幕保护程序"></a> Launch Screen Saver  启动屏幕保护程序</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app</span><br></pre></td></tr></table></figure><h4 id="lock-screen-锁屏"><a class="markdownIt-Anchor" href="#lock-screen-锁屏"></a> Lock Screen 锁屏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend</span><br></pre></td></tr></table></figure><h4 id="screensaver-immediate-lock"><a class="markdownIt-Anchor" href="#screensaver-immediate-lock"></a> Screensaver Immediate Lock</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Status</span><br><span class="line">defaults read com.apple.screensaver askForPasswordDelay</span><br><span class="line"></span><br><span class="line"># Enable (Default)</span><br><span class="line">defaults write com.apple.screensaver askForPasswordDelay -int 0</span><br><span class="line"></span><br><span class="line"># Disable (Integer = lock delay in seconds)</span><br><span class="line">defaults write com.apple.screensaver askForPasswordDelay -int 10</span><br></pre></td></tr></table></figure><h4 id="screensaver-password"><a class="markdownIt-Anchor" href="#screensaver-password"></a> Screensaver Password</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># Status</span><br><span class="line">defaults read com.apple.screensaver askForPassword</span><br><span class="line"></span><br><span class="line"># Enable</span><br><span class="line">defaults write com.apple.screensaver askForPassword -int 1</span><br><span class="line"></span><br><span class="line"># Disable (Default)</span><br><span class="line">defaults write com.apple.screensaver askForPassword -int 0</span><br></pre></td></tr></table></figure><h4 id="shutdown-关机"><a class="markdownIt-Anchor" href="#shutdown-关机"></a> Shutdown 关机</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo poweroff</span><br></pre></td></tr></table></figure><h4 id="uptime-已开机时间"><a class="markdownIt-Anchor" href="#uptime-已开机时间"></a> Uptime 已开机时间</h4><p>How long since your last restart.</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> uptime</span></span><br><span class="line">15:38  up 19 days, 14:48, 6 users, load averages: 1.85 1.55 1.47</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Mac 里的不少配置可以通过特定的命令行来设定，以下是我比较常用的、感兴趣的命令。我一般是在 zsh 里对这些常用的命令设定 alias，非常方便。&lt;br&gt;
&lt;em&gt;更多的命令请参考：&lt;/em&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://github.co
      
    
    </summary>
    
      <category term="Mac" scheme="https://hmgqzx.github.io/wiki/categories/Mac/"/>
    
    
      <category term="配置" scheme="https://hmgqzx.github.io/wiki/tags/%E9%85%8D%E7%BD%AE/"/>
    
      <category term="小技巧" scheme="https://hmgqzx.github.io/wiki/tags/%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>QuickLook 预览增强插件</title>
    <link href="https://hmgqzx.github.io/wiki/Mac/QuickLook%20%E9%A2%84%E8%A7%88%E5%A2%9E%E5%BC%BA%E6%8F%92%E4%BB%B6/"/>
    <id>https://hmgqzx.github.io/wiki/Mac/QuickLook 预览增强插件/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>QuickLook（快速预览）是 Mac OS X 中一项很好的功能。用户选择文件后，按下空格键即可快速预览。因为不用点击打开，还能使用方向键切换，从而节省了大量的时间。但对于开发者来说，系统内置的功能还不能完全满足需求。</p><p>需要预览如下文件时，这些插件帮助了我许多：</p><ul><li>MarkDown文件</li><li>源代码文件，支持语法高亮</li><li>纯文本或无后缀的“文本”文件<ul><li>可直接预览，而不用去设置打开方式，太棒👍</li></ul></li></ul><h2 id="插件"><a class="markdownIt-Anchor" href="#插件"></a> 插件</h2><p>这里是一个列表，包含了不少有用的外部插件，可以通过 <code>brew</code> 安装：</p><p><a href="https://github.com/sindresorhus/quick-look-plugins" target="_blank" rel="noopener">sindresorhus/quick-look-plugins: List of useful Quick Look plugins for developers</a></p><p>在这里：<a href="http://www.quicklookplugins.com/" target="_blank" rel="noopener">QuickLook Plugins List</a> 你能找到更多的插件</p><h2 id="附言"><a class="markdownIt-Anchor" href="#附言"></a> 附言</h2><p>还不了解 <code>brew</code> 的普通用户可参考这篇文章 <a href="https://sspai.com/post/31927" target="_blank" rel="noopener">加强你的「一指禅」：Mac QuickLook「快速预览」兼容性扩展教程 - 少数派</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;QuickLook（快速预览）是 Mac OS X 中一项很好的功能。用户选择文件后，按下空格键即可快速预览。因为不用点击打开，还能使用方向键切换，从而节省了大量的时间。但对于开发者来说，系统内置的功能还不能完全满足需求。&lt;/p&gt;
&lt;p&gt;需要预览如下文件时，这些插件帮助了我
      
    
    </summary>
    
      <category term="Mac" scheme="https://hmgqzx.github.io/wiki/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>dotfiles</title>
    <link href="https://hmgqzx.github.io/wiki/Mac/dotfiles/"/>
    <id>https://hmgqzx.github.io/wiki/Mac/dotfiles/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>dotfiles，就是以 <code>.</code> (dot)为前缀的文件，一般在系统里是隐藏的，而很多配置就是这些文件。<a href="https://dotfiles.github.io/" target="_blank" rel="noopener">这里</a> 列出了不少人的配置，可以借鉴</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="http://blog.amowu.com/2015/01/hacker-guide-to-setting-up-your-mac.html" target="_blank" rel="noopener">如何優雅地在 Mac 上使用 dotfiles?</a></p><p><a href="http://cloudchen.logdown.com/posts/49264746647/dotfiles" target="_blank" rel="noopener">善用 dotfiles 個人化自己的工作環境 « Cloudの丘</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;dotfiles，就是以 &lt;code&gt;.&lt;/code&gt; (dot)为前缀的文件，一般在系统里是隐藏的，而很多配置就是这些文件。&lt;a href=&quot;https://dotfiles.github.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;这里&lt;/a
      
    
    </summary>
    
      <category term="Mac" scheme="https://hmgqzx.github.io/wiki/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 中的常量</title>
    <link href="https://hmgqzx.github.io/wiki/Python/Python%20%E5%B8%B8%E9%87%8F/"/>
    <id>https://hmgqzx.github.io/wiki/Python/Python 常量/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Python在语法上并没有定义常量，尽管PEP 8定义了常量的命名规范为大写字母和下划线组成。</p><p>解决方案 <a href="http://code.activestate.com/recipes/65207-constants-in-python/" target="_blank" rel="noopener">Constants in Python</a></p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="http://www.malike.net.cn/blog/2013/11/03/python-constants/" target="_blank" rel="noopener">Python常量 - Like的世界</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Python在语法上并没有定义常量，尽管PEP 8定义了常量的命名规范为大写字母和下划线组成。&lt;/p&gt;
&lt;p&gt;解决方案 &lt;a href=&quot;http://code.activestate.com/recipes/65207-constants-in-python/&quot; targ
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Homebrew</title>
    <link href="https://hmgqzx.github.io/wiki/Mac/homebrew/"/>
    <id>https://hmgqzx.github.io/wiki/Mac/homebrew/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>Homebrew 是 Mac OS X 上的软件包管理系统，使用它可以方便地安装、更新许多软件（“无人值守”~自动化）。称之为“ Mac 必备神器”一点也不为过。</p><h2 id="homebrew"><a class="markdownIt-Anchor" href="#homebrew"></a> Homebrew</h2><h3 id="常用命令"><a class="markdownIt-Anchor" href="#常用命令"></a> 常用命令</h3><p>常用的命令没几个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install wget <span class="comment"># 安装源码</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew info svn <span class="comment"># 显示软件的各种信息，包括版本啊源码地址啊等等</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew uninstall wget <span class="comment"># 卸载软件，很爽，一键静默卸载</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew search git <span class="comment"># 模糊搜索brew 支持的软件。如果不加软件名，就会列出所有它支持的软件。多的很。</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew list <span class="comment"># 列出本机通过brew安装的所有软件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew update <span class="comment"># 跟新brew软件自身</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew upgrade wget <span class="comment"># 更新安装过的软件,如果不加软件名，就更新所有可以更新的软件</span></span></span><br><span class="line"><span class="meta">$</span><span class="bash"> brew cleanup <span class="comment"># 清除下载的各种缓存</span></span></span><br></pre></td></tr></table></figure><p><mark>装任何东西前都看看能不能用 brew 啊！</mark>（很多包/软件都支持 brew 安装）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew search &lt;软件名&gt;</span></span><br></pre></td></tr></table></figure><p>查看 brew 安装的某个包所在路径</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew ls &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure><h3 id="services-utility"><a class="markdownIt-Anchor" href="#services-utility"></a> services utility</h3><p>brew services are really useful for managing system services, type <code>$ brew services --help</code> for more info.</p><h4 id="查看所有的已启用的服务"><a class="markdownIt-Anchor" href="#查看所有的已启用的服务"></a> 查看所有的已启用的服务</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew services list</span></span><br></pre></td></tr></table></figure><p>可以用来检查某些包<sub>如Tomcat</sub>的运行情况（从而判断是否已正确安装）</p><h3 id="cellar-包安装路径"><a class="markdownIt-Anchor" href="#cellar-包安装路径"></a> Cellar 包安装路径</h3><p>Homebrew 安装的包在 <code>/usr/local/Cellar/</code> 下</p><p>Homebrew keeps packages (known as <strong>kegs</strong>) in the <strong>Cellar</strong>, where you can check config and data files. It is a directory located at:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> ls /usr/<span class="built_in">local</span>/Cellar/</span></span><br></pre></td></tr></table></figure><p>有时因为要指定某个包的执行程序<sub>如Tomcat等</sub>来启动，需要填写安装路径，可以这样查找：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew ls &lt;package-name&gt;</span></span><br></pre></td></tr></table></figure><h1 id="homebrew-dupes"><a class="markdownIt-Anchor" href="#homebrew-dupes"></a> homebrew-dupes</h1><blockquote><p>System duplicate formulae for the Homebrew package manager  —— <a href="https://github.com/Homebrew/homebrew-dupes" target="_blank" rel="noopener">homebrew-dupes</a></p></blockquote><p>因为 homebrew 默认的措施是：not to offer duplicates for system tools。所以当我们需要安装像 <code>grep</code>（系统自带版本太低）等系统工具时就要用到 <code>homebrew-dupes</code> 这个 repository 以作替代</p><h2 id="槽点"><a class="markdownIt-Anchor" href="#槽点"></a> 槽点</h2><p>安装 <code>MySQL</code> 就不要用 <code>Homebrew</code> 了，多台机器上试验过，会存在问题。还是推荐用官网 dmg 安装</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Homebrew 是 Mac OS X 上的软件包管理系统，使用它可以方便地安装、更新许多软件（“无人值守”~自动化）。称之为“ Mac 必备神器”一点也不为过。&lt;/p&gt;
&lt;h2 id=&quot;homebrew&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
      <category term="Mac" scheme="https://hmgqzx.github.io/wiki/categories/Mac/"/>
    
    
  </entry>
  
  <entry>
    <title>Python 数据持久化</title>
    <link href="https://hmgqzx.github.io/wiki/Python/Python%20%E6%95%B0%E6%8D%AE%E6%8C%81%E4%B9%85%E5%8C%96/"/>
    <id>https://hmgqzx.github.io/wiki/Python/Python 数据持久化/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="http://brieflyx.me/2015/python-module/python-data-persistence/" target="_blank" rel="noopener">Python 数据持久化方式——JSON与Pickle - BrieflyX’s Base</a></p><p><a href="https://hmgqzx.github.io/wiki/Python/pickle">pickle| Hmgqzx’s Wiki</a></p><h2 id="json-和-pickle-的比较"><a class="markdownIt-Anchor" href="#json-和-pickle-的比较"></a> JSON 和 Pickle 的比较</h2><ul><li>JSON是文本形式的存储，Pickle则是二进制形式（至少常用二进制）</li><li>JSON是人可读的，Pickle不可读</li><li>JSON广泛应用于除Python外的其他领域，Pickle是Python独有的。</li><li>JSON只能dump一些python的内置对象，<strong>Pickle可以存储几乎所有对象</strong>。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;参考&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#参考&quot;&gt;&lt;/a&gt; 参考&lt;/h2&gt;
&lt;p&gt;&lt;a href=&quot;http://brieflyx.me/2015/python-module/python-data-persistence/&quot;
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Sublime Text 插件</title>
    <link href="https://hmgqzx.github.io/wiki/Sublime%20Text/%E6%8F%92%E4%BB%B6/Sublime%20Text%20%E6%8F%92%E4%BB%B6/"/>
    <id>https://hmgqzx.github.io/wiki/Sublime Text/插件/Sublime Text 插件/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><blockquote><p>写这篇之前已经安装几个不错的插件，因为熟悉了所以没有记录在这里——包括 package control的配置等；建议参考如下链接</p></blockquote><p><a href="https://www.gitbook.com/book/gongwenyi/sublime-text3-plugins/details" target="_blank" rel="noopener">sublime text3 常用插件 · GitBook</a></p><p><a href="http://www.jeffjade.com/2015/12/15/2015-04-17-toss-sublime-text/#two" target="_blank" rel="noopener">如何优雅地使用Sublime Text | 晚晴幽草轩</a></p><p><a href="https://blog.guowenfh.com/2015/12/26/SublimeText/" target="_blank" rel="noopener">一个前端程序猿的Sublime Text3的自我修养 | 三省吾身丶丶</a></p><p><a href="https://github.com/jikeytang/sublime-text#plugins" target="_blank" rel="noopener">jikeytang/sublime-text: sublime-text</a></p><h1 id="我近期尝试中的其他插件"><a class="markdownIt-Anchor" href="#我近期尝试中的其他插件"></a> 我近期尝试中的其他插件</h1><h3 id="advancednewfile-快速新建文件"><a class="markdownIt-Anchor" href="#advancednewfile-快速新建文件"></a> AdvancedNewFile 快速新建文件</h3><ul><li>假设有文件夹<code>file</code>。我们正在输入代码，又想在新的子目录下新建html文件的话用传统方式得很多步，新建目录，新建文件，保存等等等。</li><li>但是有了该插件之后，事情就变得简单了许多，只需要按下<code>Ctrl+Shift+N</code>，输入文件夹以及文件名，你就会看到如下效果:（回车，你会发现已经子目录下的文件已经新建完成了！）</li></ul><blockquote><p>还没配置好,不太会用</p></blockquote><h3 id="html-css-js-prettify-代码格式化"><a class="markdownIt-Anchor" href="#html-css-js-prettify-代码格式化"></a> HTML-CSS-JS Prettify 代码格式化</h3><p>其实有了这个代码格式化插件，就可以删除上面的代码格式化插件了。因为功能确实强大！</p><ul><li><a href="https://packagecontrol.io/packages/HTML-CSS-JS%20Prettify" target="_blank" rel="noopener">官网插件配置</a></li><li><a href="http://frontenddev.org/article/sublime-does-text-three-plug-ins-html-and-css-js-prettify.html" target="_blank" rel="noopener">FED社区：sublime text 3 插件：HTML-CSS-JS Prettify</a></li></ul><p>其实我把官网的配置趴下来之后就改了两个地方：</p><ul><li><code>&quot;selector_separator_newline&quot;: false</code>： 不需要每个CSS选择器单独占一行</li><li><code>&quot;allowed_file_extensions&quot;: [&quot;..这是老的，新增在--&gt;&quot;,&quot;vue&quot;],</code>：将<code>vue</code>的组件当成<code>html</code>来进行格式化</li><li>默认快捷键：<code>cmd+Shift+H</code></li></ul><p>###liveReload 文件保存浏览器即时刷新</p><blockquote><p>该插件在window下，有很多问题会导致不能使用，mac下可以正常使用</p></blockquote><ul><li>需安装对应的chrome插件：<a href="https://chrome.google.com/webstore/detail/livereload/jnihajbhpnppcggbcgedagnkighmdlei" target="_blank" rel="noopener">chrome商店下载</a>，完成后需勾选允许访问文件网址</li><li>为了避免每一次启动实时刷新在sulime里面启动一遍插件，可在插件设置中增加如下字段：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;enabled_plugins&quot;: [</span><br><span class="line">        &quot;SimpleReloadPlugin&quot;,</span><br><span class="line">        &quot;SimpleRefresh&quot;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时就只需要在浏览器端点一下小圆圈就好了</p><h3 id="filediffs-比较文件差异"><a class="markdownIt-Anchor" href="#filediffs-比较文件差异"></a> FileDiffs 比较文件差异</h3><blockquote><p>手下的几个码农的代码风格与自己并不相同，经常代码汇总过来我都不知道他们改了什么，这个插件还是很给力的。</p></blockquote><h3 id="sidebar"><a class="markdownIt-Anchor" href="#sidebar"></a> sidebar</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    //borwser preview.</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;keys&quot;: [&quot;f2&quot;],</span><br><span class="line">        &quot;command&quot;: &quot;side_bar_files_open_with&quot;,</span><br><span class="line">        &quot;args&quot;: &#123;</span><br><span class="line">            &quot;paths&quot;: [],</span><br><span class="line">            &quot;application&quot;: &quot;/Applications/Google Chrome.app&quot;,</span><br><span class="line">            &quot;extensions&quot;: &quot;.html&quot;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>ColorPick</strong></p><p>快捷键设置</p><p><code>/Users/me/Library/Application Support/Sublime Text 3/Packages/ColorPick/Default (OSX).sublime-keymap</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;参考&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#参考&quot;&gt;&lt;/a&gt; 参考&lt;/h1&gt;
&lt;blockquote&gt;
&lt;p&gt;写这篇之前已经安装几个不错的插件，因为熟悉了所以没有记录在这里——包括 package control的配置等；建议参
      
    
    </summary>
    
      <category term="Sublime Text" scheme="https://hmgqzx.github.io/wiki/categories/Sublime-Text/"/>
    
      <category term="插件" scheme="https://hmgqzx.github.io/wiki/categories/Sublime-Text/%E6%8F%92%E4%BB%B6/"/>
    
    
  </entry>
  
  <entry>
    <title>Pyenv —— Python版本管理工具</title>
    <link href="https://hmgqzx.github.io/wiki/Python/Python%20%E8%99%9A%E6%8B%9F%E7%8E%AF%E5%A2%83/"/>
    <id>https://hmgqzx.github.io/wiki/Python/Python 虚拟环境/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>pyenv可以帮助你建立多个版本的 python 环境，它们相互隔离，不会污染到系统自带的 Python（ pip 安装的包也是在各自目录下的）</p><h1 id="安装"><a class="markdownIt-Anchor" href="#安装"></a> 安装</h1><h2 id="安装-pyenv"><a class="markdownIt-Anchor" href="#安装-pyenv"></a> 安装 pyenv</h2><p><a href="https://github.com/yyuu/pyenv#installation" target="_blank" rel="noopener">pyenv 项目主页#安装步骤</a></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install pyenv</span><br></pre></td></tr></table></figure><h4 id="添加环境变量"><a class="markdownIt-Anchor" href="#添加环境变量"></a> 添加环境变量</h4><p><code>PYENV_ROOT</code>指向pyenv检出的根目录，并向<code>$PATH</code>添加<code>$PYENV_ROOT/bin</code>以提供访问<code>pyenv</code>这条命令的路径(这里的shell配置文件依不同SHELL而需作修改,如bash：<code>~/.bash_profile</code>，Zsh：<code>~/.zshrc</code> ）</p><h5 id="zsh"><a class="markdownIt-Anchor" href="#zsh"></a> ZSH</h5><p>用 brew 安装的话，配置好环境变量的了（我自己又按手动方法在 zsh 里加了环境变量）</p><p>After installation, you’ll still need to add</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">eval "$(pyenv init -)"</span><br><span class="line">eval "$(pyenv virtualenv-init -)"</span><br></pre></td></tr></table></figure><p>to your profile (as stated in the caveats). You’ll only ever have to do this once.</p><hr><p><a href="https://github.com/yyuu/pyenv#installation" target="_blank" rel="noopener">pyenv 项目主页#安装步骤</a></p><ol><li><strong>Define environment variable PYENV_ROOT</strong> to point to the path where pyenv repo is cloned and add <code>$PYENV_ROOT/bin</code> to your <code>$PATH</code> for access to the <code>pyenv</code> command-line utility.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 我的 zsh 将环境变量放在另一个文件（env.sh）中，在那里添加环境变量就可以了</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PYENV_ROOT="$HOME/.pyenv"'</span> &gt;&gt; ~/.zshrc</span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'export PATH="$PYENV_ROOT/bin:$PATH"'</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>Add pyenv init to your shell</strong> to enable shims and autocompletion. Please make sure <code>eval &quot;$(pyenv init -)&quot;</code>is placed toward the end of the shell configuration file since it manipulates <code>PATH</code> during the initialization.</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用自动完成功能，要将配置写在 shell configuration file 末尾</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><ol start="3"><li><strong>Restart your shell so the path changes take effect.</strong></li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">exec</span> <span class="variable">$SHELL</span> <span class="comment"># 重启shell(因为修改了$PATH)</span></span><br></pre></td></tr></table></figure><h2 id="安装-pyenv-virtualenv"><a class="markdownIt-Anchor" href="#安装-pyenv-virtualenv"></a> 安装 pyenv-virtualenv</h2><p><a href="https://github.com/yyuu/pyenv-virtualenv#installation" target="_blank" rel="noopener">pyenv-virtualenv 项目主页#安装步骤</a></p><p>使用 brew 安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install pyenv-virtualenv</span><br></pre></td></tr></table></figure><p><strong>Add pyenv virtualenv-init to your shell</strong> to enable auto-activation of virtualenvs. This is entirely optional but pretty useful. See “Activate virtualenv” below.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用自动完成等功能，直接将下面这句写在 shell configuration file (~/.zshrc) 末尾就可以</span></span><br><span class="line"><span class="built_in">eval</span> <span class="string">"<span class="variable">$(pyenv virtualenv-init -)</span>"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用命令的话是下面那样：</span></span><br><span class="line">$ <span class="built_in">echo</span> <span class="string">'eval "$(pyenv init -)"'</span> &gt;&gt; ~/.zshrc</span><br></pre></td></tr></table></figure><h1 id="使用"><a class="markdownIt-Anchor" href="#使用"></a> 使用</h1><h2 id="pyenv-使用"><a class="markdownIt-Anchor" href="#pyenv-使用"></a> pyenv 使用</h2><p><a href="https://github.com/yyuu/pyenv/blob/master/COMMANDS.md#command-reference" target="_blank" rel="noopener">命令参考 · yyuu/pyenv</a></p><p><code>pyenv install</code>安装指定的版本</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv install -v 2.7.13 <span class="comment">#添加-v参数用于显示细节</span></span><br><span class="line">$ pyenv <span class="built_in">rehash</span>  <span class="comment">#安装新版本的python或者其他二进制包后都需要运行，或者重启shell</span></span><br></pre></td></tr></table></figure><h2 id="pyenv-virtualenv-使用"><a class="markdownIt-Anchor" href="#pyenv-virtualenv-使用"></a> pyenv-virtualenv 使用</h2><h4 id="创建"><a class="markdownIt-Anchor" href="#创建"></a> 创建</h4><p>创建虚拟环境–<code>pyenv virtualenv 版本号 虚拟环境名</code>。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> pyenv virtualenv 3.5.1 venv-3.5.1</span></span><br></pre></td></tr></table></figure><h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv uninstall my-virtual-env</span><br><span class="line"><span class="comment"># 删除时会弹出对话框，输入‘y’确认</span></span><br><span class="line"><span class="comment"># 或者你可以直接删除 ~/.pyenv/versions中的相应目录</span></span><br></pre></td></tr></table></figure><h4 id="仅查看python的虚拟环境"><a class="markdownIt-Anchor" href="#仅查看python的虚拟环境"></a> 仅查看python的虚拟环境</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pyenv virtualenvs</span><br></pre></td></tr></table></figure><h4 id="自动激活"><a class="markdownIt-Anchor" href="#自动激活"></a> 自动激活</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir myproject</span><br><span class="line">$ <span class="built_in">cd</span> myproject</span><br><span class="line">$ pyenv <span class="built_in">local</span> myenv</span><br></pre></td></tr></table></figure><h4 id="手动激活"><a class="markdownIt-Anchor" href="#手动激活"></a> 手动激活</h4><p>You can also activate and deactivate a pyenv virtualenv manually:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pyenv activate &lt;name&gt;</span><br><span class="line">pyenv deactivate</span><br></pre></td></tr></table></figure><h1 id="管理版本的其他简单方法"><a class="markdownIt-Anchor" href="#管理版本的其他简单方法"></a> 管理版本的其他简单方法</h1><ul><li>不要更改系统默认的python2（因为改了可能会导致系统某些用python2写的系统文件出错），每次执行时加版本号，<code>python</code> 就是2的版本，<code>python3</code>就是3的版本；用 <code>pip</code>会安装包到 2 的版本，用<code>pip3</code>会安装到 3的版本。</li><li>直接在自己写的程序里指定环境变量，如 <code>#!/usr/bin/env python3</code>。</li></ul><h1 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h1><p><a href="http://www.jianshu.com/p/9ebce087da1f" target="_blank" rel="noopener">python虚拟开发环境配置 - 简书</a> #配置好了 #相关使用可以再参考这个</p><p><a href="http://www.jianshu.com/p/1842a363257c" target="_blank" rel="noopener">Python多版本管理器pyenv和虚拟环境pyenv-virtualenv的安装设置 - 简书</a></p><p><a href="http://www.10tiao.com/html/357/201604/2247483759/1.html" target="_blank" rel="noopener">使用pyenv搭建python虚拟环境 - 运维之美 | 十条</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;pyenv可以帮助你建立多个版本的 python 环境，它们相互隔离，不会污染到系统自带的 Python（ pip 安装的包也是在各自目录下的）&lt;/p&gt;
&lt;h1 id=&quot;安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#安装&quot;&gt;&lt;/a&gt; 安装&lt;
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Python collections模块</title>
    <link href="https://hmgqzx.github.io/wiki/Python/collections%E6%A8%A1%E5%9D%97/"/>
    <id>https://hmgqzx.github.io/wiki/Python/collections模块/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="collections模块"><a class="markdownIt-Anchor" href="#collections模块"></a> collections模块</h1><h2 id="ordered-dict"><a class="markdownIt-Anchor" href="#ordered-dict"></a> Ordered Dict</h2><p><a href="http://www.zlovezl.cn/articles/collections-in-python/" target="_blank" rel="noopener">不可不知的Python模块: collections | piglei’s blog</a></p><p>在Python中，dict这个数据结构由于hash的特性，是无序的</p><p>内置字典：</p><p>可以看到，在迭代时是“乱”序的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">a = dict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line">print(a)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> a.items():</span><br><span class="line">    print(k, v)</span><br><span class="line"></span><br><span class="line"><span class="comment"># run:</span></span><br><span class="line">&#123;<span class="string">'three'</span>: <span class="number">3</span>, <span class="string">'four'</span>: <span class="number">4</span>, <span class="string">'one'</span>: <span class="number">1</span>, <span class="string">'two'</span>: <span class="number">2</span>&#125;</span><br><span class="line">three <span class="number">3</span></span><br><span class="line">four <span class="number">4</span></span><br><span class="line">one <span class="number">1</span></span><br><span class="line">two <span class="number">2</span></span><br></pre></td></tr></table></figure><p>OrderedDict：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"></span><br><span class="line">b = OrderedDict(one=<span class="number">1</span>, two=<span class="number">2</span>, three=<span class="number">3</span>, four=<span class="number">4</span>)</span><br><span class="line">print(b)</span><br><span class="line"><span class="keyword">for</span> k, v <span class="keyword">in</span> b.items():</span><br><span class="line">    print(k, v)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># run:</span></span><br><span class="line">OrderedDict([(<span class="string">'one'</span>, <span class="number">1</span>), (<span class="string">'two'</span>, <span class="number">2</span>), (<span class="string">'four'</span>, <span class="number">4</span>), (<span class="string">'three'</span>, <span class="number">3</span>)])</span><br><span class="line">one <span class="number">1</span></span><br><span class="line">two <span class="number">2</span></span><br><span class="line">four <span class="number">4</span></span><br><span class="line">three <span class="number">3</span></span><br></pre></td></tr></table></figure><p>顺序以添加顺序为准，和修改的顺序无关。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;collections模块&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#collections模块&quot;&gt;&lt;/a&gt; collections模块&lt;/h1&gt;
&lt;h2 id=&quot;ordered-dict&quot;&gt;&lt;a class=&quot;markdownIt
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
      <category term="Python模块" scheme="https://hmgqzx.github.io/wiki/tags/Python%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>pickle</title>
    <link href="https://hmgqzx.github.io/wiki/Python/pickle/"/>
    <id>https://hmgqzx.github.io/wiki/Python/pickle/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>有时，我们需要将一个Python对象保存到硬盘里，这时就可以用 pickle 来将其序列化为一个字节流，以便保存。（在需要的时候，可以 load to 重建对象）</p><p>pickle 是内置的</p><h2 id="参考"><a class="markdownIt-Anchor" href="#参考"></a> 参考</h2><p><a href="http://python3-cookbook.readthedocs.io/zh_CN/latest/c05/p21_serializing_python_objects.html" target="_blank" rel="noopener">5.21 序列化Python对象 — python3-cookbook 2.0.0 文档</a> #解释得非常详细</p><p><a href="https://docs.python.org/3/library/pickle.html" target="_blank" rel="noopener">12.1. pickle — Python object serialization — Python 3.6.1 documentation</a></p><p><a href="http://www.cnblogs.com/evening/archive/2012/04/01/2427876.html" target="_blank" rel="noopener">pickle模块介绍 - Goodpy - 博客园</a></p><p><a href="https://blog.oldj.net/2010/05/26/python-pickle/" target="_blank" rel="noopener">Python中使用pickle持久化对象 – oldj’s blog</a> #评论中的内容不错</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;有时，我们需要将一个Python对象保存到硬盘里，这时就可以用 pickle 来将其序列化为一个字节流，以便保存。（在需要的时候，可以 load to 重建对象）&lt;/p&gt;
&lt;p&gt;pickle 是内置的&lt;/p&gt;
&lt;h2 id=&quot;参考&quot;&gt;&lt;a class=&quot;markdownIt
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Sublime Text 主题</title>
    <link href="https://hmgqzx.github.io/wiki/Sublime%20Text/Sublime%20Text%20%E4%B8%BB%E9%A2%98/"/>
    <id>https://hmgqzx.github.io/wiki/Sublime Text/Sublime Text 主题/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>平时我没有怎么折腾主题，你可以在 <a href="https://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai" target="_blank" rel="noopener">TmTheme Editor</a> 找到很多不同配色的主题，并且可以再加自定义后下载</p><h2 id="我使用的"><a class="markdownIt-Anchor" href="#我使用的"></a> 我使用的</h2><p>我一直使用着默认的 Monokai，往年不变……</p><p><a href="https://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai" target="_blank" rel="noopener">Monokai • TmTheme Editor</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;平时我没有怎么折腾主题，你可以在 &lt;a href=&quot;https://tmtheme-editor.herokuapp.com/#!/editor/theme/Monokai&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;TmTheme Editor&lt;/a&gt;
      
    
    </summary>
    
      <category term="Sublime Text" scheme="https://hmgqzx.github.io/wiki/categories/Sublime-Text/"/>
    
    
  </entry>
  
  <entry>
    <title>pyc文件</title>
    <link href="https://hmgqzx.github.io/wiki/Python/pyc%E6%96%87%E4%BB%B6/"/>
    <id>https://hmgqzx.github.io/wiki/Python/pyc文件/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.zhihu.com/question/30296617" target="_blank" rel="noopener">Python什么情况下会生成pyc文件？ - 知乎</a></p><p>简单来说，&quot;.pyc&quot; 就是编译过的 “.py” 源代码</p><h2 id="具体过程"><a class="markdownIt-Anchor" href="#具体过程"></a> 具体过程</h2><p>如果 Python 进程在机器上拥有写入权限，那么它将把程序的字节码保存为一个以 .pyc 为扩展名的文件。当程序运行之后，你会在那些源代码的附近（也就是说同一个目录下）看到这些文件</p><h2 id="作用"><a class="markdownIt-Anchor" href="#作用"></a> 作用</h2><p>Python这样保存字节码是作为一种启动速度的优化。下一次运行程序时，如果你在上次保存字节码之后没有修改过源代码的话，Python将会加载.pyc文件并<code>跳过编译</code>这个步骤。当Python必须重编译时，它会自动检查源文件和字节码文件的时间戳：如果你又保存了源代码，下次程序运行时，字节码将自动重新创建。</p><p>A program <code>doesn't run any faster</code> when it is read from a ‘.pyc’ or ‘.pyo’ file than when it is read from a ‘.py’ file; the only thing that’s faster about ‘.pyc’ or ‘.pyo’files is the speed with which they are <code>loaded</code>.</p><p>.pyc 文件的作用是提高 load 的速度</p><p>When a script is run by giving its name on the command line, the bytecode for the script is never written to a ‘.pyc’ or ‘.pyo’ file. Thus, the startup time of a script may be reduced by moving most of its code to a module and having a small bootstrap script that imports that module. It is also possible to name a ‘.pyc’ or ‘.pyo’file directly on the command line.</p><p>在 import 别的 py 文件时，那个 py 文件会被存一份 pyc 加速下次装载。而主文件因为只需要装载一次就没有存 pyc。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/30296617&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Python什么情况下会生成pyc文件？ - 知乎&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;简单来说，&amp;quot;.pyc&amp;quo
      
    
    </summary>
    
      <category term="Python" scheme="https://hmgqzx.github.io/wiki/categories/Python/"/>
    
    
  </entry>
  
  <entry>
    <title>Zsh 安装</title>
    <link href="https://hmgqzx.github.io/wiki/Zsh/zsh-%E5%AE%89%E8%A3%85/"/>
    <id>https://hmgqzx.github.io/wiki/Zsh/zsh-安装/</id>
    <published>2018-03-01T18:13:19.000Z</published>
    <updated>2018-03-01T18:13:19.000Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Zsh" scheme="https://hmgqzx.github.io/wiki/categories/Zsh/"/>
    
    
  </entry>
  
</feed>
