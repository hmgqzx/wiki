{"pages":[{"title":"About","date":"2018-03-01T18:50:13.000Z","path":"about/index.html","text":""},{"title":"Categories","date":"2018-03-01T18:50:13.000Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2018-03-01T18:50:13.000Z","path":"tags/index.html","text":""}],"posts":[{"title":"","date":"2018-05-13T09:01:36.000Z","path":"心理学/哈佛幸福课/课程本身/课程目录/","text":"可以挑对应感兴趣的先看；另外，嫌视频拖沓，还可以跳过视频看字幕文件，网上有。 目录 [第1集]什么是积极心理学？ [第2集]为什么要学习积极心理学？ [第3集]幸福是一种随机现象吗？ [第4集]积极的环境能改变人 [第5集]环境的力量 [第6集]乐观主义 [第7集]逆境还是机遇？ [第8集]感激 [第9集]积极情绪 [第10集]如何去改变 [第11集]养成良好习惯 [第12集]写日记 [第13集]面对压力 [第14集]过犹不及 [第15集]完美主义 [第16集]享受过程 [第17集]运动与冥想 [第18集]睡眠、触摸和爱情的重要性 * [第19集]如何让爱情天长地久 [第20集]幸福与幽默 [第21集]爱情和自尊 [第22集]自尊与自我实现 [第23集]收获交流","tags":[],"categories":[{"name":"心理学","slug":"心理学","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/"},{"name":"哈佛幸福课","slug":"心理学/哈佛幸福课","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/"},{"name":"课程本身","slug":"心理学/哈佛幸福课/课程本身","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/课程本身/"}]},{"title":"幸福课 第十八讲","date":"2018-05-13T08:45:29.000Z","path":"心理学/哈佛幸福课/字幕内容/第十八讲/","text":"睡眠、触摸和爱情的重要性 嗨， 早上好，下面我们开始今天的内容。 今天我们将讲完身心疗法，我们将会讲到睡眠，讲到触摸。然后我们将继续到一个本人绝对很喜欢的主题，就是爱情。 我们会谈到人际关系。 这个是我们上次课讲完的，我们讲了身心的联系，我们讲了运动的重要性，我们讲了正念冥想的重要性。它是如何实实在在地转化，改变我们大脑的形态，使得前额皮质的左半边相对于右半边要更为活跃。 接着我们讲了呼吸的重要性和如何呼吸， 如果我们能在一天中有计划地进行深呼吸，就能真正的改变我们的生活。不管是等红灯时，还是早上醒来的第一件事，还是我们进入教室时或是就现在，深呼吸，深深的腹式呼吸。让我们从或战或逃反应改变为放松反应。 记住我们在本课程一开始就说过的一句话，那就是，我不会教给你们很多新的东西，这就是一个很明显的例子。你们都知道怎么深深地，正确地呼吸，你们从出生那天或出生那刻起就知道了。 但多年以来，随着压力的不断升级并缺乏恢复，多年来承受着逐渐增加的压力，逐渐加快的现代生活速度，我们给自己施加了限制，我们一直承受着压力，却没人教过我们如何恢复。 我们现在需要做的是逐渐去除这些限制，回到我们生来就喜欢的深度呼吸，当我们这么做时，我们扭转了或战或逃反应，并创造了一个由平常的幸福和深呼吸组成的生长螺旋，它会带来更多平常的幸福和更多的深呼吸。 下一个我想谈论的主题，大家不要在课堂上应用，回去再应用。 这主题是睡眠。 下面是一些关于睡眠的数据。在爱迪生发明电灯泡之前，人们每24小时就平均睡10小时，每天10小时，大多是在夜里睡觉，但有时也在白天睡觉，现今平均每人在工作日期间有6.9小时的睡眠时间，周末则是7个半小时，这是全国的平均数据。至于大学生，数据则有些不同， 有多少人—这样我们来举手表决，你们除了我之外有多少人晚上能睡足8小时的？ 好的， 肯定不止这些人，没举手的可能睡着了。 全国平均数据是：18岁到29岁的人中大约有4分之一的人有8小时的睡眠时间，75%的人没有足够的睡眠，有些人需要7小时的睡眠，有些人需要9小时，有些人16小时，不。平均需要睡眠时间是8小时，我们的睡眠时间都就在这个数上下波动，很少有人需要很少的睡眠，也很少有人真的需要很多的睡眠。 那我们如何知道自己需要多长的睡眠呢？你什么时候自然醒？ 我们什么时候睡觉，什么时候疲劳？我们可以这样估计睡眠时间，大约是8小时左右。 现在有些人会说“好吧，对我来说要睡8小时的话，我一天要有30小时才行，没有足够的时间去… 那是一天的三分之一啊， 太多了，我腾不出那么多时间”。你可以腾出那么多时间，如果你把它视作一种投资的话，如果你把它当做一件优先要做的事的话。 就像是商人去谈生意说“在这笔交易上我负担不起10万美元”，你要是白送出去自然负担不起，但是你会收到每年20%投资的回报，这就不一样了，也许我可以负担得起10万，如果投资是有回报的话。 睡觉也是同样的道理，这些8小时的投资有很大的回报，许多研究都表明了睡觉的重要性，和我们把它优先考虑的原因，所以让我简要地列出来几点。首先，显著增强身体的免疫系统。我是说，我们都知道当我们睡得很少，我们会或者我们在考试周结束后更容易不舒服，这当然也和压力有关，但睡眠本身，充足的睡眠增强了我们的免疫系统，精力水平。 有很多理论认为睡5个小时比7个小时好，由于某些循环。是的，这些循环存在， 但普遍来说，在一定程度上睡多一些更好，如果我们一天睡眠时间超过10个或者11个小时，有时可能是因为生活上碰到困难，有时可能是因为抑郁，抑郁会导致失眠或者另一个极端，睡得太多。 但正如我所说，如果你一天睡10个小时，这可能意味着你需要一天睡10个小时，而不是说你抑郁了，而不是说你有什么毛病。 不过看一看，看看你整个生命中，你平均需要多好睡眠时间？ 在某种程度上说越多的睡眠通常越好。我们讲过身体运动，当我们不运动时，我们的体重就会超出基准水平，超出天生的或者基因决定的我们的自然状态。这就是为什么越来越多不配合锻炼的节食减肥失败，对于睡眠也是同样的道理。如果我们的睡眠不充足，我们会超出我们的基准体重，实际上是相关的，不只是相关，而是因果关系， 缺乏睡眠导致体重增加。如果我们尝试节食，我们又在和自己的天性作斗争，仅仅是充足的睡眠时间就能有效地改善我们的体重控制。驾驶技术，每年有平均10万起车祸是由于缺乏睡眠引起的。在美国一年有4万人受伤，1500人死亡，因为缺乏睡眠。 受害人中有的人是没睡好的司机，有的是被没睡好的司机害的。在工作场所，日复一日，由于缺乏睡眠引起的事故估计造成了1000亿美元的经济损失。认知功能，无论是创造力，生产力还是记忆力，都会在我们不睡时受损，这就是为什么睡眠是如此重要的一项投资。 你知道我们经常说“让我再熬两个小时学习”，然而实际上你会完成更多的学习，你会把学习材料记得更好，更有创造性，如果你得到这额外两小时的睡眠的话，投资的良好回报。 我们经常能在婴儿身上学到很多关于自己的东西，为什么？ 因为婴儿不压抑情绪。 当婴儿没有得到充足的睡眠会怎样？ 他们会变得暴躁，会哭，会很痛苦，会很焦虑。 我是说我们知道，我们学会了，不要看起来像我们看到的那个婴儿一样这一刻哭，下一刻笑，在我们讲为人之许可时讲过。所以我们压抑这些情绪，但我们依旧有这些情绪，同样，如果我们没有得到充足的睡眠，我们的导火索就变短了，那时候我们就更容易大发脾气 ，我们就会感到焦虑，生理水平上变得不健康，当然心理上也不健康。 睡眠对抑郁的影响更大，原因有二。 第一个原因是：缺乏睡眠容易导致抑郁，是因为在生理水平来说，正如你看到的婴儿，他累了的时候就变得暴躁，我们在累了的时候也暴躁，这只是纯生理层面上对睡眠的需要。 第二个原因是：有一点点微妙也有一点点有趣。晚上，我们的大脑要处理很多我们白天经历的事情，它经常解决我们白天经历过的未解决的问题，这就是为什么，你知道，你带着一个数学问题入睡，经常你会在早上醒来是得到解答，但不只是数学问题在晚上得到解答，还有其他人际问题，内心里的问题要在整个晚上解决。比如说梦，通常我们晚上做得比较早的梦，都是比较不愉快的梦，我们在夜里晚些时候做的梦更容易是愉快的梦，为什么？ 因为晚上的第一部分是我们解决问题的时候，我们在解决问题，有些是有意识的，有些问题则没有意识，我们解决了一些问题之后，我们的梦就变得更为愉快了，这并不意味着你在上午11点半就不会做噩梦。 他的意思是，你睡眠初期做噩梦的可能性更高。当我们不给自己机会去“完成梦想”，不可能在一夜睡眠中完全解决问题，不可能我们醒来的时候问题解决了，这个问题还在，不管你意没意识到，问题还没解决，我们要为此付出代价。随着时间过去，我们有许多未解决的问题，特别是当他们被压抑或抑制的时候，那时候我则更有可能变得抑郁，所以为了生理的睡眠需要睡觉，同样也为了心理的睡眠需要睡觉。现在大家都谈论美容觉，没什么？ 因为那是被证明的，是显而易见的。如果一个人24 36小时没睡过，你能看得出，眼睛周围是有黑眼圈的，黑眼圈可以掩藏起来，但你仍然可以看出一个人是否哀弱。睡觉不只是为了美觉还是为了幸福，更是为了智力。 因为我们知道没有睡觉的人，比如说24小时没睡，24小时后他们的智商降低10个百分点甚至更甚，所以毫无疑问睡觉能保持美丽，不仅如此，睡觉还能保持幸福和智力，在每个层面上睡觉都是个好投资。 下面是些非常简要的睡眠小贴士。第一件事，一天差不多睡8小时（ more or less 8 hours），找到适合你的睡眠时间，你可以晚上睡7小时，午后1小时，或者晚上6小时，午后2小时。但总的来说，我们一天需要8小时，如果你一天没有8小时睡眠的话，你生命里有些时候确实没法做到，比如考试周，那时候睡8小时觉可能有些困难，或者其他压力时期，或者你有小孩的时候，那么怎么办？ 小睡。小睡实际上被证明及其有效，白天打个瞌睡，比如睡个20分钟，虽没有晚上多睡两小时的效果好，但也比白天不睡要强得多，所以小睡也是非常好的投资，你知道白天有效地小睡个15 20分钟在一定程度上虽不及夜晚充足的睡眠，但在一定程度上恢复了某些认知和情绪能力。==许多人入睡有困难，是因为他们吃得太晚了或者锻炼得太晚了，你知道，血液依然流得很快，心脏依然跳得很快，他们很精神。==所以不要在睡前吃太多…有些人是可以边吃这边睡着的，但对于某些人，吃了太多，是很难入睡的，所以注意点自己的饮食，注意下自己的锻炼安排，不要在太晚的时候锻炼。还有患有失眠症的人，确实有很大数量的人有失眠症，这些人不要强自己所难，我想这个教室里没有哪个人没遇过偶尔入睡困难的情况，再考SAT前，在考前，在约会前，这是很正常的。 你知道，在过去总的来说，我没有入睡难的问题，我10点上床，然后就不省人事了。但有时，在困难时期，压力时期，我遇到问题的时候，最初的时候我告诉自己“好吧，现在睡觉，现在睡觉，睡觉”对吧？就像是“别焦虑，别焦虑”一样， 然后你有了幻觉，它阻碍你入睡，不要强自己所难，现在我入眠有困难，我就对自己说“嗯，这是个思考和反省的机会”，常常我会想得烦了就睡着了，不要强自己所难。 最后，你内在的节律是什么？ 如今因为我们有了电灯，因为我们住在室内，而非暴露的小屋和大自然相联系，直接相联系的洞穴。我们把自己从大自然中隔离了出来，我们也为此付出代价，不论是因为我们不需要狩猎和收割，因而锻炼不足而付出代价，还是因为我们不注意，我们不再认识留意或关心自身的内在节律而付出代价。你晚上需要多少时间？ 你是夜猫子还是早起的鸟？ 你需要晚上10点睡觉吗？或者你需要早上5点睡觉吗？ 什么时间适合你？试着去创造一个和你天性需求一致的生活，这并非总是能做到，如果你去上班，在大学里这相对来说这是可能的，你的时间非常有弹性，因为你知道你可以…这堂课是11点半上的，这堂课也被拍了录像，所以如果你想睡到中午，那也没问题，你可以下了课从头看，所以你可以自由安排时间。在你将来工作的时候，或者在你上中学的时候，中学是7点半或者8点上课，你不得不到，还是尽可能地知道认识到自己的内在节律。比如你需要多少睡眠时间，和你什么时候需要睡觉。 关于睡眠有很多研究，很多研讨会和课程，只研究睡眠需求。让我来总结一下William Dement的研究工作，他是斯坦福大学的教授，在他醒着的时候做了很多关于睡眠的研究，“剥夺睡眠对健康和幸福的影响已被研究证明，睡眠剥夺会使认知能力和生理机能受到损害，对心情的影响则更甚。夜晚睡眠不足的人易于感觉不快乐，更紧张，身体虚弱和精神和身体上愈发疲劳，充足的睡眠让我们感觉更好，更快乐，更有精力和活力”。再一次我认为，教室里没有哪个人是不知道这些的，再说一次我们没有教任何新的东西，我只是提醒你们已经知道的东西。 让我们继续下一个主题，和我最爱的主题有关，那就是触摸。美国人普遍，再一次，这个普遍的平均数据，普遍来说属于世界上触觉最迟钝的人。 我们花了很多时间沉浸于我们其他的感觉中，去好餐厅，把我们自己和男朋友用香水喷得香香的。但我们触摸的不够，正像睡眠，像锻炼，像人际关系一样，它是身体的需要，它是人际交往中重要的一部分。 在这一领域中最出色的研究工作是Tiffany Fiedl做的，她本来是按摩治疗师，看到了按摩的功效就去研究了这个课题，拿到她的博士学位，现在是迈阿密大学的教授。她的研究及其他人的研究显示了在人与人的接触中触摸的重要性。例如，对身体健康来说，不论是我们的免疫系统因为触摸而大大增加，还因为缺少足够的触摸而严重地降低。 触摸有助伤口愈合，不需要专业的按摩师，不需要专业的理疗师，简简单单的触摸就可以了。儿童在受到触摸时成长得更好，我们一会会谈到一些研究，一些叹为观止的研究，它关系到身体健康，也关系到精神健康。再一次，儿童的认知发展受到触摸的影响，在心境障碍，饮食失调方面的精神健康常常与缺乏触摸或触摸不足有关。由缺乏触摸引起的抑郁和焦虑可以通过加强触摸得到克服。希望你们现在确信了：触摸能改善性生活，William Masters和Virginia Johnson两位最重要的性治疗师及研究者。他们的研究表明性功能障碍，大部分性功能障碍实际上有70%到95%是可以简单地在触摸的帮助下得到解决的，所以他们所认为的实际上是前戏不应该只是达到目的的手段，他们认为前戏本身也可以是目的，触摸起到的作用本质上来说正是幸福心理学的内容。性，不，那个…我刚才是不是说得很大声？ 好吧，我想是的，好的。 所以幸福心理学的目标就是，记住，让我们从消极达到零点，再让我们从零点达到幸福，所以他们在研究中表明了触摸有助性功能障碍。好的，让我们运行起来，让我们达到这里（负到零），但他们也认为触摸能活跃性生活，所以它不只是解决问题，它还让我们从零点变成活跃。 Martin Seligman有本书，是关于普遍心理干预的，那些起到作用的，那些没有。正如我们在课上讲的大部分干预没有作用，这点我们可以从剑桥萨默维尔研究中得出，一个5年的干预实际上长期看来起到了负面的作用，我们看到那么多自助提供权宜之计的书，他们不起作用。他研究了Williams Masters和Johnson的研究，通过综合分析发现，70%到95%的时间里他们的方法是有用的，再一次，这几乎在社交心理学中或社会科学干预中前所未闻，但它起效了。 触摸是一个需要，如我之前所说，正如… 触摸是一种需要，正如身体锻炼是一种需要，正如吃饭睡觉是需要一样。 这有个关于医院早产婴儿病发的故事，他们发现，早产婴儿病房有一个区域的成功水平要远远高于同病房其他区域，换言之，就是婴儿的身体好得更快，他们更健康了，在后续对他们的长期跟踪里，他们实际上显示出了更好的认知能力和生理发育，他们对此感到很奇怪，他们就像，我是说“可能是因为空气，可能是因为在医院的位置”， 因为其他所有的东西都是一样的，他们吃一样的食物，受到一样的治疗。 有一位医生就特别想弄清楚这个早产婴儿病房的这个区域，有什么对他们的健康那么有帮助，于是他观察了那个地方。一天晚上，他坐在一个看不见的地方听到了一个声音，他看了看，不想被人看到他，一个护士进来了，一个他认识的护士，她在这家医院很长时间了。这个护士走进病房，抱起一个早产婴儿，这是违反医院规定的，因为他们不能被人触摸，他们必须呆在保育箱里，她抱起婴儿，轻轻抚摸他，轻轻地触摸他，跟他讲话，然后把他放下，再走到下一个育儿箱，抱起婴儿，非常温柔地轻抚他，把他放下，她把病房那个区域所有的婴儿都报了，她在她值班时晚上这么晚做这些是因为这是违反规定的，然后她走出去。 这件事衍生了一堆对婴儿的触摸的重要性的研究，特别是对早产婴儿。于是Tiffany Fields做了这个研究，她让早产婴儿在医院里一天做45分钟按摩，非常轻的按摩，他们很幼小，他们发现这些婴儿在医院里增加了47%的体重，一年后，已经出院回家了，他们身体上，认知能力上和运动技能上有了更好的发展，只是因为被更多的触摸了，我们需要触摸，这是先天本能的需求。实际上，有关于触摸剥夺的研究，但并不是在人类身上进行的研究，是在猴子身上进行的研究。Harry Harlow, 非常著名的心理学家，他研究的是一群猴子，他把这些猴子从它们的母亲身边带走，不给任何触摸，其他需求都满足。他发现这些猴子身体上的成长不如其他猴子，他们的认知发育受到了损害，他们表现出自闭症的行为。例如，他们会坐下抬起脚然后摇晃。你见过这场景吗？ 你知道就像在那个达斯汀.霍夫曼演的电影？ “雨人”，在那部电影里，他就坐下来然后这样摇晃， 许多猴子表现出了完全一样的行为，这种摇晃就是自闭症的行为。 残忍的研究，无论是在蚂蚁还是猴子身上， 自然也会在人身上做。 不幸的是，者研究在人身上做过，这是人类实施过的最大的悲剧的自然实验之一， 这个实验是在齐奥塞斯统治下的罗马尼亚完成的，那个残暴的独裁者统治着这个国家直到1989年。他做的一件事就是把许多孩子从父母身边带走，特别是那些父母与政见不同的，那些父母不是“有文化”的共产Party员的，所以他把15万个孩子带到收养所养育，远离他们的父母。现在这些收容所，因为那是个非常平穷的国家，没有钱提供看护，足够的看护，没有钱请足够的工作人员。这些孩子的身体需求得到满足，有食物，水，还能洗澡。但他们并没有得到爱，不是因为那些看护不愿意给他们爱，而是她们没有那个时间。在1989年，战争爆发，齐奥赛斯库被驱逐，这些孩子被从这些收容所里释放，心理学家去收容所里，他们看到的是这个悲剧的自然实验的后果，在身体成长方面，这些孩子中只有3%到10%的人与他们同龄段孩子的体型是相当的，认知发展方面，水平远远低于100的平均智商，运动发育方面同样也由于缺乏触摸而严重受损，许多孩子抱着腿坐着，不停地摇晃，触摸剥夺的影响。 现在触摸是很重要的，再一次，让我们达到这里（负到零），我们在零点，我们很好，问题是我们如何才能向前（到正）？触摸也可以把我们带到那，不只是好，还要非常好，触摸的重要性，Virginia Satir 一位心理学家如是说：“我们一天需要4个拥抱才能存活，我们一天需要8个拥抱才能维持，我们一天需要12个拥抱才能成长”，她是以歌词的形式说出来的，尚没有实质上的研究表明要多少个拥抱…很好，你今天还差11个拥抱，不过… 很好，很好。 不过还有一个关于拥抱的研究，这是Jane Clipman做的研究，属于一个心理干预，很简单一天至少5个拥抱，面对面的拥抱，不是和你的情侣，就是拥抱，拥抱不同的人，朋友，也可以是你的情侣，但这些明确地是和性无关的拥抱。然后她发现4周后这一组的人与对照组不同，对照组的人要写出他们每天读了多少小时的书，对照组的幸福水平明显没有提高，每天拥抱5次的那组却显著提高，她谈论起这个实验时说，对某些人来说，拥抱要困难得多，特别是男人，但即使这样参与这组的男人大部分还是拥抱了。他们可以在运动场上拥抱，他们可以找机会或者想方设法地一天拥抱5次，而这些这么做了的人真的变得更快乐了，我本来想把这作为本周课后的作业，我现在不布置了，但我推荐你们去做，强烈推荐和建议，从现在开始，在你以后的日子里至少5个拥抱，12个更好。 拥抱的好处就是它是双赢的，因为当我们拥抱某人时，我们也被拥抱了，当我们触摸某人时，我们也被触摸了，就像幸福，当我们分享它的时候，他就越来越多，这是个双赢，正正得正的游戏。关于拥抱和触摸有个重要的事要记住，那就是要尊重对方，不是每个人被触摸的时候都会像我们一样感觉良好，或者我们被触摸可能感觉会不舒服，那没有关系，有许多原因。你知道有人可能比较有教养，有人可能只是身体上不习惯，人和人是不同的，有些人更喜欢被触摸，那没关系，这是自然的，所以我们需要尊重别人的界线，也要让别人尊重我们的。 不过总的来说，触摸是很重要的，触摸很好，我们需要变成触觉更敏锐的人，同样，一个触觉更敏锐的社会。 让我来给你们看个例子，就是一些人是如何比别人更喜欢拥抱的， 好的，再一次，这是我们的药方，非常简单。 一周至少4次，一次至少30分钟的身体锻炼。正念冥想，如果你方便的话，每天10或15分钟，如果不方便，至少全天也要有安排地做几个深呼吸。 晚上8小时的睡眠，一天至少5个，最少12个拥抱。这可能是你听说过的最有效力的心理学药方了，它能让我们自然健康状态，我们天生的或者基因决定的水平，幸福水平。 让我们现在继续到另一个主题，下面是我今天想对你们说的。（音乐：Let`s Talk About Love 席琳·迪翁，让我们来谈谈爱， 让我们来谈谈我们，让我们来谈谈生活，让我们来谈谈信任，让我们来谈谈爱。） 好了那么咱们来谈谈爱，被谈论得最多的话题，是让人有感触的话题，到处都在谈论，从餐厅 到卧室，现在就是了，然后也是最受误解的话题。人际关系，亲近的，亲密的关系，无论是和爱人还是家人，还是和亲密的灵魂伴侣，朋友，这些爱都是头号的幸福语言者。我们今天的重点会是下节课也是 情侣关系，但是我们仅仅重点讨论情侣关系，因为在很多方面它是具有代表性的，它包括了其他关系中的许多东西，我们讲的重点也可以应用到亲密的友情家庭关系中去。一开始我给你们看一个电影“偷穿高跟鞋”中的片段，当卡梅隆·迪亚兹向她在电影中结婚的姐姐读了一首优美的诗。（此刻非常圣神的时刻，小姐？这不在婚礼的程序中，因为这是个惊喜，我经常给Rose惊喜，通常她讨厌那惊喜，我想，我希望她喜欢这个，这是E.E.Cummings的一首诗，献给你，“我将你的心带在身上，用我的心将它妥善包藏，天长日久也不会遗忘。无论我前往何方，都有你伴我身旁，即便我独胆成事，那也是出于爱人，你的力量。面对命运我从不恐慌，只因你就是我命运的方向。世间万物于我皆如浮云，只因你在我眼中就是天地四方。这秘密无人知晓，在我心底埋藏，它是根之根芽之芽 天之天，都是生命之树所生长，这大树高于心灵的企望，也高于头脑的想象，是造化的奇迹，能够隔离参商。 我将你的心带在身上，用我的心将它妥善包藏”） 那是什么？根之根，芽之芽？能够隔离参商？让我们试着来理解它，只是不我们已知的要多那么一点。再一次，人际关系是一种天性的需求，没有人是孤岛，没有人能脱离人际关系而生存，而成长。让我们再看一遍，我们几个月前讲过的关于极度幸福的人的研究，还记得在晚餐时Martin Seligman选择了这10%的最幸福组，最拔尖的，并研究了他们，他们发现之一，如果你还记得的话，是他们和别人一样也经历了困难，他们有时会经历焦虑、紧张，、抑郁、沮丧，但是，他们和其他人的区别，那些不是最幸福的人。是他们恢复得更快，换言之，他们有更强大的免疫系统。 为何他们有更强大的免疫系统的原因之一，他们对自己经历表现与他人不同的原因之一，是因为他们有…这是他们和其余人的不同之处，他们有很强的人际关系，无论是情侣还是和灵魂伴侣，还是和家人或者以上这些都有。这是这组与人不同的一个特点，他们有亲近请，亲密的关系。这就大有不同了为什么？ 两个原因。首先，因为当你快乐时，你会和你亲近的真正在意的人分享快乐，那就增加了放大了你的快乐，同样也是他们的快乐，这是个双赢，当你经历艰难困苦时，拥有亲密的关系能帮助你克服困难，所以再一次，无论是从消极到零点，还是从零点到幸福，亲近的亲密关系显著地有助于变得幸福。但是人际关系中的关键是认识自己，就是知道自己的需要，因为我们每个人需要的人际关系都不一样，没有统一的药方，不可能说，一天5个拥抱然后你就更幸福了，5个密友，你知道一个或两个爱人还有…没有这样的药方，是因人而异的。 我还想回顾一下千层面定律，还记得幸福书里的千层面定律，那就是我们都需要…比方说，我很爱我的家人，家人对我来说是世界上最重要的。但是，那并不意味着我愿意一天花8个或者10个小时和家人在一起。 你知道我还需要独处的时间配额，我需要练瑜伽，我需要锻炼、写作、教学，那并不意味着我的家人对我来说就不重要了。或者说我喜欢写作，我确实喜欢，我一天写3小时，不能再长了，为什么那是千层面定律…如果你们还记得，千层面是我最爱的食物，我每次回家，我妈妈总给我做千层面，但那并不是说我需要每天整天都吃千层面，你知道一周吃5顿对我来说就够了，或者一周吃一顿。 但是你需要找到自己的配额，人际关系也是一样。问问自己，每天和别人相处多少小时我就觉得愉快，觉得和别人相处是一种享受，决定这个合适时间的因素就是看你内向还是外向，我们都有一个相对于最优水平而言的心理基准水平，让我来画个图，这是所谓的最优激励水平，在认知学上说，激励的最优水平，这是，比如说是我们的最优激励水平， 我们生来就在这附近，有些人高，有些有人低，极少有人正好在这条线上，内向的人有更高的激励水平，更高的先天激励水平，这是内向的人，相对于最优水平而言，外向的人有较低的激励水平，现在我们都身上，或者精神上，认知上并身体上，寻求体验的最优激励水平，因为那是最方便的，那时候我们在最佳状态，那时候我们心情更愉快。内向的人的天生自然状态是高于最优激励水平的，所以他们实际上需要降低刺激水平，所以他们喜欢自己单独呆着。与之相反，外向的人有着较低的激励水平，这个水平没有他们达到最优水平时那么愉快，于是他们出门去参加派对，那里有很多刺激，有很多事发生，有很多为了达到自己最优水平的人。这就是为什么普遍来说… 酒精起什么作用？酒精降低我们的激励水平，这就是为什么内向的人常常需要在他们跳舞之前喝杯酒或喝瓶酒，因为当着其他人的面跳舞会刺激水平上升，所以酒精的作用是降低他们的刺激水平，然后跳舞就容易接受了。与之相反，外向的人需要咖啡，咖啡是保持清醒的刺激物，因为咖啡让他们上升到自己的最优激励水平。再一次，我给了你们一个梗慨，再一次，自lssac后数十年里有很多关于内向和外向的研究，顺便说下，这不是意味着我们不能…用Brian Little的话说，我们的举止不能脱离本性，就是说一个内向的人举止可能像外向的人。我站在这里，我是个内向的人，顺便说下这是心…我们生来就是这个状态，这是天生的，我生来就是内向的，但当我站在教室前唱着优美的歌曲，我的行为像一个外向的人，但是当我们的举止脱离本性时，明白这样通常会让我们哀弱这点很重要，它会带走我们的精力，这对我们来说很难，因为我们在假装，所以如果我在这，当我上课时，我会变得更兴奋，离我的最优激励水平更远，这会消耗精力，这就是为什么内向的人在表现得像外向的人之后，无论是参加派对还是讲课。 都需要Brian Little所说的恢复龛，恢复龛，一个恢复精力的地方，在那个地方，人们可以和人一对一相处，也可以给自己一点时间独处，恢复。记住这个问题不是压力，这个问题不是压力，而是我们没有恢复，内向的人需要恢复，有时是靠自己，有时需要一对一。比如说我的生活，恢复的形式是坐办公室，让我一连4个小时面对学生更容易，这是一种恢复的形式，如果我只是上课，只是站在听众前面,那最终会导致过度工作，会导致我毫无生气。 外向的人也是一样，如果你是个外向的人，有时你需要做点内向的人的事情，比如说你需要为了考试学习，你是可以和很多人一起学习备考，但可能效果并没有那么好，所以你自己一个人或者和另一个一起学，而在那之后你需要的就是一个恢复龛，因为对一个外向的人来说，远离其最优激励水平是消耗精力的，你需要一个恢复龛，恢复龛在哪?我需要和朋友出去参加派对，这对他们来说就是一个恢复龛。所以再一次，认识你自己，知道你自己人际关系的需求是什么，不是说你的行为不能脱离本性。你可以，但同时你必须要有一个正式的恢复，一个与你本性相对应的恢复龛，不管你是内向的还是外向的。总而言之，你需要的人际关系数量取决于你个人的独特的需要，你想和别人在一起相处的时间，因人而异，这里无分好坏。一些人喜欢每天和朋友相处10小时，那些特别的人。其他人则喜欢一对一，亲密的时间每天就需要2到3小时。这里没有什么好或不好，并不意味着你对别人的爱就冷淡了，也不意味着你不需要亲密的关系，如果你是前一种或者后一种的人。两种人都需要亲密的关系，和灵魂伴侣，情侣，家人，都可以，都是一种需要. David Myers说：“几乎没有什么能比一段和好友之间亲密的，悉心培育的，公平的，亲近的，长达一生的相伴更能语言幸福了”。关于异性关系所做的研究要比同性关系多。但是，过去几年，特别是经过华盛顿大学John Gottman的研究工作，他可以说是这一领域的领先专家。他在同性关系上做了更多的研究，他们的发现… 非常相似的结果，但略有不同，我们会讲讲这些有趣的… 因为它们是我们没见到过的不同，可能今天不讲，但下节课会讲。 所以当我谈到关系时，我说的是关系，而那位David Myers说的是长达一生的伴侣，浪漫的关系同性或者异性。 关于关系有趣的事情是，每个人都能从中受益，但如我之前一次提到的那样，男人受益更多，为什么他们受益更多？ 因为首先，通常男人有可以分享事情的人。而女人，通常更可能…和特定的女性朋友谈论特定的话题，分享快乐和悲伤的女性朋友。但是，两种性别的人不管是异性恋还是同性恋都能从亲密的关系中获益。 我来放一个前段的视频片段，关于婚姻的，“人人都爱雷蒙德”的片段，（这就是婚姻，你早上一睁眼，她在那，你夜晚回家，她在那，你吃饭，她在那。 你…你睡觉，她在那。我知道这听起来很恐怖，但是不是，不是。 如果你…如果你找到了合适的人，这样结婚就很好，很好，真的真的很好。 我想要一分钟时间来反驳。） 那么我们来看看各种关系。首先，我们来看看婚外恋，看看到底今天长期的关系出了什么问题，婚姻或是其他长期的关系，我们看到可不是非常好看的景象，就婚姻而言，如今三分之二的婚姻都以离婚收场，这并不意味着剩下那三分之一就过得很好，因为经常，经常人们在一起是因为责任感，习惯。因为没得选了，因为他们认为这就是他们的命运。现在，我当然不是要去论证所有婚姻或关系都不应该破裂，当然有，不是每一段关系都是合适的，我们常常会犯错，但我要表达的是，很多结束了的关系或者许多变成用梭罗的话说“安静的绝望”的关系，毫无生气，成了一种惯性，许多这样的关系，要么不应该终结，要么实际上可以很好，然而问题是，我们看到，当然有三分之二的人已离婚收场，但还有三分之一的人常常无法长期维持爱情。我还不知道在婚礼上或者在别的婚姻仪式上，会有那对夫妇说“这只是暂时的，我们将… 你懂的，携手两年，直到死亡把我们分开，但也不见得”。你知道当人们步入一段关系中时，他们的想法，他们的希望，是延续他们在关系最初时拥有的那份爱与热情，这就是关系如何开始的，这是爱的承诺，但是通常，很显然，事与愿违。 一个主要原因，一个被许多性治疗师和心理学家引用的原因，再一次，你不需要研究它，因为这是如此地不正证明。一个原因是因为爱情，特别是欲望和热情会随着时间磨灭，因为我们知道新鲜事物产生更高的激励水平，或者用康奈尔大学心理学家Daryl Bem的话说“新奇的总是引人性致的”，如果是新鲜事物，它总是更有趣，更让人着迷，这就解释了为什么这么多关系都破裂了。 但问题是…这必然是我们本性的一本分吗？ 是也不是，是新奇的事物更能刺激我们，我们适应变化，这必然是我们本性的一部分，记住，我们是会改变的探测者，当新事物出现时，我们变得更加激励，不论是从认知心理学，还是身体 生理学上说，我们随着时间变化适应着，不论好与坏。所以如果不是以好结果为目标的事情，如果不是找情侣这样的积极的经历，这种能力是很好的，可惜不是， 问题是我们该怎么办？ 在我们开始讲“我们怎么办”之前我先跟你们分享一个我做的研究，希望它能尽快发表在一个有名的学术期刊上。但我研究的问题是个非常重要的问题，就是谁是世界上最帅的男人和最靓的女人？说得科学点，谁是商场里最美的人？我把这个问题给了我一个大二的班，我当时教一个大二班的心理学，我们有了很长时间的辩论，但最后我们得到一个科学的结论。没有看过PPT的同学告诉我，你们认为谁被选为了最美的男人？你得了A，还有人想要A吗？不。 谁被选为了世上最美的男人？比尔·克林顿？不是。 谁？乔治·克鲁尼？很接近，但还不对。 （布拉德·皮特！）答对了。 这张图是他站在特洛伊城前告诉海伦他去去就来。 谁是这世上被大二班科学地证明是最美的女人？你！对！另一个A，她是谁？（安吉丽娜·朱莉），安吉丽娜·朱莉？不是。 （哈莉·贝瑞）哈莉·贝瑞，这张图是她跟阿德里安·布罗迪说，他要是再敢接近她一步，她就杀了她。 现在想象一下，想象一下，想象你找到了你的布拉德·皮特或者哈莉·贝瑞，你理想中的男人或女人，他们不仅美得冒泡而且特别感性、聪明、老成、圣洁、慷慨、仁慈，一部电影挣钱1000万美元，而且最重要的是他们爱你绝不少于你爱他们。想象一下，如果这发生了的话，遇到了你的布拉德·皮特或者任何一位你的致命情侣，或者你遇到了哈莉·贝瑞或者女超人或者女蜘蛛侠或其他真命天女。想象一下，你看到他们，你跟他们说话，然后你爱上了他们，他们爱上了你，然后你们结婚了，你婚后的第一晚或者婚前第一晚，你们选，你回到家，没有盔甲会阻挡你，没有枪会把你敢走，你们成小时，成天，成周，成月地激情不休，你甚至不来上幸福课。感觉太棒了，想象一下，想象一下，然后当然银幕落下，你们永远幸福快乐精力充沛地生活在一起。对吗？也许，现在想象一下相爱5年，和这样一个感性、智慧、性感、富有的人，相爱5年，你参加了一个心理学实验，这个实验是他们把你挂在各种各样电极上，各种各样生理学的，认知学的测量工具上，然后他们测量你的生理兴奋水平。然后你的布拉德·皮特或者哈莉·贝瑞或者谁走进了这个房间，看看你的生理兴奋水平如何，然后他们离开，再然后另一个有适当魅力的人，不是布拉德·皮特和哈莉·贝瑞，但是个有相当魅力的人走进这个房间。你什么时候身体上，本能上，你什么时候身体上更兴奋？ 总的来说，不是总是发生，但大多数情况是，你会在那个生人进来时，身体上更兴奋，为什么？ 因为新奇的总是引人性致的，因为新鲜的食物有刺激。现在我们在这笑，其实在一定程度上也解释了这个统计数据，这就是为什么这么多关系破灭了，尽管它们一开始抱着最美好的愿望，最真诚的愿望，但结果它们深陷泥潭，这是部分的原因。所以这是不是个坏消息？ 不尽然，它不坏也不好，就是这样，就像我们说万有引力定律，万有引力定律不好吗？ 不，没什么不好。它好吗？也没什么好的，它就是这样而已。就像我们说痛苦情绪，它们不好吗？不，它们好吗？不，它们只是如此。如果你想过幸福的生活，如果我们想有良好健康的关系，我们需要做的是首先接受本性，这不是什么好或坏消息，只是真实的消息或者不是消息，因为这是我们都知道的。问题是我们要怎么做？我们要怎么遵循本性才能驾驭它？我今节课和下次课要讲的是我们该如何对待关系。鉴于新鲜事物带来兴奋的事实，鉴于生理兴奋水平会升高的事实，顺便说一下这对男女一样适用，当新人出现时兴奋会升高，鉴于此，我们怎样才能创造一个活跃，进步，超过零点到达幸福的关系，这是可能的，幸福心理学可以帮助我们做到。在接受现实前的第一步是理解真爱的真正含义，因为许多人，许多人会问这样一个问题，真爱在现实中存在吗？是的，它存在于小说中，存在于电影里，但这些电影荧幕上的角色实际上比生活中的夸张了，他们说着完美的台词，他们创造着完美的爱情,我要怎样才能做到？我要怎样才能去经历他们所经历的？ 真爱真的存在吗？我们做到拥有，英格丽·褒曼和亨弗莱·鲍嘉那样的爱情吗？我能到达4千英尺的高度吗？我能拥有海格·瑞恩和汤姆·汉克斯那样的心灵感应吗？我会不会有可能和英国首相一夜风流？或者和休·格兰特？ 可能吗？ 会是真的吗？ 你知道自助书帮不了多少，我最爱的自助书作者之一 Leo Buscaglia,他也是南加大的教授，非常棒的作者，富于同情心的热情演讲者，帮了我很多。这是我读的第一本，关于生活，爱情和学习的自助书，关于爱情和关系他如是写道“完美是爱情确实是稀有，因为作为一个爱人，需要你一直拥有智者的敏锐，儿童的灵活性，艺术家的感性，哲学家的领悟，圣人的包容，学者的宽容和笃定者的刚毅”。 多美的文字，如此美，如此严苛的条件。 谁能做到这些？ 有谁吗？你瞧，完美的爱情是不存在的，去期望自己，自己的伴侣，自己的关系这么完美，注定会失败。我不希望Tammy对他的伴侣有这样的期望，因为我能向你们保证我会辜负她的，根据这些标准我辜负了她。我对她也是一样，这是不可能的，是不现实的。当我们的期望高于生活时，当我们的期望是完美的台词，或完美的爱情时，我们就在为自己的失败做着准备，但我们读到的都是完美，我们看到的都是完美，我们开始把这些，这条我们关系的直线，完美又不真实。 但是尽管完美的爱情不存在，真爱却存在，真爱存在于不完美的人中， 什么是真爱？幸福心理学又怎么帮你认识它？ 首先，问这一领域里，最经常被问及的问题。其次，不仅关注什么起了作用，还要关注什么在这些少数真的很好。没有破裂，没有走到尽头的，没有到达安静的绝望状态，或者弗洛伊德所说的“惬意的麻木”的毫无生气的关系中。 什么起了最大的作用，让我们从他们身上学学，向最佳情侣学学。 所以我们要做的第一件事就是重新组织一下这个问题，还记得我们在讲冒险的青春时也是这么做的，我们对那些快乐，健康，成功的人也是这么做的，讲几何形状时我们也是这么做的。因为问题引起了探索，问题定义了现实，传统心理学问过，夫妻咨询师这一领域内的研究者问过，为什么这么多长期的关系失败了？为什么这么多人在一起一年两年或者五年之后结束了他们的关系？为什么许多人在一起后就不再幸福了？他们达到的答案之一就是，因为新鲜事物刺激我们，因为寻求刺激是人类本性的一部分，新奇的是引人性致的。那是一个答案，并且是个正确的答案，也是一个我们要考虑的重要因素，这是现实的一部分，不管我们喜欢或不喜欢。但那个问题还不够，就像当我们问风险人群时或者当我问你们几何形状时，类似的问题一样并不足够。当我们只问这个问题时，我们实际上忽略了一部分现实，非常重要的一部分现实，这一部分现实能引导持续，良好 激情的关系。 幸福心理学家所问的问题是“什么让一些关系发展良好，并随着时间越来越好？”因为这样的关系确实存在，我有幸看到了这样的关系，我跟你们讲过我的祖母和我祖父之间的关系，他们结婚53年，我们有一些拍他们一起的图片，在图片里，我祖母她是家里的女家长，非常强势的女人，一直也非常幽默。她坐下来，我祖父挨着她，把他的手搭在她肩头，看着她，就像16岁相爱的小青年。他们结婚53年，当然也有起起落落，有过纷争和失望，他们也不完美，但他们有一段发展良好的关系，充满激情的关系。这些关系有什么特别？ 什么让他们如此成功？ 重要的问题是“我们能学到什么并应用到我们的关系里？”如果我们想维持一段激情的关系，所以让我们学习那些成功的范例，不只是学习成功的关系，还要学习最好的，我们能研究并学习的最好的关系。下面是一些我们能从这些关系上学到的东西，我要从研究者们那借鉴。首先是John Gottman,我之前提到过的。然后是David Schnarch。David Schnarch和我之前提到的John Gottman在异性关系和同性关系方面，做了一个非常好的研究，下面是一些我会讲到的他们的发现。“首先，当我想出怎么预测离婚时，我以为我找到了拯救婚姻的钥匙，但和我之前的许多专家一样，我错了，我没能破解拯救婚姻的密码，直到我开始分析在幸福的婚姻里什么是对的。” 他如是写道，如果我没记错的话，是在…1999年，2001年的时候他的研究更进了一步，我们下周会讲到这个研究。他研究了同性关系，他学到的东西多于他研究异性关系促进因素时所学到的。总之关键是要去研究成功的关系，不管这个关系是什么，不管他的本质是什么，当他研究了这些，一切就大为不同了。他可以预测，他可以以94%的准确度预测离婚，94%，那是个社会科学领域前所未闻的数字，非常卓越，他可以做到。但这没能帮他创造更好的长期关系，只有当他开始问这个问题“什么让这些关系发展良好，并随着时间越来越好？” 就是那时他继续研究并且能为更好的关系提供挽救方法。我要借鉴的第二个人是David Schnarch,下面是他在他那非常棒的书《激情婚姻》中写道的。“橘皮组织和性潜能是高度联系的”。 他研究最成功的关系的结果表明，他们多年来享受一起的时光，而且他们这辈子最棒的性爱，并不是在他们18岁或25岁或35岁时，事实上是在50多岁和60多岁时。所以你们还有很多可以期望的，这不是说18岁时的性爱就不好了，只是在50和60多岁时会更好，这就是他在研究成功关系时发现的，但这样的关系只占少数，很可惜，因为现今大部分人到了50岁和60岁的年纪时，他们已经到了第2段或第3段婚姻，或者长期的关系中了。但常常是越到后面才越精彩，就是那时生理兴奋水平偏离远离了合适的水平，据说可能男人24岁，女人35岁时更为强烈，我不知道他们在哪得到这些数据的，但我们实际上有潜在可能达到高峰，注意这个词，我们有潜在可能在50多岁和60多岁时达到高峰。为什么？我们之后会理解。 下面是我们下次的课将要探讨的内容，我们将分析增长的统计数据，我们将研究更好的关系，就像我们研究最好的老师Marva Collins一样，就像我们研究最好的冥想者Lama Oser等人一样，我们将研究最好的关系并提问我们能从中学到什么并应用到自己的生活中，在讲一分钟，一分钟。我们将探讨4个不同的话题。第一个，维持恋情需要努力，如果你想在工作上有好的发展，你需要努力工作，如果你想在关系上有良好发展，你需要投资。第二，我们会讲到这样投资，最好的关系创造了高水平的亲密关系，让彼此之间有更深层次的了解。这些是良好的关系，这些时保持激情的关系并且随着时间的过去，感情升温，最好的关系并不能免于冲突，我们会讲到其涵义及其状态。最后我们在上幸福心理学的课，这就是关于欣赏积极事物的课，因为当我们欣赏好的事物时，好的事物会青睐，我们及他人。我们周四再见。","tags":[],"categories":[{"name":"心理学","slug":"心理学","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/"},{"name":"哈佛幸福课","slug":"心理学/哈佛幸福课","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/"},{"name":"字幕内容","slug":"心理学/哈佛幸福课/字幕内容","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/字幕内容/"}]},{"title":"幸福课 第十讲","date":"2018-05-13T08:45:29.000Z","path":"心理学/哈佛幸福课/字幕内容/第十讲/","text":"早上好！今天要讲的是变化。今天很多事都会发生变化，我们之间的关系会发生变化，敬请关注啊！ 上节课结束的时候，我们谈到很多种不同的变化。第一种方式是渐进式的，好像滴水穿石，要花时间的、一点一点的、慢慢的；第二种方式是突发式的，好像用大锤开山劈石，凿出一条路，一个隧道。对于这两种变化，或是所有形式的变化，必须要注意的是：我们讲的重点是要将变化持续下去，而不是突然一变之后又恢复原状。因此要注意的是，变化并不是药到病除的灵丹妙药——即便当我们举起大锤，就是这举起来的动作，也需要我们在之前做很多准备的功夫。因此，举例来说，渐进式的变化，就好像每天都做感恩练习，慢慢成为一个更容易找寻美好的人，逐渐的看到更多积极的事物，一点一点的构建起新的神经通路。 还记得我们之前说过的两个重要概念，神经塑性和新生神经元吗？因为通过了解和理解我们大脑的变化，我们自身也将更容易产生变化。Carol Dweck做过相关研究（我们之后谈到完美主义的时候还会提到她）。另外大锤的例子和探索经验是一回事——真知灼见不是凭空产生的，而是经过长时间准备后千锤百炼而得来的。大家都知道所谓的灵感来自于99%的汗水，所以说没有灵丹妙药，而且正是那种对灵丹妙药的笃信和渴求导致了今天抑郁症如此高发频发。因为大家都很郁闷，很失望，发现灵丹妙药不管用的时候，就觉得是自己出了问题。我在书里也写了很可能他们认为“如果做完这五件事，我的人生就会美满了”。结果五件事做完，我却没有变得更快乐，于是我就开始怀疑自己。其实没有灵丹妙药。任何事都需要时间。没有所谓什么“幸福生活五步走”。 在我们讲变化过程之前，我们先要厘清一些概念。首先我们要问的是：我，或者你，真的想要改变吗？这不是一个无关紧要的问题，也不是象征性地问自己一下，因为表面上我们可能会说当然了，但是潜意识里却有东西在阻挠我们。 我给大家举个例子吧。早在80年代的时候，Langer和Thompson曾做过一个实验。这个实验是这样的：他们找来一些学生或参与实验的人，然后问这些人他们想不想要摆脱自己性格的某个方面，比如说古板、或者容易轻信别人、或是冷酷。他们问这些人想不想要摆脱这些性格，想不想在这方面变的更好，是不是真的能改变自己。也就是说，如果改变对于你来说真的很重要，那你能不能最终变得不那么古板、不那么容易轻信别人、不那么冷酷。这就是他们最初问的两个问题——想不想改善？想不想改变？然后，在他们问了这些问题之后，实验还有第二个阶段。在这个阶段，他们让这些人去评估，评估下列正面性格，比如：言行一致对于你来说是否重要；值得信赖是不是重要；以及被认为是一个严肃认真的人对于你来说有多重要。下面我们来说这个实验的有趣的结果：所有给这些正面性格打高分的人（这些黄色的是正面性格）认为这些性格很重要的人，反而比较不容易去改变自己的负面性格。大家明白这其中的奥妙么？我想要摆脱古板的个性，我不喜欢自己那么古板，与此同时，言行一致在我看来是非常重要的品格。但是我反而不容易去改变自己的古板。因为在我的意识里，它们是相互关联的。对，我不想要古板下去了，同时我潜意识里有个小人却在说：我想要言行一致，别摆脱古板。因为我把两者结合起来了，我把两者联系在一起了，因此不想舍其一；因为我不想把婴儿和洗澡水一起倒掉，对于我来说两者是紧密相连的。同理，还有轻信和值得信赖。这两种品质可以说，值得信赖的人，另一方面很容易轻信别人。这种性格极端化以后，人会变得容易轻信别人，然而我却不想丢掉轻信别人的习惯，因为同时我不想丢掉我值得信赖的优点。同样的例子还有冷酷。我的冷酷可能在潜意识里正反映出我的严肃认真。 很多年来，真的是很久以来，我在思考分析并写了很多关于完美主义的东西。我不能理解为什么我自身的情况长久以来并未好转 ——因为我知道自己深受完美主义其害。我读了研究报告，反省个人经历，我知道完美主义对我百害无益，有损于我的健康。从长远来看也阻挠我成功，但是我却摆脱不了它，直到我读了这个报告。于是我问自己：在我的意识里它和什么联系在一起？和它密切相联的是动力和雄心。如果我需要自我定义的话，首当其冲的，同时因为我不想失去这些品格，我的潜意识便阻止我摆脱对完美主义的追求。我对完美主义的定义是（我们会用整整一周来讲完美主义，到时候会讲的更深入一些）只有当我明白了这两者之间的密切关联，我才能够把它们拆开，分开。我只想保留其一。再比如担忧和焦虑（其实我已经说过很多次了）我最终摆脱了焦虑的困扰。下次我会和大家说说具体的过程。 自从很久以前开始，我上大学的时候，每当有壁球比赛也好，或者是考试也好，或是在分组讨论的时候发言之前，我都会非常焦虑。我不想再这样下去了。我不想要焦虑。然而，我却丢不掉这种担忧和焦虑，因为我同时很重视责任感。如果我会焦虑，说明我有责任感，我会在上课前更认真的做准备而不是随便糊弄、偷懒。因此我把焦虑和正面品格责任感联系起来。还记得关于Brandon的故事吗？责任感是非常重要的品质，但是它却阻挠我摆脱担忧和焦虑。这都是在潜意识里发生的，我之前并没有意识到这些。 还有罪恶感。有好的罪恶感也有不好的罪恶感。我不想摆脱罪恶感，因为我不想变得对他人冷漠无情。我们经常会把这两者联系起来。还有一对概念，是精简化。这也是我的切身体会。我想要减少工作量，因为我明白同时参与太多活动有损于，有损于我的工作效率、创造力和健康。但是我却没办法做到精简。为什么呢？因为我将它和失去优势联系起来，所以我没办法做到精简。还有我们上周谈到的寻找过错。为什么人们不能停止寻找过错呢？为什么要维持悲观的态度呢？因为他们把寻找过错和现实主义联系起来。我不想放弃这种现实的态度，不想变成一个脱离现实盲目乐观的人，因此我不会放弃寻找过错的习惯。 幸福，通往幸福路上最大的障碍，就是人们把幸福和偷懒联系在一起，因为当今文化中最为人所追捧。如果我现在很快乐，就意味着我不再经历痛苦，就意味着我放弃了，意味着我不会成功，意味着我已经失去了棱角，意味着我不再有动力和雄心，所以我们在潜意识里选择不快乐。这样的话，我们就不会失去其它珍贵的东西，比如雄心壮志、比如长处优势、比如勤奋刻苦。当然，依我们现在来看，我们知道这些东西并不是密不可分的。正相反，比如说快乐，我们从“拓延-建构”理论中学到：正面的情绪是和成功联系在一起的。等到春假之后当我们讲到完美主义的时候，我会讲一些从研究中得来的理论。大家可以把这些理论和你们个人联系起来。你们中间有很多人会发现可以将其和自身联系起来。如果我们能赶走对失败的恐惧，学会面对它，学会冒险，从失败中学习经验，将失败看作是未来成功路上的垫脚石，这些都不意味着我们会相应的失去动力和雄心抱负，克服对失败的恐惧，或担忧焦虑，或罪恶感，或种种不幸福的关键，或更好的去理解这些品格的含义。 举个例子，要理解我想要摆脱对失败的恐惧感，不是一般的恐惧，而是消磨人意志的恐惧，因为每个人都在某种程度上害怕失败。但是要摆脱这种消磨人意志的恐惧，同时保存我的动力和雄心，就必须要理解两者是密不可分的。又或者，你们知道我以前不会对人说不。这么短小的一个词，简单的一个词，有时候是那么难以说出口。为什么？因为我眼中的自己和我希望别人眼中的自己是有同情心的、善解人意的、是老好人。于是我把两者拆开了，它们并不一定要连在一起。我可以善解人意的说不，因为很多时候当我对别人说好，我其实同时在对自己说不。从长远来看，也是在对亲密关系说不。所以现在我更好更深入的了解了我什么时候能说不，什么时候不想说。同时，我还能保留自己的善解人意和同情心，也不必在每次说不的时候感到有种罪恶感。这里列出来的每种品格，都是可以被拆开的。大家可以想想有哪些品性是你很久以前就想改掉却改不掉的。对完美主义的追求？还是严酷无情？还是你想变得更顽皮活泼？也许你并不想摆脱这种个性，因为害怕自己会失去严肃认真的品性。其实你根本不需要失去，把婴儿留下，把洗澡水倒掉。前提是我们能搞清楚我们到底想改变什么。 下周的小组讨论活动，你们要和助教一起做一个叫完成句子的练习。下面要说的正是你们在练习中要做的事：你们要识别……这个练习是Nathaniel Branden设计的，它将帮助你识别自己分别想要摆脱和保留的品格。很多时候，不管在显意识还是潜意识中，都有一个你自己制作的开关，可以引发洪水，打开通往新隧道的大门，大脑里新的通路，真正永久性的变化。 我们现在要讨论三个截然不同却又相互连结的通向变化的途径——这就是我们之前提过的“心理学ABC理论”。ABC理论——A代表情感，情绪；B代表行为，行动；C代表认知，思维。我们今天要做的是……我们会分别讲这三个元素。在分别讲这三个元素的时候我们会谈到渐进式变化和突发式变化。可以说我们用两种方法解释三元素，情感、行为、认知乘以渐进式和突发式，一共有六种变化的方式。这六种方式彼此相通，把它们联系起来很重要。我们希望能三者兼得。为什么呢？引用一句我们提过多次，以后也会再提的名言，Dryden和Poet说的：为了能改变习惯，产生永久性的变化，我们不仅需要一种稳定的变化模式，也同样需要一种外部介入的力量。仅仅把注意力放在情感上是不够的，放在行动上也是不够的，放在思维上也是不够的，我们要对三元素同时下功夫——A B和C三元素。大家可以想想看，就好像我们把习惯看成一股洪流，一股我们思维的洪流。这股洪流是由来自不同通路的神经元构成的。我们现在要做的是对抗这股洪流。为了做到这点，我们需要足够大的外力，因此我们要尝试尽可能多的方法。 在我们讲A元素之前，我再问一个问题：我们想改变什么？我们能改变什么？不能改变什么？以Lyubomirsky Diener等人为首的，在我们试图分析一个人的幸福感时，我们需要研究三个因素。第一个因素是遗传排列，不是遗传点，而是排列。我们都生来具备一些特定的快乐和健康倾向性体质。有些人生来就是一张笑脸，嘴里含着“笑汤匙”。另一些人则不然。我们都排列在这条钟形曲线上，有些人注定比其他人更幸运。我之前也提过几次，我就没那么走运。我一出生就在曲线上偏焦虑的那一端，嘴里也没含着快乐的小汤匙，但我的天性令我有资格教这门课，因为我通过努力和各种尝试改变了自己的人生。我可以谈个人的经验，因为我有过那样的经历。现在有些人可能会说……对此我想说：这不是什么好事，也不是坏事，这只是既定事实。就好像万有引力，无所谓好坏。想要支配天性，必先服从天性。我们要认识自己的天性，理解，并充分善用这些天性。 我们健康中和快乐相关的指数差异有50%并不是由遗传所决定的。当然遗传基因是有影响的。比如双胞胎研究的案例。为什么有很多对双胞胎在长期分离的情况下彼此之间仍有那么多相似之处？因为遗传决定的。这作用无所谓好坏，也不是百分之百由它决定，感谢上帝，只有差异中的50%。我们应该随时牢记：对于如何运用这些基因，我们是有很多的支配能力的，我并不知道确切的数据。成功的篮球运动员 50%是由遗传基因决定的。比如肌肉里有多少快肌纤维和慢肌纤维，或者能跳多高，协调性如何，身高多少，这些都很重要。但是如果迈克尔乔丹从没练过篮球，我应该能比他打的好。如果他从没练过的话，而且我的确练过，换句话说，在遗传作用的前提下不去努力争取幸福的人，即便他们有最好的遗传基因，也不会比基因不如他们但努力争取的人快乐。所以说后天努力至关重要。 第二个对快乐差异指数有影响的因素是外部环境。当然了，外部环境很重要。我们生活在一个自由的国度，还是受人压迫，带来的结果是完全不同的。但总的来说，外部环境只要不过于极端，比如无家可归流浪街头，其实影响不大，在差异方面只有10%的作用。因此，遗传作用50%，外部环境包括居住地、包括收入、天气等等，另外，这个不包括有季节性情感异常的患者。对于他们来说，有没有阳光太重要了。我现在说的是大部分人，不包括有季节性情感异常的人。因此除去极端案例，外部环境的作用不大，大概是10%。 第三点，剩下的40%是由意向活动决定。意向活动包括我们的所作所为所想，我们对世界的诠释和我们关注的焦点。简而言之，就是这门课的内容，包括我们从第一节课开始讨论的内容以及下半学期我们将要讨论的内容，这些意向活动，我们关注的焦点其实就是我们的ABC。这也是产生有意义的变化的根源，是我们将要关注的重点。如果我们能改变遗传基因当然很好，是很好，但是不可能。如果我们能更好的控制外部环境当然很好，但是即便是我们能控制，结果也不会被改变。虽然在场的或是在家看视频的人中有很多的确能更好的控制外部环境，能改变结果的，能被我们所掌控的是内部活动，是我们对世界的诠释和我们的行动。好，现在我们就开始讲这部分的内容。 A——情感、情绪，是一种连接，更多的是从逻辑上，语言上将情感、动力、动作连接起来。情感让人感动。没有情感我们将寸步难行。你们在书中读到了，或者之后会读到关于Elliott的故事。Elliott失去了情感功能，并随之丧失了行动做事的所有动力，尽管他还有认知能力。我们要行动就必须要情感。现在我要从两个方面谈情感。首先是渐进式变化；之后是突发式变化。渐进式变化是一种专注冥想。专注冥想可以带来安宁沉静，被认为是最有效的疗法，有很多与其相关的研究，我们之后会用一周的时间讲专注冥想，今天我只想做一个简单的介绍，讲一下专注力的螺旋曲线。 从许多方面来说Jon Kabatt-Zin 在这个学科领域做了很多重要的研究，他和另外一些科学家，包括 Tara Bennett-Goleman和哈佛医学院的 Herbert Benson 一起在这个被认为很神秘的学科领域里做了很多重要研究。“对专注力的培养可以引领我们发现身心纾缓，自身宁静和洞察力的最高深的境界，而通向这个境界的路径恰恰就在于你自身。这就是专注力的奇妙之处。”那些研究结果是多么令人难以置信，它们仅仅通过专注于呼吸和身体的某个部位，通过亲临现场改变了我们的思维方式，改造了我们的大脑。“所有人都有专注的能力，关键在于开发我们在此时此刻全神贯注的能力”。让我们花一两分钟体验一下这种感觉。下面我想请大家做一个联系——还是那句话，如果你愿意做就做。请大家在椅子上坐好，将后背靠在椅背上，尽量坐舒服了，两脚放松平放在地上如果你愿意，如果你愿意的话闭上双眼，现在把注意力放在你的呼吸上。深吸一口气，吸至丹田，慢慢的、静静的、轻轻的呼气，再次慢慢的深吸一口气直至丹田，慢慢的轻轻的静静的长长的呼出来。如果你的思绪飘走了，把它放回到呼吸上来。现在想象你在脑中观察自己的身体：你的前额、眼睛、鼻子、嘴、脖子、胸膛、你的后背、腰、双腿，一直向下，直到你的双脚。上下观察你的身体，同时继续深深的慢慢的轻轻的呼吸。在你打量自己的时候，寻找身上的一个部位，它比其它部位更紧绷，可能是你的下巴，脖子，可能是你的肩膀，你的胃部；你感到这个部位有些不适，可能是你的腿，膝盖，双脚，找到这个部位，它比其它部位更紧绷，把注意力放在这个部位上，继续呼吸，深吸一口气，将气引至那个部位，然后在你放松呼气的时候把那种紧绷感也呼出去，放松；多深吸几口气至该部位然后放松，呼气，重新将注意力放在呼吸上；深吸一口气，慢慢的轻轻的静静的长长的呼气，同时放松；深吸一口气，慢慢的轻轻的长吐出来。在下次呼气之后轻轻的慢慢的静静的睁开你的双眼。另外如果坐在你旁边的人睡着了，请轻轻的把他们叫醒；如果有人还在说梦话，请把他们叫醒。 《情感炼金术》一书中写道：专注力意味着看到事物的本来面目，而不是试图去改变它们；关键是要消解我们，这就是所谓做人的权利。随着情绪感受情绪，在这个过程中呼吸吐纳，虽然不一定总会这样，但是很多时候，如此一来情绪就消解了，随着这种情绪的消解，令人痛苦的情感也得到了心理解离。还是那句话，春假回来以后，我们会谈到很多关于这个疗法的内容。这就是渐进式的变化。在我们待会说到研究报告的时候大家会发现——即便这种渐进式变化只是短短的8周的日常冥想，我们的大脑也会开始改变形状，我们的免疫系统得到增强；即便只有短短8周的日常冥想，而且不一定是一天5小时的冥想，有时候就是一天30或20分钟已经足以带来变化。这个过程是循序渐渐的，缓慢的，希望大家可以用一生去实践。这是一个终身疗法。 下面的例子是从突发变化的角度分析我们的情感。所以当我想填满这个3乘2模型的方盒子，我应该怎么去找情感突发式变化的案例呢？我立刻想到了一个临床心理学，研究的是关于创伤后应激障碍的。有成千上万的文章，都是关于创伤后应激障碍。我们系也做了相关的研究。当我想到它的时候，我对自己说：非常突然的变化，因为实际上当我们有创伤之后，很多人的一生因为创伤后应激障碍而从此改变了。它实际上改变了我们大脑中的化学物质；它改变了我们大脑的结构，建立了新的神经通路，破坏了很多以前的神经通路，全都是因为一个单独的经历，就像是大锤一挥。很不幸的是这是一个非常常见的疾病。我上次已经说过了，30%的越南战争老兵有创伤后应激障碍，30%之多；80%的第一次海湾战争老兵有创伤后应激障碍。我之前也提过，我们现在还没有关于第二次海湾战争的确切数据，但是相信人数只会更多不会更少。在911之前，在纽约110号大街以南，有两万人有创伤后应激障碍。911刚刚过去之后有6万人有创伤后应激障碍。这对人是有影响的，影响了我们的大脑功能，这种影响很多时候是终其一生的。这就是突发式的变化，伴随着创伤而来，比如911 或者在战争中的恐怖经历从而影响了余生，影响了整个人生。这是一种休克疗法，消极的休克疗法。当我想到创伤后应激障碍的时候……我的意思是这属于临床心理学的范畴。 首先，从1998年起开始有很多相关研究。仅仅是在10年以前，就是在人们开始关注幸福心理学的时候，开始有很多关于创伤后成长的研究。研究发现：实际上更多的人在经历创伤后得到的是成长而不是应激障碍。然而，没人提起创伤后成长。每个人都知道创伤后应激障碍，但是再次说明了这又是一个关于人们不愿去关注正面事物的案例。如何正面呢？就是大部分人其实是非常有能力去承受创伤的。这是一个非常振奋人心的事实。如果人们知道这是可能实现的，是常见的，如果人们不会对经历创伤后成长感到愧疚，那么我们就会有更多自我实现的预言，也会有更多人拥有创伤后成长的经历。在我经历了越南战争之后有了那样的所见所闻，我怎么会成长呢？这是不对的。再说一次：世事总有不幸，但是有些人能尽量从世事中受益。当人们开始关注事情带来的益处时，就会产生创伤后成长。 那么创伤能带来什么好处呢——发生这种事终归是不幸的。比如，我从患癌症这件事上学到什么呢——和家人的关系更亲密；更珍惜生命；更珍惜花草自然；更享受和朋友在一起的时光。这件事这就是价值发现。再或者，很多人能在写日记的时候得到启示。（我们下节课会讲到记日记）再或者，有些人能够分享创伤经历。还记得二战大屠杀的幸存者和越战老兵之间的区别吗？对于不幸的经历，大屠杀的幸存者拿来分享讨论，把它写出来；越战老兵则只是反复去想。 回到我们之前说的 Lyubomirsky的研究。当你只想不说，不把心里话倒出来，它会积压在心里，更容易形成创伤后应激障碍。并不一定要这样。了解创伤后成长的好处是至关重要的。那么现在我向大家提一个问题。既然这是讲幸福心理学的课程，大家应该还记得幸福心理学关注的是有用的有效的事物，因此在备课的时候，我问了自己一个问题：有没有一个正面的和创伤相对应的元素——它的效果强大，但同时是正面积极的，并最终能像猛击大锤一样瞬间改变我们大脑的运作模式？有这样的元素吗？换句话说，我想问：会不会有一种正面的经历可以创造一条正向的通道，引领我们得到更多健康、宁静和积极的回忆，也就是说和创伤后应激障碍正相反的反应。再重复一次：勤问必有所得，求索始于追问。当我问出这个问题，在我眼前立马开启了一条我前所未见的通道。这就是我多年来一直钻研其中的我心目中的最伟大的知识分子马斯洛提出的“高峰体验理论”。我现在要说的这个理论更多的是一种假设性理论，而未经过实证的。我希望你们当中有人能将这个假设性理论当成论文课题研究，或者以后能鼓励别人研究这个理论。我在这个课上讲的理论都是经过大量研究证实的，只有这个领域是假设性的，但还是请大家听一下，我讲完后，请好好想想这个假设性理论。因为虽然是有一些相关研究，但是不多，不足以证实其真实性。但还是请大家想想看它有没有道理。 那么，让我们先了解一下什么是高峰体验。马斯洛的定义是：最幸福的时刻，最令人心醉神迷欣喜若狂极乐体验的高度浓缩。我发现这种体验一般来自于深度美学体验，包括创作时的喜悦、爱情、完美的性体验、为人父母、自然分娩以及其他的人生体验。每个人或是绝大多数人都有这种体验。这种高峰体验，不管是你的男女朋友在一起的时候还是在读一本好书的时候，还是在听你最爱的音乐的时候，这种体验就好像……嗯，许多神学家会说宗教体验，信仰体验。比如当你走在花园里，突然你看到了约翰哈佛（铜像），也许不是他，总之是一种集之大成的体验。这种体验就是人们所说的“禅”。与现在连接起来感觉是如此美好如此完整，好像你已经完满了，拥有了一切。我和家人在一起的时候就有这样的体验。昨天晚上我和亲朋好友一起吃晚餐，你们知道吗，当我们围坐在一起，我感觉这就是了，夫复何求；感觉如此完整，享受当下，这就是高峰体验。但是这种体验一般不会长久，是会消逝的，它只存在于高峰一刻。但是它是有震荡效应的。 现在，也许你们已经知道我接下来要说什么了。当我想到高峰体验的时候，我发现它也许，只是也许，和创伤带来的影响是同等的。也许它是一种喜悦式的休克疗法，能够带来超越体验本身的效果，就好像创伤后应激障碍一样。 时至今日，仍有人活在911的回忆中，这些回忆仍然影响着他们的大脑，创造着新的通道，新的神经通路，01年9月11日之前并不存在的通路。所以说高峰体验是一种喜悦式的休克疗法。如果它反面对应的是创伤，那么和创伤后应激障碍对应的就是——我管它叫高峰体验后通路。我知道是土了一点，但是我觉得是有道理的。相关的研究其实很少，但是我认为这理论是有效的。其中一个研究，她研究的是生过小孩的妇女。她发现在一些时候——这种情况并不是大多数，妇女有时候在生小孩的时候会有高峰体验，这种体验改变了她们的人生。体验带来的后果是——她们变得更自信、更宽容、更友善、更快乐，一切都源于一个单独的人生体验，一种喜悦休克疗法。这种体验发生在她们身上，对她们意义非凡。这个实验是在50年代初期做的，或者是晚期，不对，确实是50年代初。 现在这种情况对于男士也更常见了。因为现在的男士比起以前更可能……David出生的时候我当场喜极而泣。对于我来说那是一种非常强烈的体验，绝对是一种高峰体验。下面是马斯洛对于高峰体验的阐释。他没明白说就是高峰体验后通路，但是也算是一种暗示。“效果等同于心理疗法，前提是体验者目标明确，有自知之明，并且清楚自己的方向。一方面，我们当然可以只讨论怎么分解症状，怎么老调重弹，分解焦虑或其它问题；另一方面，我们还可以去探讨怎么培养自主性和勇气，怎么培养奥运选手，幽默感诸如此类，感知认识，身体感知和其它。”所以他的意思是说——如果我们做一些事后跟进的工作，那么会产生一些具有影响力的效果，而不仅仅是高峰体验。W. James在《宗教经验多样化》一书中谈到改变人生的时刻，以及它们怎样改变人生。高峰体验可以创造新的大脑结构，虽然相关问题仍待研究，但已有越来越多的迹象显示这是有迹可寻的。如果我们知道该怎么做，高峰体验可以产生和创伤相对应的正面效应。下次我们会详细讲这部分的内容。 现在我们要说一个很关键的问题。首先，我们会有高峰体验吗？我们能有更多的高峰体验吗？ 其次，在我们经历了高峰体验之后，我们怎样做才能获得高峰体验后通路？因为正如同并不是所有人都会经历创伤后应激障碍一样（事实上大部分人没有）同样，大部分人在高峰体验过后并未获得高峰体验后通路。怎样增加首先是高峰体验发生的概率，其次是高峰体验后通路的概率？因此，怎么增强高峰体验？这堂课基本上讲的就是关于这个内容。现在我要讲几个概念。当中有我们以前讲过的，也有之后要讲的。 首先,全然为人，接纳，接纳你的情绪。为什么呢？因为如果我们不能接受痛苦的情绪，如果我们不能让自己全然为人，我们就阻断了自己的情绪通路，而所有积极和痛苦的情绪都流动于同一条情绪通路，当我们限制其一的时候，我们也限制了另一方。因此如果我们开启通路，接受自己全然为人，无论是出于悲伤或极度的喜悦允许自己哭泣，我们就能开启通路，让自己更容易感受到积极的情绪，看似矛盾，但这就是全然为人的隽语。当我们允许自己感受痛苦的情绪，我们就会更容易感受到积极的情绪。还有就是专注力，感受当下。举个例子，很多时候当我们听音乐，就是全神贯注的听音乐的时候，不是放着背景音乐在一边发短信、做功课、和朋友聊天，而是全神贯注的听我们喜欢的音乐，很多时候我们会有临场的高峰体验。根据马斯洛的理论，这两个条件能令我们最可能获得高峰体验。顺便说一下，我相信这也是一种天赋。我从我一岁的女儿Sherio身上看到了这种天赋。每当音乐响起，我们随之起舞，她就会开心的笑，这不是我们教她的。人对音乐和舞蹈的爱好是天生的，我们需要花时间去发掘这种天赋。制定一个有意义的目标。当我们有所追求，做自己爱做的事情，做自己觉得有意义、重要的事情，我们更容易获得高峰体验。最后，我们当今文化中最严重的问题——时间。当我们匆匆忙忙赶时间，倍感压力和焦虑的时候，我们很难获得高峰体验。这些都是高峰体验杀手，无论是在做爱的时候还是听音乐的时候，或者和朋友一起的时候，当所有这些发生情况的时候都一样。 那么一旦有了高峰体验我们应该如何增加获得高峰体验后通路的可能性呢？首先，我们可以重演画面。还记得吗？我们说过大脑并不能分辨真实和想象，它可以将发生过的画面多次重播，当我们多次重播该画面的时候，神经通路得到了巩固，这条通路由大锤凿开，之后我们通过画面重演来巩固它。我们还可以把经历写出来。下周我们的心得报告作业就是要大家写自己的高峰体验。当我们记录这种体验的时候——只是描述，而不是分析，记住Lyubomirsky说的两者差别：正面的情绪和经历不适于被分析。所以只要去描述这种经历，再次巩固神经通路，花时间去重演，花时间去重播它。最后，就是要采取行动，通过采取行动我们能巩固最初的体验（即高峰体验）巩固神经通路。所以说，当我有了高峰体验之后，我心里会感到柳暗花明，豁然开朗。现在我得付诸行动。这也是我今天要讲的第二部分——行为。 20年来，自从我还未满20岁的时候开始，我就一直在教和参与各类关于自我提升心理学、幸福心理学、临床心理学的课程、讲习班和研讨会。我发现不管是在别人的讲习班上还是自己的讲习班上，如果课程效果好的话，大部分人在周末或期末离开的时候，如果之前他们在这里，之后他们都会经历一个高峰。但是一般人会分为两组，两组人都会经历高峰。第一组人（很不幸这组人占大多数）在经历了高峰之后最后回到了原来的幸福基点，我们对此并不陌生；第二组人不是多数，是一小部分人在经历了高峰之后，这种高峰并不持久，但是当他们落下来的时候他们的幸福基点比之前高出来，之后尽管也有起起伏伏，但是都是在这个新基点上下起伏。不用说，我当然很想知道为什么有些人是这样，另一些人是那样。因为我想让参加我课程的人能拥有持久性的变化，而不是昙花一现的改变。只是短暂的感觉良好是不够的，这既对不住他们为课程所付出的努力，也对不住我为课程付出的努力，所以我很想弄明白两者之间的差异。下面就是我发现的这两组人之间存在的最重要的差异。第二组人所具备的显著特点就是在讲习班或课程或研讨会结束之后会立刻做出行为上的改变。如果是一个学期的课程，他们不是在学期结束后才做，而是每节课或几节课之后就做。我会重新评估人生，看自己能做什么，立刻采取实质上的行为改变。比如做一些上课讲过的练习，学着承担以前不敢承担的风险，总之，立刻改变，而不是等着。而这些立刻改变的人并不会因此而拥有永久的高峰体验，但是他们的幸福基点会提高，而不像其他人，因为没有改变而回落到和以前一样的水平。所以，现在每当我有长达数天的讲习班和研讨会，我都会在一开始就给大家介绍这种变化的模式。 我们从很多心理学研究中学到态度和行为是密切相关的，这一点我们以前提到过，所以说我们都有自己的态度，无论是关于心理学的态度 还是关于其他人或是关于自己的态度，这些态度影响着我们的行为。比如说，如果我对心理学或是幸福心理学抱有好感，相对于对心理学完全没好感的状况，我更有可能去选1504这门课，或者说如果我对一种想法或对一个人有好感，比起对其毫无好感的情况我更有可能和他成为朋友。所以说，态度影响行为。这是显而易见的，很容易理解。但是一些心理学家，包括Alice Eagly Daryl Bem和其他一些人，他们发现行为同样也能影响态度。这是一条双行线。 所以说如果我有某种行为模式，我的行为很可能会改变我相应的态度，这个问题我们以前也讲过。为什么呢？因为如果说我们有某种态度，我们的行为就好像外在的世界，我们的大脑不能接受内在和外在不一致的情况，因此如果我们的行为是这样的，那我们的态度就会被拉下来和行为相对应；如果我们的行为是这样，大脑不喜欢不一致的情况，它就会让两者达到对等，让两者之间达到一致。协调方法就是要不然改变我们的行为，或者——这点很关键——更多时候改变我们的态度。我们在场的所有人，不管你是 18岁还是80岁，我们都有自己的习惯。我们最初养成习惯，习惯之后造就了我们。习惯是一种行为模式，思维模式。行为，行动比语言更有力。如果我们在这堂课之前有某种行为习惯，这堂课改变了你对某件事的态度，如果因此你的态度变得和行为不相符，下课之后你的大脑寻求一致性，你的态度会被拉回到原来的状态，除非你改变自己的行为，所有的课程——不管是1504还是公正课或心理学1课，所有的课程、讲习班、研讨会所做的都是改变态度。在这门课上，态度的转变就是……比如说自尊，什么是自尊？是一种我对自己的态度。高自尊就是正面的，低自尊是负面的。 价值发现者和错误发现者的不同在于他们看待世界的态度不同。我是把这个看成是积极的，能带给我幸福的呢？还是像错误发现者一样觉得是消极的。完美主义是一种对待失败的态度。这门课能做的，我和你们的助教所能做的就是激发或鼓励你们在态度上的转变，通过介绍这些研究，让你们相信正向思维的作用。但是如果你们不在行为上做出改变，比如去做感恩练习，比如这周要交的感谢信，这个练习是应该定期去做的，除非之后有相应的行为否则你的态度会回复原状。你的态度和行为都和上课或是接受疗法之前没有两样，必须要有行为上的改变。 现在我要给你们看一些研究，这些研究的结果显示了行为改变的影响力。这个研究实验的对象是朝鲜战争期间的美国战俘。当时就在街对面的MIT 科学家E.Schein 发现关押战俘的人最终改变了美国战俘对于共产主义，对于中国人的态度。这些关押他们的人只是很简单的要求他们把共产主义的优越性写下来。我们知道我们不喜欢共产主义，如果喜欢的话我们也不会打仗了。但是要求他们只写优越性，写给你的狱友看，写信回家告诉家人你被如何对待——当然确保他们只能写好话。所以他们并没有要求战俘们撒谎，虽然战俘确实时常写些谎话。他们要求战俘只写优越性，长此以往，态度发生了转变。他们对关押者的戒备少了，好感多了，因为他们的态度变了，通过写信，和朋友聊天，还要做报告，长此以往，他们的态度发生了转变，变得更积极正面了。 “认知距离”这个词你们中间上过心理学1的人可能听说过。认知距离的产生是因为两种想法之间不一致，两种信念相冲突，或者说行为和信念相冲突。我们不愿看到这种情况，我们想要一致。认知距离理论是讲这种冲突必须要被消解，我们消解它的方法就是让我们的态度、我们的想法和信念尽量符合我们的行为。因为行为比语言更有力。“自我认知理论”我们已经讲过很多次了，这次我不打算详细说了，就是我们认识自己，并从中衍生出自我结论。“脸部回馈假说”——如果你现在皱眉或者轻柔的微笑你体内的化学物质会发生变化，这种变化反映了你表情的变化。引用一句名言是……一行禅师说的——他的名字不好念，他是一个佛教僧侣。“有时你的欢乐是微笑的源泉，但有时你的微笑也可以成为欢乐的源泉。” 所以说实际上我们面部表情的变化能够对我们的身体和情绪产生影响，这也解释了为什么演员，不管演的是什么角色，都经常会入戏很深，因为脸部回馈于身体其它部位，在你做面部表情的时候，你体内释放了相应的化学物质。William James的一段话：“吹口哨壮胆绝不仅仅是一种比喻；同样，无精打采的坐一天、哀声叹气、语气阴沉，都会加重你的忧郁；舒展眉头、发亮双眼、挺胸收腹、声音洪亮、友善的夸奖别人，除非你的心如钢铁。”William James所说的已经不仅仅是“脸部回馈假说”，而是一个很少有相关研究的假说——“身体回馈假说”。如果你整天这样坐着而不是骄傲的挺胸抬头，你的情绪会因此受到影响，它会从几个方面影响你对自己的观感。首当其冲的是你向自己传递的信息，也就是“自我认知理论”说的，但是同时还有别人是如何看你的。如果你握手是这样软绵绵的而不是这样坚定有力的握手，你在向与你握手的人传递某种信息，那种信息最终会回到你这里。一是通过别人对你的观感，一是通过你的自我认知。 你们知道，之前有个学生选了这门课，她当时是冰球队的，去年毕业了，今年夏天我碰到她的时候，她走过来同我握手，然后我哭了。因为实在是太疼了。我想她绝对是专心听课了，所以千万不要太过分。坚定也得友好，我是说真的，我觉得她把我的手骨握碎了好几块。但是这真的很重要，因为握手传递了信息，我以后绝对不会找她的麻烦，永远不会，我现在怕死她了。这个握手传递的信息就是力量和信心。如果我们走路时昂首阔步，我们在传递一种信息；如果我们走路时弯腰驼背，我们同样也是在向外界传递一种信息，外界因此会给予我们回馈。这种信息我们也会传递给自己并产生自我回馈。 最后我想给大家讲的是Hammerly做的研究。算了……我还是下次再讲这个研究，因为我今天还有一些重要的事情要讲，所以下节课一开始我就会讲这个研究。这个研究报告很长，但是又很重要，所以下节课我要讲的第一件事就是这个研究。今天下课前我还要讲一些内容，这些内容足以改变我们的人际关系，弄假直到成真。David Myers在这个属于幸福心理学的领域里做了很多相关的研究。他在研究中发现：很多时候即便我们是假装快乐，假装很有自尊——像William James 说的假装高兴——我们的情绪也会因此改变。问题来了：那我们怎么能全然为人呢？好，首先，总有些时候我们不想弄假直到成真，我们想要哭泣，我们想要难过并表现出来，但是同时我们还得要准时出门，参加派对，即便我们一点也不想出门。这里的区别就在于积极接受。我仍然接受我的情绪，接受我的痛苦并感受它，同时选择用最适当的最对自己有益的方式去面对，所以说我能接受被女友抛弃这个现实。我能接受自己感觉糟透了的现实，三天之后，照样出门到Oaks参加派对，疯玩一通。因此，正是因为脸部回馈假说，因为身体回馈假说，因为自我认知理论，行为影响了我的态度。在Oakes狂欢一夜之后，我实际上感觉好多了，也更健康了，好吧健康不一定，但是感觉是好多了。 下面我要播放一段Marva Collins的录像，当中她谈了一些自己的经历。我觉得也许我现在这样是因为我的父母和他们的坚持，我想要和他们一样成功，和我的祖父母一样成功，在以前成功的黑人是很少见的，所以我认为是我父母和祖父母的决心，他们……我们会抬头挺胸。我和比我小14岁的妹妹去教堂的时候，如果我们没有挺胸抬头，我妈妈会说；她会在我上学的时候，我常听见别人对她说“我一眼就能在操场找出你的小孩。”抬起你的头，直着走。如果你仔细观察 Marva Collins，你会发现她就是这么走路的，她的姿势就是如此，并因此给她的学生和其他人，也给她自己传递了一种信息。我现在要跳过一些内容，所以大部分行为上的变化都是渐进式的。那什么是突发式变化呢？突发式变化关注的是如何应对，关注的是承担风险。当我们去应对的时候需要做一些不太愿意做的事，换句话说就是离开舒适区，进入学习区。 现在我要给大家讲两个我自己的故事。这两个故事乍听起来毫不相关，但如果大家听明白了的话，就会发现它们息息相关。第一个故事不轻松；另一个也不轻松。我的第一个人生记忆，大家知道当人们开始记事的时候记得的第一件事就是第一个人生记忆。我的第一个人生记忆是发生在 1973年9月，那时我快满三岁了。那天是赎罪日，一年当中最神圣的一天。我记得我当时在家，突然电话响了。我的父母是非常正统的教徒，我从小成长在正统的家庭里。我们的电话在安息日、周六都不会响的，更不要说赎罪日了。但是这天电话响了。我记得他们当时跳了起来，向电话奔去。我爸爸拿起了电话，我当时站在父母中间，我爸爸看着我妈妈小声说着什么，我听不清，但是我看到我妈妈的脸色变了。我从她眼里看到了恐惧。我哭了起来，我爸爸把我抱起来，他对我说：“我要离开几天，不过我会回来的。”现在我知道当时发生了什么事。当时我父母接到我叔叔打来的电话，他当时在军队服役，在情报部门，他说战争爆发了。在以色列一年当中最神圣的一天，年轻人，以色列军队当时都不在边防线上，完全出乎大家的意料，5个阿拉伯国家同时向以色列宣战。我爸爸把我放下来，走进他的房间，一切仍历历在目。我看到他拿出自己的军装，穿好，拿出他的M16自动步枪，背好，穿上鞋，系好鞋带。我妈妈一直在他身边帮他整理，他们交谈当中偶尔会向我微笑一下，但是我感到一种紧张不安。我不明白为什么，然后我们一起下楼走到我爸爸的车旁边。他当时有一辆老式的绿色福特跑天下。他把鞋油拿出来，涂在车前灯上。为什么呢？也是后来我才知道，因为在夜里开车的时候你开着车灯，车灯不能太亮以防遭到空袭，所以他涂了车灯。我就在一旁看着他。然后他把我抱起来，又一次的，然后他上了车。我开始控制不住的哭泣。我们的邻居 Sharlon，他年岁太高不能服役。他站在一边，我们一起看着我爸爸开车走了。他把我抱起来，我还在哭，他看着我说：“去当兵吗？” 之后将近20年我再也没哭过。我上了哈佛大学，我开始学心理学。你们知道我要讲什么是吧？我开始学心理学，我知道自己想要做的，想要做的最重要的事情之一就是找到自己女性化的一面，雌雄同体。我想要找到自己女性化的一面是因为我知道压抑情感是不健康的，我压抑痛苦的情绪，同时也压抑积极正面的情绪。因为是同一条情绪通路，但是我在一个非常强调男子气概的文化环境中长大。男人不哭。士兵不哭。我们很坚强可以搞定任何事情。这是我长大的文化背景。而且那是我人生的第一个回忆。之后我反复听过同样的话无数次，传递的都是同样的讯息——这样不行，表露情绪一点也不爷们。我现在想起来，那时候我输掉了对于我来说最重要的壁球比赛，全国冠军。之前的一年我是冠军。当时我很震惊，我本不该输掉本该赢的。之后我和女朋友一起回家，我们就是一起消磨时间，突然间她哭了起来，因为她明白这场比赛对于我有多重要。这就是我在童年，青少年阶段的体验——要坚强。要像个男人。然后我来到这里。我明白我要释放出来，我要找到自己女性化的一面。这就是我的第一个故事。 现在让我来讲第二个故事。我以前的一个学生，你们当中可能有人认识她，她是04届毕业的叫Lindsay Hyde，在我这里学习。我们也有一对一教学，经常一起学习。组织的创始人，一个非常棒的组织，隶属于菲利普斯布鲁克斯内务协会，现在已是全国性的组织，我也是筹款委员会的一员，有兴趣的人可以去他们的网站swsg.org看看。Lindsay邀请我给波士顿其它院校的女会员作报告，于是我去做了一个报告。照片上的就是Lindsay。这是她和一个三年级学生在一起。她还有其他几位哈佛学生是这个学生的导师，他们一起做了很多很棒的事。我非常相信这个机构的理念，几乎从筹备的最初阶段我就支持他们，所以我做了一个报告，这个报告是关于模范人物的重要性，关于诚实。我跟他们讲了Marva Collins，讲了他们要做的重要工作。我觉得对于我和所有与会者来说整个报告进行的非常顺利。最后我收到了一份表示感激的礼物，礼物是一件衬衣，这可不是普通的衬衣，是一件粉色的衬衣。这个颜色我平时不穿，当然在以色列我从来没穿过，因为这是一件’顽强女人顽强女生’衬衣。这衬衣不仅是粉色的，而且尺码还很小，给三年级学生穿应该比较合适。但是他们还是对我说：“'我们希望你能收下这份表达我们谢意的礼物。”然后我就犯了一个错误。我当然是在开玩笑，当时我在教1504课程，我开玩笑的说：“这就是我收到的那件衬衫。”我在1504班上的另一个学生——Tory Martin，她在Lindsay走后接管了这个机构，她当时是主席。然后我又笑了，然后我差一点就哭了。“我是开玩笑的，”她说，“你看，你不是刚给我们讲过诚实的重要性么？”我的确是讲了。你们看这里，诚实。我说：“好吧我讲了，我现在怎么办？”诚实可是我的核心价值之一，然后我的眼前闪过了我的整个童年，然后我就想到了丘吉尔说过的一句话。于是我一直在寻找转机，现在转机来了，就在这件粉色衬衫上，让我找到自己女性化的一面。 女士们，先生们，你们也许不会相信，但还是相信我，当我说这个对于我来说是在我的舒适区之外，实际上这已经都不在我的学习区之内了，已经到我的恐慌区了。上课之前备课的时候，你们知道我都是要做笔记的，所以我在这里写下要干什么。我跟助教们说，我刚写进笔记的时候，每次看过去，我都感到肾上腺素在胃里飙升。这就是在舒适区之外。现在我也是在舒适区之外。这就是为什么我要在下课前而不是刚上课的时候干这件事。关键是要达到最适度的不适感，我可能的确是有点太吓人了。但是关键是最适度的不适感。为什么呢？想要改变别无他法，我可以想一天想破头，一直说我要找到女性化的一面，我要更勇敢，我要释放出来，我可以想一整天，什么也不会发生的，什么也不会发生的，除非我们有真正的实质的行为改变，真正的实质的行为动作。当我们做到这一点的时候就天高任鸟飞了。 谢谢大家！下周四再见！","tags":[],"categories":[{"name":"心理学","slug":"心理学","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/"},{"name":"哈佛幸福课","slug":"心理学/哈佛幸福课","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/"},{"name":"字幕内容","slug":"心理学/哈佛幸福课/字幕内容","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/字幕内容/"}]},{"title":"哈佛幸福课札记 —— 第 18 讲","date":"2018-05-13T07:26:57.000Z","path":"心理学/哈佛幸福课/札记/第十八讲/","text":"睡眠应作为一项投资 现在有些人会说“好吧，对我来说要睡8小时的话，我一天要有30小时才行，没有足够的时间去… 那是一天的三分之一啊， 太多了，我腾不出那么多时间”。你可以腾出那么多时间，如果你把它视作一种投资的话，如果你把它当做一件优先要做的事的话。 睡眠的好处 毫无疑问睡觉能保持美丽，不仅如此，睡觉还能保持幸福和智力，在每个层面上睡觉都是个好投资。 小睡 小睡实际上被证明极其有效，白天打个瞌睡，比如睡个20分钟，虽没有晚上多睡两小时的效果好，但也比白天不睡要强得多，在一定程度上恢复了某些认知和情绪能力。 睡眠时间 在爱迪生发明电灯泡之前，人们每24小时就平均睡10小时，每天10小时，大多是在夜里睡觉，但有时也在白天睡觉，现今平均每人在工作日期间有6.9小时的睡眠时间，周末则是7个半小时，这是全国的平均数据。 我们可以这样估计睡眠时间，大约是8小时左右。 一天差不多睡8小时（ more or less 8 hours），找到适合你的睡眠时间，你可以晚上睡7小时，午后1小时，或者晚上6小时，午后2小时。但总的来说，我们一天需要8小时，如果你一天没有8小时睡眠的话，你有些时候确实没法做到，比如考试周，或者其他压力时期，或者你有小孩的时候，那么怎么办？ 小睡。","tags":[{"name":"幸福","slug":"幸福","permalink":"https://hmgqzx.github.io/wiki/tags/幸福/"},{"name":"睡眠","slug":"睡眠","permalink":"https://hmgqzx.github.io/wiki/tags/睡眠/"}],"categories":[{"name":"心理学","slug":"心理学","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/"},{"name":"哈佛幸福课","slug":"心理学/哈佛幸福课","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/"},{"name":"札记","slug":"心理学/哈佛幸福课/札记","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/札记/"}]},{"title":"哈佛幸福课札记 —— 第 10 讲","date":"2018-05-13T07:26:57.000Z","path":"心理学/哈佛幸福课/札记/第十讲/","text":"态度与行为 态度影响行为，这是显而易见的。但同时，行为同样也能影响态度。 而为了能更长久地改变我们的态度，改变行为更重要。 想要改变别无他法，我可以想一天想破头，一直说我要找到女性化的一面，我要更勇敢，我要释放出来，我可以想一整天，什么也不会发生的，什么也不会发生的，除非我们有真正的实质的行为改变。 相关研究： 美国战俘写信实验 简单的要求他们把共产主义的优越性写下来，写给狱友看，写信回家告诉家人被如何对待 —— 当然确保他们只能写好话 通过写信，和朋友聊天，还要做报告，长此以往，他们的态度发生了转变，变得更积极正面了 身体回馈假说 如果你整天这样阴郁地坐着而不是骄傲的挺胸抬头，你的情绪会因此受到影响。一是通过别人对你的观感，一是通过你的自我认知。 你真的想改变吗？—— 把婴儿留下，把洗澡水倒掉 在 Langer和Thompson 的一个实验中，结果非常有趣：所有给这些正面性格打高分的人，即认为这些性格很重要的人，反而比较不容易去改变自己的负面性格。 Why？—— 因为在我的意识里，它们是相互关联的。比如：我想要摆脱古板的个性，我不喜欢自己那么古板，与此同时，言行一致在我看来是非常重要的品格。对，我不想要古板下去了，同时我潜意识里有个小人却在说：我想要言行一致，别摆脱古板。 同样，类似的“错误”绑定有： 人们把幸福和偷懒联系在一起； 我丢不掉担忧和焦虑，因为我同时很重视责任感，如果我在比赛前、备课前等会焦虑，说明我有责任感； 拒绝他人与冷酷无情 影响幸福感的三个因素 以Lyubomirsky Diener等人为首的，在我们试图分析一个人的幸福感时，我们需要研究三个因素： 遗传排列 自我努力 外部环境 占比如下： 我们健康中和快乐相关的指数差异有50%并不是由遗传所决定的（也就是说，有 50% 是由遗传所决定的……） 努力的作用占比大约为 40%；但，在遗传作用的前提下不去努力争取幸福的人，即便他们有最好的遗传基因，也不会比基因不如他们但努力争取的人快乐。 外部环境，包括居住地、包括收入、天气等等，除去极端案例，外部环境的作用不大，大概是10%。 练习 练习的重要性 你应该立刻进行练习！因为幸福基点会提高 总之，立刻改变，而不是等着。而这些立刻改变的人并不会因此而拥有永久的高峰体验，但是他们的幸福基点会提高，而不像其他人，因为没有改变而回落到和以前一样的水平。 只有改变行为，才能最终转变态度 我和你们的助教所能做的就是激发或鼓励你们在态度上的转变，通过介绍这些研究，让你们相信正向思维的作用。但是如果你们不在行为上做出改变，比如去做感恩练习，比如这周要交的感谢信，这个练习是应该定期去做的，除非之后有相应的行为否则你的态度会回复原状。你的态度和行为都和上课或是接受疗法之前没有两样，必须要有行为上的改变。 提到的练习 感恩练习 冥想呼吸 高峰体验 弄假直到成真 很多时候即便我们是假装快乐，假装很有自尊，我们的情绪也会因此改变。 当然，这不是最好的方法，更好的方法是——我仍然接受我的情绪，接受我的痛苦并感受它，同时选择用最适当的最对自己有益的方式去面对。 （同时，因为脸部回馈假说，因为身体回馈假说，因为自我认知理论，行为会影响我的态度。）","tags":[{"name":"人生价值","slug":"人生价值","permalink":"https://hmgqzx.github.io/wiki/tags/人生价值/"},{"name":"幸福","slug":"幸福","permalink":"https://hmgqzx.github.io/wiki/tags/幸福/"}],"categories":[{"name":"心理学","slug":"心理学","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/"},{"name":"哈佛幸福课","slug":"心理学/哈佛幸福课","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/"},{"name":"札记","slug":"心理学/哈佛幸福课/札记","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/札记/"}]},{"title":"哈佛幸福课札记","date":"2018-05-13T07:26:57.000Z","path":"心理学/哈佛幸福课/札记/index/","text":"记录 一刷 本着二八原则，每看一集，只挑三个最大启发或共鸣的 point 进行记录。其余有兴趣，但超过“数量限制”的，记录标题留白。","tags":[{"name":"人生价值","slug":"人生价值","permalink":"https://hmgqzx.github.io/wiki/tags/人生价值/"},{"name":"幸福","slug":"幸福","permalink":"https://hmgqzx.github.io/wiki/tags/幸福/"}],"categories":[{"name":"心理学","slug":"心理学","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/"},{"name":"哈佛幸福课","slug":"心理学/哈佛幸福课","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/"},{"name":"札记","slug":"心理学/哈佛幸福课/札记","permalink":"https://hmgqzx.github.io/wiki/categories/心理学/哈佛幸福课/札记/"}]},{"title":"在 Hexo 中插入图片的一种较好方式","date":"2018-05-13T05:22:31.000Z","path":"Hexo/Hexo插入图片/","text":"Hexo 中提供了 资源文件夹 的方式来插入图片，大致步骤如下： 在 _config.yml 中填写 post_asset_folder: true 自动或手动创建一个与 markdown 文件名字相同的资源文件夹 在资源文件夹中放置图片，按 测试例子中给出的格式进行引用 这样，就能在站点看到了 不过，有个缺点，因为图片放在了资源文件夹中，所以在 Typora 并不能预览 暂时的解决方法：将资源文件夹的图片拷贝出来，与 markdown 文件 放在同一目录 此外，还有其他的几种方式（插件），不太适合这个主题的使用，故抛弃之。但这个方式也不是最好的，图片放在两处，增加了维护成本。 测试例子 目录结构 12345.├── Hexo插入图片 # 资源文件夹│ └── Lena.png # 在站点显示的图片├── Hexo插入图片.md # 文章 -- md 文件；资源文件夹必须和其同名└── Lena.png # 本地预览显示的图片 文章引用图片格式 1![lena](./Lena.png)","tags":[],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hmgqzx.github.io/wiki/categories/Hexo/"}]},{"title":"抓包工具 Wireshark","date":"2018-05-11T07:32:35.000Z","path":"Network/Wireshark/","text":"文档 Wireshark User’s Guide 官方文档 其他较详细的资料 EMC Community Network - DECN: 如果看了这个你还是不会用Wireshark，那就来找我吧（8月6日完结） 较老，windows 版，但本质不变 颜色 绿色是TCP报文，深蓝色是DNS，浅蓝是UDP，黑色标识出有问题的TCP报文——比如乱序报文 过滤器 icmp ip.addr (目标、源) 使用 “追踪流”","tags":[{"name":"未整理","slug":"未整理","permalink":"https://hmgqzx.github.io/wiki/tags/未整理/"}],"categories":[{"name":"Network","slug":"Network","permalink":"https://hmgqzx.github.io/wiki/categories/Network/"}]},{"title":"QuickLook 预览增强插件","date":"2018-03-01T18:13:19.000Z","path":"Mac/QuickLook 预览增强插件/","text":"QuickLook（快速预览）是 Mac OS X 中一项很好的功能。用户选择文件后，按下空格键即可快速预览。因为不用点击打开，还能使用方向键切换，从而节省了大量的时间。但对于开发者来说，系统内置的功能还不能完全满足需求。 需要预览如下文件时，这些插件帮助了我许多： MarkDown文件 源代码文件，支持语法高亮 纯文本或无后缀的“文本”文件 可直接预览，而不用去设置打开方式，太棒👍 插件 这里是一个列表，包含了不少有用的外部插件，可以通过 brew 安装： sindresorhus/quick-look-plugins: List of useful Quick Look plugins for developers 在这里：QuickLook Plugins List 你能找到更多的插件 附言 还不了解 brew 的普通用户可参考这篇文章 加强你的「一指禅」：Mac QuickLook「快速预览」兼容性扩展教程 - 少数派","tags":[],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"dotfiles","date":"2018-03-01T18:13:19.000Z","path":"Mac/dotfiles/","text":"dotfiles，就是以 . (dot)为前缀的文件，一般在系统里是隐藏的，而很多配置就是这些文件。这里 列出了不少人的配置，可以借鉴 参考 如何優雅地在 Mac 上使用 dotfiles? 善用 dotfiles 個人化自己的工作環境 « Cloudの丘","tags":[],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"Python 中的常量","date":"2018-03-01T18:13:19.000Z","path":"Python/Python 常量/","text":"Python在语法上并没有定义常量，尽管PEP 8定义了常量的命名规范为大写字母和下划线组成。 解决方案 Constants in Python 参考 Python常量 - Like的世界","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"Homebrew","date":"2018-03-01T18:13:19.000Z","path":"Mac/homebrew/","text":"Homebrew 是 Mac OS X 上的软件包管理系统，使用它可以方便地安装、更新许多软件（“无人值守”~自动化）。称之为“ Mac 必备神器”一点也不为过。 Homebrew 常用命令 常用的命令没几个： 12345678$ brew install wget # 安装源码$ brew info svn # 显示软件的各种信息，包括版本啊源码地址啊等等$ brew uninstall wget # 卸载软件，很爽，一键静默卸载$ brew search git # 模糊搜索brew 支持的软件。如果不加软件名，就会列出所有它支持的软件。多的很。$ brew list # 列出本机通过brew安装的所有软件$ brew update # 跟新brew软件自身$ brew upgrade wget # 更新安装过的软件,如果不加软件名，就更新所有可以更新的软件$ brew cleanup # 清除下载的各种缓存 装任何东西前都看看能不能用 brew 啊！（很多包/软件都支持 brew 安装） 1$ brew search &lt;软件名&gt; 查看 brew 安装的某个包所在路径 1$ brew ls &lt;package-name&gt; services utility brew services are really useful for managing system services, type $ brew services --help for more info. 查看所有的已启用的服务 1$ brew services list 可以用来检查某些包如Tomcat的运行情况（从而判断是否已正确安装） Cellar 包安装路径 Homebrew 安装的包在 /usr/local/Cellar/ 下 Homebrew keeps packages (known as kegs) in the Cellar, where you can check config and data files. It is a directory located at: 1$ ls /usr/local/Cellar/ 有时因为要指定某个包的执行程序如Tomcat等来启动，需要填写安装路径，可以这样查找： 1$ brew ls &lt;package-name&gt; homebrew-dupes System duplicate formulae for the Homebrew package manager —— homebrew-dupes 因为 homebrew 默认的措施是：not to offer duplicates for system tools。所以当我们需要安装像 grep（系统自带版本太低）等系统工具时就要用到 homebrew-dupes 这个 repository 以作替代 槽点 安装 MySQL 就不要用 Homebrew 了，多台机器上试验过，会存在问题。还是推荐用官网 dmg 安装","tags":[],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"Python 数据持久化","date":"2018-03-01T18:13:19.000Z","path":"Python/Python 数据持久化/","text":"参考 Python 数据持久化方式——JSON与Pickle - BrieflyX’s Base pickle| Hmgqzx’s Wiki JSON 和 Pickle 的比较 JSON是文本形式的存储，Pickle则是二进制形式（至少常用二进制） JSON是人可读的，Pickle不可读 JSON广泛应用于除Python外的其他领域，Pickle是Python独有的。 JSON只能dump一些python的内置对象，Pickle可以存储几乎所有对象。","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"autojump 自动跳转目录","date":"2018-03-01T18:13:19.000Z","path":"Zsh/插件/autojump/","text":"autojump 是一个目录导航插件，让你不用 cd 来 cd 去 它记录访问过的目录，实现智能跳转。使用 autojump 的简写 j ＋ 目录名 ，可随意的在目录间跳转，支持各种模糊匹配、补全。[1] 安装 OS X 推荐使用 brew 安装： 1brew install autojump 其他方法[1:1] 虽然下面的方法可用，但是不如 brew 安装来得方便 跟其他插件一样，首先要在 .zshrc[2] 中找到 plugins=，加入 autojump 12# 各插件名之间用英文空格隔开plugins=(git autojump) 除此之外，还要继续在上述文件中添加 1[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh 最后 source ~/.zshrc 一下 使用[3] j is a convenience wrapper function around autojump Jump To A Directory That Contains foo: 1j foo 前提是要用 cd 命令进入过对应文件夹一次，以让 autojump 记录 tips: 对于有多个可能的补全，可以按下 tab 来选择，看上去就像这样： 1234567891011&gt; $ j mu__&#123;你按着 tab 来到了这里，然后下面是供补全的选择&#125;&gt; mu__1__/Users/me/tutorial-projects/NeteaseCloudMusicApi&gt; mu__2__/Users/me/tutorial-projects/vue/vue-cli-multi-page&gt; mu__3__/Users/me/tutorial-projects/musicbox&gt; mu__4__/Users/me/temp/Cocoa-mupdf&gt; mu__5__/Users/me/tutorial-projects/musicbox/NEMbox&gt; mu__6__/Users/me/tutorial-projects/NeteaseCloudMusicApi&gt; mu__7__/Users/me/Music/网易云音乐&gt; mu__8__/Users/me/tutorial-projects/vue/vue-cli-multi-page&gt; mu__9__/Users/me/tutorial-projects/musicbox&gt; Jump To A Child Directory: 1jc bar Open File Manager To Directories (instead of jumping): 1jo music Opening a file manager to a child directory: 1jco images 进阶使用 查看这篇文章[4]，或者查看帮助及官网[3:1] 参考 Mac-zsh 安装和使用(原创) - 陈斌彬的技术博客 ↩︎ ↩︎ linux - What does the ‘rc’ in .bashrc, etc. mean? - Super User # It stands for “run commands”. ↩︎ wting/autojump: A cd command that learns - easily navigate directories from the command line #官网 ↩︎ ↩︎ 自动补完不算什么，一键直达目录才是终极神器 ↩︎","tags":[],"categories":[{"name":"Zsh","slug":"Zsh","permalink":"https://hmgqzx.github.io/wiki/categories/Zsh/"},{"name":"插件","slug":"Zsh/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Zsh/插件/"}]},{"title":"Pyenv —— Python版本管理工具","date":"2018-03-01T18:13:19.000Z","path":"Python/Python 虚拟环境/","text":"pyenv可以帮助你建立多个版本的 python 环境，它们相互隔离，不会污染到系统自带的 Python（ pip 安装的包也是在各自目录下的） 安装 安装 pyenv pyenv 项目主页#安装步骤 12$ brew update$ brew install pyenv 添加环境变量 PYENV_ROOT指向pyenv检出的根目录，并向$PATH添加$PYENV_ROOT/bin以提供访问pyenv这条命令的路径(这里的shell配置文件依不同SHELL而需作修改,如bash：~/.bash_profile，Zsh：~/.zshrc ） ZSH 用 brew 安装的话，配置好环境变量的了（我自己又按手动方法在 zsh 里加了环境变量） After installation, you’ll still need to add 12eval \"$(pyenv init -)\"eval \"$(pyenv virtualenv-init -)\" to your profile (as stated in the caveats). You’ll only ever have to do this once. pyenv 项目主页#安装步骤 Define environment variable PYENV_ROOT to point to the path where pyenv repo is cloned and add $PYENV_ROOT/bin to your $PATH for access to the pyenv command-line utility. 123# 我的 zsh 将环境变量放在另一个文件（env.sh）中，在那里添加环境变量就可以了$ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.zshrc$ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.zshrc Add pyenv init to your shell to enable shims and autocompletion. Please make sure eval &quot;$(pyenv init -)&quot;is placed toward the end of the shell configuration file since it manipulates PATH during the initialization. 12# 使用自动完成功能，要将配置写在 shell configuration file 末尾$ echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc Restart your shell so the path changes take effect. 1$ exec $SHELL # 重启shell(因为修改了$PATH) 安装 pyenv-virtualenv pyenv-virtualenv 项目主页#安装步骤 使用 brew 安装 1$ brew install pyenv-virtualenv Add pyenv virtualenv-init to your shell to enable auto-activation of virtualenvs. This is entirely optional but pretty useful. See “Activate virtualenv” below. 12345# 使用自动完成等功能，直接将下面这句写在 shell configuration file (~/.zshrc) 末尾就可以eval \"$(pyenv virtualenv-init -)\"# 用命令的话是下面那样：$ echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc 使用 pyenv 使用 命令参考 · yyuu/pyenv pyenv install安装指定的版本 12$ pyenv install -v 2.7.13 #添加-v参数用于显示细节$ pyenv rehash #安装新版本的python或者其他二进制包后都需要运行，或者重启shell pyenv-virtualenv 使用 创建 创建虚拟环境–pyenv virtualenv 版本号 虚拟环境名。 1$ pyenv virtualenv 3.5.1 venv-3.5.1 删除 123$ pyenv uninstall my-virtual-env# 删除时会弹出对话框，输入‘y’确认# 或者你可以直接删除 ~/.pyenv/versions中的相应目录 仅查看python的虚拟环境 1$ pyenv virtualenvs 自动激活 123$ mkdir myproject$ cd myproject$ pyenv local myenv 手动激活 You can also activate and deactivate a pyenv virtualenv manually: 12pyenv activate &lt;name&gt;pyenv deactivate 管理版本的其他简单方法 不要更改系统默认的python2（因为改了可能会导致系统某些用python2写的系统文件出错），每次执行时加版本号，python 就是2的版本，python3就是3的版本；用 pip会安装包到 2 的版本，用pip3会安装到 3的版本。 直接在自己写的程序里指定环境变量，如 #!/usr/bin/env python3。 参考 python虚拟开发环境配置 - 简书 #配置好了 #相关使用可以再参考这个 Python多版本管理器pyenv和虚拟环境pyenv-virtualenv的安装设置 - 简书 使用pyenv搭建python虚拟环境 - 运维之美 | 十条","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"Python collections模块","date":"2018-03-01T18:13:19.000Z","path":"Python/collections模块/","text":"collections模块 Ordered Dict 不可不知的Python模块: collections | piglei’s blog 在Python中，dict这个数据结构由于hash的特性，是无序的 内置字典： 可以看到，在迭代时是“乱”序的 1234567891011a = dict(one=1, two=2, three=3, four=4)print(a)for k, v in a.items(): print(k, v)# run:&#123;'three': 3, 'four': 4, 'one': 1, 'two': 2&#125;three 3four 4one 1two 2 OrderedDict： 12345678910111213from collections import OrderedDictb = OrderedDict(one=1, two=2, three=3, four=4)print(b)for k, v in b.items(): print(k, v) # run:OrderedDict([('one', 1), ('two', 2), ('four', 4), ('three', 3)])one 1two 2four 4three 3 顺序以添加顺序为准，和修改的顺序无关。","tags":[{"name":"Python模块","slug":"Python模块","permalink":"https://hmgqzx.github.io/wiki/tags/Python模块/"}],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"pickle","date":"2018-03-01T18:13:19.000Z","path":"Python/pickle/","text":"有时，我们需要将一个Python对象保存到硬盘里，这时就可以用 pickle 来将其序列化为一个字节流，以便保存。（在需要的时候，可以 load to 重建对象） pickle 是内置的 参考 5.21 序列化Python对象 — python3-cookbook 2.0.0 文档 #解释得非常详细 12.1. pickle — Python object serialization — Python 3.6.1 documentation pickle模块介绍 - Goodpy - 博客园 Python中使用pickle持久化对象 – oldj’s blog #评论中的内容不错","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"Sublime Text 主题","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/Sublime Text 主题/","text":"平时我没有怎么折腾主题，你可以在 TmTheme Editor 找到很多不同配色的主题，并且可以再加自定义后下载 我使用的 我一直使用着默认的 Monokai，往年不变…… Monokai • TmTheme Editor","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"}]},{"title":"pyc文件","date":"2018-03-01T18:13:19.000Z","path":"Python/pyc文件/","text":"Python什么情况下会生成pyc文件？ - 知乎 简单来说，&quot;.pyc&quot; 就是编译过的 “.py” 源代码 具体过程 如果 Python 进程在机器上拥有写入权限，那么它将把程序的字节码保存为一个以 .pyc 为扩展名的文件。当程序运行之后，你会在那些源代码的附近（也就是说同一个目录下）看到这些文件 作用 Python这样保存字节码是作为一种启动速度的优化。下一次运行程序时，如果你在上次保存字节码之后没有修改过源代码的话，Python将会加载.pyc文件并跳过编译这个步骤。当Python必须重编译时，它会自动检查源文件和字节码文件的时间戳：如果你又保存了源代码，下次程序运行时，字节码将自动重新创建。 A program doesn't run any faster when it is read from a ‘.pyc’ or ‘.pyo’ file than when it is read from a ‘.py’ file; the only thing that’s faster about ‘.pyc’ or ‘.pyo’files is the speed with which they are loaded. .pyc 文件的作用是提高 load 的速度 When a script is run by giving its name on the command line, the bytecode for the script is never written to a ‘.pyc’ or ‘.pyo’ file. Thus, the startup time of a script may be reduced by moving most of its code to a module and having a small bootstrap script that imports that module. It is also possible to name a ‘.pyc’ or ‘.pyo’file directly on the command line. 在 import 别的 py 文件时，那个 py 文件会被存一份 pyc 加速下次装载。而主文件因为只需要装载一次就没有存 pyc。","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"Zsh 安装","date":"2018-03-01T18:13:19.000Z","path":"Zsh/zsh-安装/","text":"","tags":[],"categories":[{"name":"Zsh","slug":"Zsh","permalink":"https://hmgqzx.github.io/wiki/categories/Zsh/"}]},{"title":"SSH","date":"2018-03-01T18:13:19.000Z","path":"Unix/ssh/","text":"全称为 Secure Shell，是一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。[1] 其优点是安全可靠（目前），传输的数据可以是经过压缩的[1:1] 基本操作 登录 123$ ssh &lt;user-name&gt;@&lt;host&gt;# 示例$ ssh pipi@192.168.13.202 关闭连接 关闭与对方的连接：直接输入exit 即可 其他操作 修改端口 默认端口是22，使用 p 参数（port）可以修改端口 123$ ssh -p &lt;port&gt; &lt;user-name&gt;@&lt;host&gt; # 示例$ ssh -p 2222 pipi@192.168.13.202 端口转发 参考[2] 原理 请参考[1:2][3] 常见问题 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 场景：一次我将树莓派 A 的 sd 卡拆下，装到另一台树莓派 B 上后，连接树莓派 B 就出现这个警告 解决方法： 1$ ssh-keygen -R \"you server hostname or ip\" 原因： 在第一次 ssh 连接远程服务器时，会生成一个认证，保存在本地这边的 known_hosts。出现这个错误时，只要重新 key generate 就好[4] 更多 我还没仔细看的 一篇很详细的 tutorial [5] 参考 Secure Shell - 维基百科，自由的百科全书 ↩︎ ↩︎ ↩︎ SSH原理与运用（二）：远程操作与端口转发 - 阮一峰的网络日志 ↩︎ SSH原理与运用（一）：远程登录 - 阮一峰的网络日志 ↩︎ SSH連現時出現「WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!」解決辦法 | 電腦故我在 ↩︎ SSH Tutorial for Linux - Support Documentation ↩︎","tags":[],"categories":[{"name":"Unix","slug":"Unix","permalink":"https://hmgqzx.github.io/wiki/categories/Unix/"}]},{"title":"nodePPT —— 自动化生成 PPT","date":"2018-03-01T18:13:19.000Z","path":"其他工具/nodePPT/","text":"之前每当要做一个 PPT 时，内心是十分抗拒的，因为要靠鼠标拖来拖去！ 而 nodePPT 让我不再烦恼这个问题，现在只需书写一份 MarkDown，在其中指定样式、效果，即可生成一份 PPT 详细参考项目主页：GitHub - ksky521/nodePPT: This is probably the best web presentation tool so far!","tags":[],"categories":[{"name":"其他工具","slug":"其他工具","permalink":"https://hmgqzx.github.io/wiki/categories/其他工具/"}]},{"title":"PlantUML —— UML 绘图工具","date":"2018-03-01T18:13:19.000Z","path":"其他工具/PlantUML/","text":"PlantUML 是一个画图脚本语言，用它可以方便地画出许多UML图 官方文档 PlantUML 语言参考文档 #中文 PlantUML Language Reference Guide 特点 支持种类 支持的UML图包括：时序图、用例图、类图、组件图、活动图。 • Sequence diagram, • Usecase diagram, • Class diagram, • Activity diagram, • Component diagram, • State diagram, • Object diagram. 安装 You can easily install GraphViz by installing brew on your Mac machine. This could fix issues if you have installed GraphViz as .dmg package. brew install libtool brew link libtool brew install graphviz brew link --overwrite graphviz Sublime 插件 使用 sublime_diagram_plugin 插件 找到 Package Control:Add Repository 再输入 https://github.com/jvantuyl/sublime_diagram_plugin.git 插件地址 默认绑定：Command + M：渲染 Chrome 插件 Sublime的plantuml插件有点鸡肋。Chrome 下的插件 PlantUML Viewer 可以自动刷新 Advanced usage Advanced usage pages 可以用来生成数独等…… 基本语法 使用 title 来指定标题 线条的形式：-&gt; —&gt; …&gt; 加冒号 : 来添加注释 使用 == xxx == 来分隔时序图 使用 actor 来定义参与者 使用括号 (xxx) 来表示用例，用例用椭圆形表达 组件图 使用方括号 [xxx] 来表示组件 可以把几个组件合并成一个包，可以使用的关键字为 package, node, folder, frame, cloud, database。不同的关键字图形不一样。 参考 使用 Sublime + PlantUML 高效地画图 - 简书 #这个是中文的，入门还可以","tags":[],"categories":[{"name":"其他工具","slug":"其他工具","permalink":"https://hmgqzx.github.io/wiki/categories/其他工具/"}]},{"title":"Git 命令的 alias 别名","date":"2018-03-01T18:13:19.000Z","path":"Git/Git 命令/Git-alias别名/","text":"启用别名 Oh My Zsh 如果你使用 Oh My Zsh，事情非常美好。 Oh My Zsh 中默认启用一个 Git 插件[1]，提供了一套系统别名（alias）。 这样，在命令行中输入 gaa 就相当于 git add --all，快捷很多；而且这套别名应该算是国际通用的。 此外，还推荐一个可以 &lt; 提醒当前输入命令 的 alias &gt; 的插件：alias-tips[2] 参考 Plugin:git · robbyrussell/oh-my-zsh Wiki ↩︎ djui/alias-tips: An oh-my-zsh plugin to help remembering those aliases you defined once ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"},{"name":"Git 命令","slug":"Git/Git-命令","permalink":"https://hmgqzx.github.io/wiki/categories/Git/Git-命令/"}]},{"title":"Git 常用命令","date":"2018-03-01T18:13:19.000Z","path":"Git/Git 命令/Git-常用命令/","text":"如下是个人较常用或一些没有百分百记住的命令，附有 alias (别名)[1] 查看改变 12$ git diff &lt;filename&gt;$ g d &lt;filename&gt; 提交注释 提交一行注释 12$ git commit -m 'your-comment'$ gcmsg 'your-comment' 编辑器提交多行注释 1$ git commit # 设置好后，会进入相应编辑器 分支操作 （新建并）切换分支 12$ git checkout -b &lt;your-branch&gt;$ gcb &lt;your-branch&gt; 作用：切换到指定分支，如果该 branch 尚不存在，则会被新建 场景：在工作中经常需要新建分支，然后切换过去，这个命令结合了两者 撤销改变 git checkout 可以使用如下命令“撤销”掉指定文件的本地改动： 1$ git checkout -- &lt;filename&gt; 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 其他 config 将配置列出来，主要是用来看用户名和邮箱 12$ git config --list$ gcf 注脚和参考 别名的使用需要自己配置，或者是使用插件，具体可以看本 wiki 相关条目内容 ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"},{"name":"Git 命令","slug":"Git/Git-命令","permalink":"https://hmgqzx.github.io/wiki/categories/Git/Git-命令/"}]},{"title":"Git 中提交一大段、多行的注释","date":"2018-03-01T18:13:19.000Z","path":"Git/Git 中提交注释相关/Git-提交大段注释/","text":"如果要添加大段注释，必须要调用文本编辑器。可以使用 core.editor 选项来修改默认的编辑器[1]。 具体配置 两大编辑器 12$ git config --global core.editor emacs$ git config --global core.editor vim 注意： mac 下，指定 vim 提交时，在文本编辑界面，命令模式要使用英文输入法才能响应（如果使用中文输入法敲命令，会报警，还会插入命令的字符） 其他编辑器 1$ git config --global core.editor \"[your editor] -w\" -w 通知 Git 使用其他的指定编辑器 macvim 用 macvim 做commit时的编辑器，用 -f参数能避免下面的提示。（-w 参数无效） Aborting commit due to empty commit message. 在终端修改 git config 如下： 1git config --global core.editor \"/bin/mvim -f\" 使用方法 使用 git commit 调用 例子： 12345touch README.mdgit initgit add README.md# git commit -m \"first commit\" # 命令行添加提交信息git commit # 编辑器添加提交信息 参考 Git - 配置 Git # core.editor ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"},{"name":"Git 中提交注释相关","slug":"Git/Git-中提交注释相关","permalink":"https://hmgqzx.github.io/wiki/categories/Git/Git-中提交注释相关/"}]},{"title":"Aria 2 —— Mac 的下载利器","date":"2018-03-01T18:13:19.000Z","path":"Mac/常用命令行软件/Aria2/","text":"Aria 2 是一个下载利器，可以说是 Mac 和 Linux 下的 IDM（只能用于 Windows 平台）。 下载速度体验 刚开始使用 Mac 时，为下载问题可愁了头，Chrome、Safari 等浏览器很多时候速度很慢。Mac 版百度云网盘更是没眼看。 使用 Aria 2 下载百度云网盘资源，一般可达到满速的 30%，不掉速，还算可以接受（除此之外我也不知道其他更好的办法了 😅） 下载一般 http 协议资源，基本满速 安装和配置 用 brew 安装；没什么特殊需求的话，基本开箱即用 自定义配置可参考这里[1] 常用命令 下载多个文件 从文件读取 文件中的链接一行一个即可；默认同时最多下载 5 个（即-j5） 1$aria2c -i /Users/me/Downloads/aria2c-url.txt 因为 Aria2c 只支持一个实例，所以同时下载多个文件时要用这种方法，建一个 alias 非常方便 参考 Aria2c 使用举例 #虽是中文，但很多过时了，不如看 官方 help Aria 2——下载器中的小清新 | SinoSky ↩︎","tags":[{"name":"工具推荐","slug":"工具推荐","permalink":"https://hmgqzx.github.io/wiki/tags/工具推荐/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"},{"name":"常用命令行软件","slug":"Mac/常用命令行软件","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/常用命令行软件/"}]},{"title":"Chrome 易忘快捷键","date":"2018-03-01T18:13:19.000Z","path":"Mac/常用软件常用快捷键/Chrome/","text":"关闭当前窗口（而不是标签页）： ⌘ + Shift + w 跳转到与查找栏中搜索字词相匹配的下一条内容：⌘ + g 跳转到与查找栏中搜索字词相匹配的上一条内容：⌘ + Shift + g 打开查找栏后，搜索选定文本：⌘ + e（先选定文本，按 ⌘ + e ，再按 ⌘ + g 导航【同时会自动显示搜索栏，单单按 ⌘ + e 还不会显示搜索栏 】） 开发相关 打开“开发者工具”：⌘ + Option + i 显示当前网页的 HTML 源代码（不可修改）：⌘ + Option + u 打开 JavaScript 控制台：⌘ + Option + j 总结：基本是 ⌘ + Option + key 形式 参考 Chrome 键盘快捷键 - Chrome帮助","tags":[{"name":"快捷键","slug":"快捷键","permalink":"https://hmgqzx.github.io/wiki/tags/快捷键/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"},{"name":"常用软件常用快捷键","slug":"Mac/常用软件常用快捷键","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/常用软件常用快捷键/"}]},{"title":"Mac OS X 下常用软件的常用快捷键","date":"2018-03-01T18:13:19.000Z","path":"Mac/常用软件常用快捷键/index/","text":"切换到 Mac OS X 后，一些常用软件的快捷键和在 Windows 使用时不同。另一些开发软件，快捷键又太多，不好记忆。 虽然在 Mac 里搜索菜单项（这点比 Windows 好），但由于以上所述原因，还是有必要对常用的软件的常用快捷键总结一下。当然，一些很熟悉的我就没有列出了（以个人标准评定熟悉与否，见谅）","tags":[{"name":"快捷键","slug":"快捷键","permalink":"https://hmgqzx.github.io/wiki/tags/快捷键/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"},{"name":"常用软件常用快捷键","slug":"Mac/常用软件常用快捷键","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/常用软件常用快捷键/"}]},{"title":"Python 的在线学习资源","date":"2018-03-01T18:13:19.000Z","path":"Python/学习资源推荐/Python在线学习资源/","text":"这里是一些 Python 的在线学习资源，大部分我有看过（且还在看），感觉质量很高，值得推荐。 这里推荐的资源主要关于语言本身，还包含一些实践指导。 入门 廖雪峰的教程[1] 中文资源里不错的入门教程，有 Python2 和 Python3，建议从 Python3 学起 Learn X in Y minutes[2] 语法速成，也可当总结来看 Python 入门指南[3] 本手册非正式的向读者介绍了 Python 语言及其体系相关的基本知识与概念。 笨方法学 Python[4] 这本书面向没有太多基础的人群去学习Python，在国外有很多的粉丝 这本我没仔细看过，不予评价…… 进阶 Python Cookbook[5] 这本书的目标读者是那些想深入理解 Python 语言机制和现代编程风格的有经验的 Python 程序员。 本书大部分内容集中于在标准库，框架和应用程序中广泛使用的高级技术。 这本书不适合 Python 的初学者。事实上，本书假定读者具有 Python 教程或入门书籍中所教授的基础知识。 本书也不是那种快速参考手册 （例如快速查询某个模块下的某个函数） Python最佳实践指南[6] 这份手工制作的指南旨在为Python初学者和专家提供一个 关于Python安装、配置、和日常使用的最佳实践手册。 几乎介绍了 Python 的方方面面，也可在入门时读下，有个整体的框架脉络 全栈 Full Stack Python[7] 从学习资源、开发环境到 web 开发、部署、测试等等，各方面都讲了 各类疑难杂症解答 Stackoverflow 这里[8]是 taizilongxu 翻译的Stack Overflow关于 Python 的部分 Python Cookbook[5:1] 本书旨在聚焦几个最重要的主题，演示几种可能的解决方案， 提供一个跳板引导读者进入一些更高级的内容 每个示例都只是一个入门指导，如果读者想深入研究，需要自己去查阅更多资料。 我们假定读者可以很熟练的使用搜索引擎以及知道怎样查询在线的 Python 文档。 参考 Python教程 - 廖雪峰的官方网站 ↩︎ Learn python in Y Minutes - Python ↩︎ Python 入门指南 — Python tutorial 3.6.0 documentation ↩︎ 序言 | Learn Python the Hard Way 中文版 #目前已出到第四版，这里是第三版 ↩︎ Python Cookbook 3rd Edition Documentation — python3-cookbook 2.0.0 文档 ↩︎ ↩︎ Python最佳实践指南！ — The Hitchhiker’s Guide to Python ↩︎ Full Stack Python 简体中文网站 ↩︎ Stackoverflow about Python | Stackoverflow about Python ↩︎","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"},{"name":"学习资源推荐","slug":"Python/学习资源推荐","permalink":"https://hmgqzx.github.io/wiki/categories/Python/学习资源推荐/"}]},{"title":"Python 字典的常用知识","date":"2018-03-01T18:13:19.000Z","path":"Python/常用札记/Python 字典/","text":"字典处理 合并两个字典 如果使用 Python 3.5+，那么如下方式是最快、最简洁、最 Pythonic 的[1][2]： 1combine-dict = &#123;**dictA, **dictB&#125; 这段代码在功能上与如下方案是等价的： 新建了一个空字典，然后依次往里面填充了来自dictA和dictB的元素 123combine-dict = &#123;&#125;combine-dict.update(dictA)combine-dict.update(dictB) 注脚 The Idiomatic Way to Merge Dictionaries in Python - Trey Hunner ↩︎ 怎样合并字典最符合Python语言习惯？| 编程派 | Coding Python ↩︎","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"},{"name":"常用札记","slug":"Python/常用札记","permalink":"https://hmgqzx.github.io/wiki/categories/Python/常用札记/"}]},{"title":"PlainTasks","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/PlainTasks/","text":"PlainTasks 是一个Sublime Text 插件，可以用来管理 todo-list。 我目前是利用它来帮助践行番茄工作法（每天的 todo 作为单独的一个文件记录，如2017-07-16.todo；脑里蹦出来的注意放在临时的collect.todo；经过整理、安排后的将来计划放入activity-inventory.todo） 阅读插件主页获取更多信息：aziz/PlainTasks: An opinionated todo-list plugin for Sublime Text editor (version 2 and 3) 笔记 下面是我学习使用该插件过程中的一点笔记（较简略，我只是为了掌握更多所需的内容而摘抄节选在此） 标签快捷添加 type t, press tab — it’ll become @today — this one is highlighted differently than other tags; c, tab — @critical; h, tab — @high; l, tab — @low; 打开超链接：cmd + shift + U 超链接格式：skype:nickname file link：.\\filename ，一行一个文件 有点疑惑，支持什么格式?——在 tutorial 里有，在 preferences-&gt;package setting 中 notes Use _ or * for italic and bold just like in Markdown. 截止日期 （高频使用） d, tab — @due( ) 详细格式见下面 Editor Useful Tools: Use ⌘ + control + up/down to move tasks up and down. Use ⌘ + r to see a list of projects and quickly jump between them due 格式 比较常用的： Notation Meaning @due(+) tomorrow as well as @due( +1) or @due( +1d) @due(+2:) two hours since current date @due(+:555) 555 minutes since current date 解释：格式是 +[number][DdWw][h:m] [ ]里的选项是可选的，当没有指定[DdWw]的选项时，[number]默认是天数，单独指定小时使用[h:]，单独指定分钟数使用[:m]（因为要指定是0 hour，不然少了 : 就解析为天数了） 更多请看插件主页 Changing color scheme 我不喜欢默认的屎黄色……还是黑色好点。在 preferences-&gt;package setting 中可以找到设置，里面的配置文件提供了几个主题 If you don’t like colors used in bundled schemes just copy any .hidden-tmTheme from PlainTasks to your User directory, change colors and paste the code below in your user settings file: 12&gt;&#123; &quot;color_scheme&quot;: &quot;Path to your custom color scheme file. e.g. Packages/User/custom_plaintasks.hidden-tmTheme&quot; &#125;&gt; N.B., sometimes you have to restart Sublime Text to apply changes made in tmTheme file. N.B., scope_past_due, scope_due_soon, and scope_misformatted settings can assign any scopes defined in tmTheme file, e.g. you can set &quot;scope_past_due&quot;: &quot;my.own.super.expired.whatever&quot; and then just add style definition in tmTheme for this scope. 其他 预览（Mac 空格键） qlstephen 这个插件虽然声称只是用来预览 without a file extension 的纯文本，但经测试，也可以预览 .todo 后缀的文件","tags":[{"name":"番茄工作法","slug":"番茄工作法","permalink":"https://hmgqzx.github.io/wiki/tags/番茄工作法/"}],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"}]},{"title":"Python 字符串的常用知识","date":"2018-03-01T18:13:19.000Z","path":"Python/常用札记/Python 字符串/","text":"字符串处理 删除字符串中不需要的字符 strip() 方法能用于删除开始或结尾的字符。 lstrip() 和 rstrip() 分别从左和从右执行删除操作。 默认情况下，这些方法会去除空白字符，但是你也可以指定其他字符[1] 需要注意的是这些 strip方法不会对字符串的中间的文本执行去除操作。[1:1] 如果要处理中间的空格，需要使用 replace()方法或者是用正则表达式进行替换[1:2] 查找是否含有某个子字符串 最快、最简洁的方法是[2]： 12if text in string: pass str 和 数值类型的转化 Python 中的都是在方法中传入参数，非常简单[3]： 12int('123')str(123) 注脚 2.11 删除字符串中不需要的字符 — python3-cookbook 2.0.0 文档 ↩︎ ↩︎ ↩︎ python - What’s a faster operation, re.match/search or str.find? - Stack Overflow ↩︎ python数据类型转换（str跟int的转换） - Hello World! - CSDN博客 ↩︎","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"},{"name":"常用札记","slug":"Python/常用札记","permalink":"https://hmgqzx.github.io/wiki/categories/Python/常用札记/"}]},{"title":"Python 模块的导入","date":"2018-03-01T18:13:19.000Z","path":"Python/模块用法/模块导入/","text":"101 在平时的使用中，主要是要知道： 常规导入和 使用 from 语句导入这两种不同方式下，该如何调用函数 常规导入[1] 123&gt;&gt;&gt; import random&gt;&gt;&gt; random.randrange(7) # 调用相关函数时需要说明模块名5 这种不消多说，只需要使用import一词，然后指定希望导入的模块或包即可。不过调用相关函数时需要像上面那样说明模块名。 Python 风格 虽然可以一次性导入多个包或模块，但 Python风格指南建议将每个导入语句单独成行。 对模块重命名 123&gt;&gt;&gt; import random as r&gt;&gt;&gt; r.random()0.4967213766468448 使用from语句导入[1:1] 123&gt;&gt;&gt; from random import randint&gt;&gt;&gt; randint(1,1024) # 相对于常规导入，使用 from 语句导入可以直接调用该函数779 这种方式允许我们只导入一个模块或库中的某个部分[2]。同时，相对于常规导入，使用 from 语句导入可以直接调用该函数。 全盘导入 1from os import * ❗️: 虽然这种做法有时挺方便，但是不建议这样做，因为会打乱命名空间，造成混乱。 选择性导入多个项 圆括号法 12from os import (path, walk, unlink, uname, remove, rename) 续行符法 12from os import path, walk, unlink, uname, \\ remove, rename 相对导入[1:2] 使用原因 为了避免偶然情况下导入标准库中的模块产生冲突 使用场合 如果你编写了很多相关性强的代码，那么应该采用这种导入方式。你会发现PyPI上有很多流行的包也是采用了相对导入 参考 注 Python 101: All about imports | The Mouse Vs. The Python 中文翻译： Python导入模块的几种姿势| 编程派 | Coding Python ↩︎ ↩︎ ↩︎ 在复杂的代码库中，能够看出某个函数是从哪里导入的这点很有用的 ↩︎","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"},{"name":"模块用法","slug":"Python/模块用法","permalink":"https://hmgqzx.github.io/wiki/categories/Python/模块用法/"}]},{"title":"SideBarEnhancements","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/SideBarEnhancements/","text":"SideBarEnhancements是一个快捷键增强插件，使用最广泛的就是用来定义浏览器预览文件。 打开Package Setting &gt; Side Bar &gt; Key Bindings - User即可自定义浏览器预览快捷键，如下代码定义chrome所示： 123456789101112[ //borwser preview. &#123; \"keys\": [\"f2\"], \"command\": \"side_bar_files_open_with\", \"args\": &#123; \"paths\": [], \"application\": \"/Applications/Google Chrome.app\", \"extensions\": \".*\" &#125; &#125;] keys字段表示绑定的快捷键，command字段表示关联的程序，application表示要打开的软件，最后extensions表示将要使用软件打开何种扩展文件，.*表示所有文件。","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"}]},{"title":"Sublime Text 插件","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/Sublime Text 插件/","text":"参考 写这篇之前已经安装几个不错的插件，因为熟悉了所以没有记录在这里——包括 package control的配置等；建议参考如下链接 sublime text3 常用插件 · GitBook 如何优雅地使用Sublime Text | 晚晴幽草轩 一个前端程序猿的Sublime Text3的自我修养 | 三省吾身丶丶 jikeytang/sublime-text: sublime-text 我近期尝试中的其他插件 AdvancedNewFile 快速新建文件 假设有文件夹file。我们正在输入代码，又想在新的子目录下新建html文件的话用传统方式得很多步，新建目录，新建文件，保存等等等。 但是有了该插件之后，事情就变得简单了许多，只需要按下Ctrl+Shift+N，输入文件夹以及文件名，你就会看到如下效果:（回车，你会发现已经子目录下的文件已经新建完成了！） 还没配置好,不太会用 HTML-CSS-JS Prettify 代码格式化 其实有了这个代码格式化插件，就可以删除上面的代码格式化插件了。因为功能确实强大！ 官网插件配置 FED社区：sublime text 3 插件：HTML-CSS-JS Prettify 其实我把官网的配置趴下来之后就改了两个地方： &quot;selector_separator_newline&quot;: false： 不需要每个CSS选择器单独占一行 &quot;allowed_file_extensions&quot;: [&quot;..这是老的，新增在--&gt;&quot;,&quot;vue&quot;],：将vue的组件当成html来进行格式化 默认快捷键：cmd+Shift+H ###liveReload 文件保存浏览器即时刷新 该插件在window下，有很多问题会导致不能使用，mac下可以正常使用 需安装对应的chrome插件：chrome商店下载，完成后需勾选允许访问文件网址 为了避免每一次启动实时刷新在sulime里面启动一遍插件，可在插件设置中增加如下字段： 123456&#123; &quot;enabled_plugins&quot;: [ &quot;SimpleReloadPlugin&quot;, &quot;SimpleRefresh&quot; ]&#125; 这时就只需要在浏览器端点一下小圆圈就好了 FileDiffs 比较文件差异 手下的几个码农的代码风格与自己并不相同，经常代码汇总过来我都不知道他们改了什么，这个插件还是很给力的。 sidebar 123456789101112[ //borwser preview. &#123; &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: &#123; &quot;paths&quot;: [], &quot;application&quot;: &quot;/Applications/Google Chrome.app&quot;, &quot;extensions&quot;: &quot;.html&quot; &#125; &#125;] ColorPick 快捷键设置 /Users/me/Library/Application Support/Sublime Text 3/Packages/ColorPick/Default (OSX).sublime-keymap","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"}]},{"title":"Vim 中设置 tab 自动转换为 4 个空格","date":"2018-03-01T18:13:19.000Z","path":"Vim/Vim 札记/Vim中设置tab与空格/","text":"设置方法 在 .vimrc 文件（没有就在 $HOME 下新建一个）中设置[1]： 123456789filetype plugin indent on\" show existing tab with 4 spaces widthset tabstop=4\" when indenting with '&gt;', use 4 spaces widthset shiftwidth=4\" Sets the number of columns for a TABset softtabstop=4\" On pressing tab, insert 4 spacesset expandtab 另一个回答附有有更通俗的注释[2]： 1234567891011filetype plugin indent onset tabstop=4 \" The width of a TAB is set to 4. \" Still it is a \\t. It is just that \" Vim will interpret it to be having \" a width of 4.set shiftwidth=4 \" Indents will have a width of 4set softtabstop=4 \" Sets the number of columns for a TABset expandtab \" Expand TABs to spaces filetype 命令说明 文档说明[3][4] 1filetype plugin indent on 这行命令主要是用于开启文件类型检测 作用 vim通过对文件类型的识别，可以为不同类型的文件，设置不同的选项值、定义不同键绑定等。例如，对于c类型的文件，它就和bash脚本有不同的注释格式、不同的缩进格式、不同的关键字等。vim在设置文件类型后，会触发FileType事件，执行FileType相关的自动命令，对不同类型的文件区别对待。[5] commands 命令具体说明 以下列出了设置时需要使用的命令的说明：tabstop, shiftwidth, expandtab, 和 softtabstop tabstop Set tabstop to tell vim how many columns a tab counts for.[6] tabstop 设置 vim 中每个 tab 展开的列数 softtabstop Set softtabstop to control how many columns vim uses when you hit Tab in insert mode.[6:1] 顾名思义，softtabstop 是 tabstop 的 soft 版本 expandtab When expandtab is set, hitting Tab in insert mode will produce the appropriate number of spaces.[6:2] 对 expandtab 进行设置后，点击 tab 就会将其转换为对应数量的空格 shiftwidth Set shiftwidth to control how many columns text is indented with the reindent operations (&lt;&lt; and &gt;&gt;) and automatic C-style indentation.[6:3] 综合 设置情况 Vim 行为 softtabstop &lt; tabstop；expandtab 没有设置 混合使用 tab 和 space 来生成期望的 spacing softtabstop = tabstop；expandtab 没有设置 总是使用 tab 设置了 expandtab 总是使用 空格 可以看到，我们应该设置 expandtab，以让 Vim 自动将 tab 转换成对应的空格 参考 whitespace - Tab key == 4 spaces and auto-indent after curly braces in Vim - Stack Overflow ↩︎ vim - Redefine tab as 4 spaces - Stack Overflow ↩︎ indentation - What is the difference between filetype plugin indent on and filetype indent on? - Vi and Vim Stack Exchange ↩︎ Vim documentation: filetype (英）VIM: filetype（中） ↩︎ vi/vim使用进阶: 开启文件类型检测 – 易水博客 ↩︎ Secrets of tabs in vim ↩︎ ↩︎ ↩︎ ↩︎","tags":[],"categories":[{"name":"Vim","slug":"Vim","permalink":"https://hmgqzx.github.io/wiki/categories/Vim/"},{"name":"Vim 札记","slug":"Vim/Vim-札记","permalink":"https://hmgqzx.github.io/wiki/categories/Vim/Vim-札记/"}]},{"title":"有限状态机 FSM","date":"2018-03-01T18:13:19.000Z","path":"42/有限状态机/","text":"定义 有限状态机（Finite-state machine）是一种用来进行对象行为建模的工具，其作用主要是描述对象在它的生命周期内所经历的状态序列，以及如何响应来自外界的各种事件。[1] 特征 简单说，它有三个特征[2]： 状态总数（state）是有限的。 任一时刻，只处在一种状态之中。 某种条件下，会从一种状态转变（transition）到另一种状态。 几个重要概念[3] 状态（State）：表示对象的某种形态，在当前形态下可能会拥有不同的行为和属性。 转移（Transition）：表示状态变更，并且必须满足确使转移发生的条件来执行。 动作（Action）：表示在给定时刻要进行的活动。 事件（Event）：事件通常会引起状态的变迁，促使状态机从一种状态切换到另一种状态。 状态机的要素[1:1] 状态机可归纳为4个要素，即现态、条件、动作、次态。“现态”和“条件”是因，“动作”和“次态”是果。详解如下： 现态：当前所处的状态。 条件：又称为“事件”。当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。 次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。 我们可以用状态表了表示整个过程，如下图所示。 状态表 注意的问题 避免把某个“程序动作”当作是一种“状态”来处理[1:2] 那么如何区分“动作”和“状态”？“动作”是不稳定的，即使没有条件的触发，“动作”一旦执行完毕就结束了；而“状态”是相对稳定的，如果没有外部条件的触发，一个状态会一直持续下去。 例子 游戏 有限状态机用来编游戏和故事是最好的了。[4] 这有一个寻宝游戏，首先你从‘开始’出发，然后你跟随箭头知道你到达终点。 褒扬和批判 游戏开发 在游戏开发中使用状态机显然不失为一种不错的选择，首先它的概念并不复杂，其次它的实现也十分简单而直接。但它的缺点却也十分明显，例如难以复用，因为它往往需要根据具体的情况来做出反应，当然当状态机的模型复杂到一定的程度之后，也会带来实现和维护上的困难。[3:1] 更多 参考：[5] 代码相关：[2:1] 对JavaScript的意义在于，很多对象可以写成有限状态机。 参考 深入浅出理解有限状态机 - 简书 ↩︎ ↩︎ ↩︎ JavaScript与有限状态机 - 阮一峰的网络日志 ↩︎ ↩︎ 趣说游戏AI开发：对状态机的褒扬和批判 - Runtime - SegmentFault ↩︎ ↩︎ Programming Basics: 有限状态机 ↩︎ 有限状态机 - 维基百科，自由的百科全书 ↩︎","tags":[],"categories":[{"name":"42","slug":"42","permalink":"https://hmgqzx.github.io/wiki/categories/42/"}]},{"title":"元学习理论","date":"2018-03-01T18:13:19.000Z","path":"元理论/元学习/元学习理论/","text":"参考 如何长时间高效学习？ - Andrew Xu 的回答 - 知乎 Learning How to Learn, Part 1 Learning How to Learn: Powerful Mental Tools to Help You Master Tough Subjects:（翻译）有关学习的10个好习惯和10个坏习惯 如何学习：学习困难科目的实用思维方法 Learning How to Learn: Powerful Mental Tools to Help You Master Tough Subjects 你有什么相见恨晚的高效学习方法？ - 高太爷的回答 - 知乎 怎样看待 12 个月内自学完成 4 年麻省理工学院计算机科学的 33 门课程的 Scott H. Young 所谓的超速学习理论和方法（费曼技巧）以及背后「Get More from Life」的理念？ - 知乎 (还没看完) 人在学习和思考时两种不同的模式：专注模式 (Focused mode) 和发散模式 (Diffuse mode)。这两个模式是可以互相切换的，但不能同时进行。可以在紧张的学习新知识的时候通过洗澡、散步等让自己放松的事情主动进入发散模式来帮助加深理解。 记忆分为长期记忆 (Lone-term memory) 和工作记忆 (Working memory)。工作记忆也就是短期记忆，一般认为可以存放4块 (Chunks, 关于chunk后面会深入介绍) 信息，就像一块不太好用的黑板，不仅大小有限，而且很容易就被抹掉了 长期记忆的容量很大，从工作记忆转化到长期记忆需要时间以及不断的重复 重复的技巧：spaced repetition, 就是一晚上重复20遍的效果不如你每天重复几遍 影响学习的因素 睡眠 睡眠对学习也十分重要 (下面论据以前都听过，但是我没有去看过原始论文) 我们觉醒时大脑会产生有毒的物质，而睡觉时大脑细胞收缩，细胞间隙变大，脑脊液可以通过并且清理掉这些东西。 睡眠时大脑会整理你的想法和你学习的内容，不重要的记忆会被清理掉，而你想要记住的会得到加强。 睡眠时大脑还可以重复你白天学习的复杂知识，对解决难题和理解知识都有帮助。 在睡觉之前看的东西更容易进入你的梦境，而梦到它又有助于你对它的理解 锻炼身体 锻炼身体很重要。 除了散步洗澡听音乐等让你放松的方式会帮助你进入发散模式，锻炼身体能让你从之前集中精力的地方解放出来，使得发散模式有机会呈现，锻炼身体对大脑生长新的神经元有益。 新生成的神经结构如果不通过重复来巩固的话会消失，而锻炼身体可以延长神经结构的寿命，它被证实比任何药物都有效。而且锻炼影响的不仅仅是大脑细胞，全身细胞都受益。 chunk chunk 是已经加工好的知识，是我们解决问题的时候真正会使用的东西。 生成chunk的方法：Focus, Understand, Practice。 Focus 形成chunk的首要条件就是集中注意力。学习过程中的分心会导致chunk无法形成，理由如下图所示： 在形成chunk的时候，你的working memory像一只四脚章鱼一样，在努力建立新的神经结构，分心会占用章鱼有限的四只脚使得原本的chunk很难形成。 Form Chunk with Distraction Understand 不要将“啊哈”那样的顿悟或者看到答案瞬间的会心一笑当成真正的理解。如果初次理解后长时间不温故，那么很快就会想不起来了（印象／颜色淡了）。所以第一次真正学会了某样东西应该是在你合上书自己做出来了一遍之后。看别人的画作不意味着你也能画出来，听别人唱歌也不意味着你也能一模一样的张口就唱，你必须自己练习几遍。 Recall 人们自然会觉得repeat（重复）学过的东西多了就记住了，形成chunk了。实际上有种更好的方法，叫recall（回想）。Recall能调动更多的记忆，使得chuck更整洁干净。在不同的地点Recall好处更多，可以让你不用受环境限制。很多时候有书本在手边google在眼前，你会觉得你掌握了新的知识，但实际上是一种illusion of competence.如何避免幻觉？mini test，自己给自己小测验，它让你真正掌握知识。Recall也算是一种有效的mini test。 技巧 专注于过程 一直想着结果，可能会激活痛觉中枢，让你痛苦，进度放慢或拖延；应该专注于过程，想着下一步该如何做，将注意力集中在做事上面，做一个番茄时间，先不去考虑结果如何 计划的制定 要在每晚睡觉前做好第二天的日计划，因为研究表明睡眠中大脑会自动梳理如何做这些任务，使你第二天做的时候更容易上手。 不要过多的画重点 学习时不要过多的画重点，因为这可能会给你一种错觉，你会误以为记住了这些划过的内容，提倡在学习的过程中多提炼中心思想。或者通过回想来自己写出笔记，而不是单纯地复制整理 deliberate practice 对于我们已经掌握的东西，没必要一直重复学习了，你更应该多花时间和精力在你感觉最难的部分 通过习惯的养成来克服拖延 拖延会越陷越深，以至于恶性循环，但是如果只用意志力来克服拖延，也不是好的做法，因为消耗了意志力，很痛苦 习惯养成的方法 导火线：导火线就是会引发你下一步的习惯性动作的东西，或者说是你所处的环境。如果下一步的习惯性动作是好的，那么增加它；否则，减少它。 习惯性动作：要减少坏影响的习惯性动作。方法是想象接下来的计划，每一步的步骤，完成后的效果等等 奖励：只付出不奖励是不可取的，但也不能盲目奖励 信念：相信自己可以慢慢变好，并为之努力 缓解疲劳 在疲劳来临之前休息放松是最好的缓解疲劳的方法 定结束时间 在结束时间前，认认真真做好清单上的事情；结束时间后，就不要多想，尽情地放松下","tags":[],"categories":[{"name":"元理论","slug":"元理论","permalink":"https://hmgqzx.github.io/wiki/categories/元理论/"},{"name":"元学习","slug":"元理论/元学习","permalink":"https://hmgqzx.github.io/wiki/categories/元理论/元学习/"}]},{"title":"感冒","date":"2018-03-01T18:13:19.000Z","path":"生活/感冒/感冒/","text":"如果感冒的症状比较轻， 最明智的选择是多喝水，多休息，等着它自己痊愈就行了。 感冒药成分 常见的感冒药的有效成分主要是如下组合[1]： 解热镇痛药 抗过敏药 减充血药 止咳药和祛痰药 解热镇痛药 常见的解热镇痛药有：阿司匹林、对乙酰氨基酚（扑热息痛）、布洛芬、双氯芬酸。 常规使用下，选择 对乙酰氨基酚 即可 服用解热镇痛药时还要注意不要饮酒，否则可增加副作用和对肝脏的损伤。 抗过敏药 在感冒时，体内会产生更多的组胺，从而产生诸如鼻子发痒、流鼻涕、打喷嚏等类似过敏的症状。[1:1] 在感冒药中常用的抗过敏成分是氯苯那敏（扑尔敏）和苯海拉明。 使用抗过敏药需要注意的是，常用的此类药物都有让人嗜睡的副作用 减充血药 在感冒时，鼻腔粘膜中的小血管充血肿胀，使得鼻粘膜也肿了起来，这就造成了鼻子不通气的情况。 感冒药中常用的减充血药是伪麻黄碱。 这类药物具有广泛的收缩血管的作用，使用后会造成血压上升。这对于血压正常的人尚不足以构成威胁，但本身患有高血压的人就要小心了。 另外，伪麻黄碱对中枢有一定的兴奋作用 止咳药和祛痰药 参考[1:2] 注脚 科学松鼠会 » 感冒药攻略（内含囧插图……） ↩︎ ↩︎ ↩︎","tags":[],"categories":[{"name":"生活","slug":"生活","permalink":"https://hmgqzx.github.io/wiki/categories/生活/"},{"name":"感冒","slug":"生活/感冒","permalink":"https://hmgqzx.github.io/wiki/categories/生活/感冒/"}]},{"title":"布洛芬","date":"2018-03-01T18:13:19.000Z","path":"生活/感冒/布洛芬/","text":"布洛芬（英语：Ibuprofen），是一种非甾体抗炎药（NSAID），用来止痛，退烧和消炎。通常认为布洛芬的抗炎效果比其他NSAID弱，而止痛效果较强。与其他NSAID相比，布洛芬导致胃肠道出血的风险较低。 在所有非选择性非类固醇消炎止痛药中，服用布洛芬产生药物不良反应的事例最少。但是上述情况只有在低剂量时是成立的。 参考","tags":[],"categories":[{"name":"生活","slug":"生活","permalink":"https://hmgqzx.github.io/wiki/categories/生活/"},{"name":"感冒","slug":"生活/感冒","permalink":"https://hmgqzx.github.io/wiki/categories/生活/感冒/"}]},{"title":"对乙酰氨基酚","date":"2018-03-01T18:13:19.000Z","path":"生活/感冒/对乙酰氨基酚/","text":"对乙酰氨基酚（英语：Acetaminophen，也称扑热息痛（Paracetamol），简称APAP）是一种广泛使用的非处方止痛及退烧药。对乙酰氨基酚常用来缓解头痛及各种轻至中度疼痛，也是许多感冒药的成分之一。虽然对乙酰氨基酚可以用来治疗炎性疼痛，但是其并不是非甾体抗炎药（NSAID），因为其抗炎作用非常弱。 虽然按推荐剂量服用对乙酰氨基酚很安全，但是轻微过量即可能致命。与其他非处方镇痛药相比，对乙酰氨基酚在低剂量时较安全，但是高剂量时毒性明显更高。 其他 对乙酰氨基酚对猫和狗有着较强的毒性，因此任何情况下都不要给药。猫缺少必要的酶来代谢对乙酰氨基酚，使药物浓度下降到安全水准，因此微量的对乙酰氨基酚就可导致猫死亡 参考","tags":[],"categories":[{"name":"生活","slug":"生活","permalink":"https://hmgqzx.github.io/wiki/categories/生活/"},{"name":"感冒","slug":"生活/感冒","permalink":"https://hmgqzx.github.io/wiki/categories/生活/感冒/"}]},{"title":"","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/abs/Plank/","text":"","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"abs","slug":"健身/动作/abs","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/abs/"}]},{"title":"Emmet 语法简单总结","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/Emmet/Emmet 语法/","text":"根据当前文件的解析模式来判断要使用 HTML 语法还是 CSS 语法来解析 在没有后缀的文件中，你可以按下shift + ctrl + p呼出面板，输入seth就可以设置当前文件的解析模式为 HTML HTML 对应语法总结 HTML 文档初始结构 输入!或html:5 id 用 # 标记 class 用 . 标记 多个 class 也是用 . 间隔即可 层次控制 平级元素 + 后代 &gt; 提升层次 ^ 当使用 div&gt;ul&gt;li 的指令之后，再继续写下去，那么后续内容都是在 li 下级的。如果我想编写一个跟 ul 平级的 span 标签，那么我需要先用 ^ 提升到上一个层次。 重复 * ul&gt;li*5 分组 () 用括号进行分组，表示一个代码块，分组内部的嵌套和层级关系和分组外部无关 分组也能使用 * 其他 自定义属性 [] 编号 $ ul&gt;li.item$*5 ​ HTML 简写规则简单总结 1. E 代表HTML标签。 2. E#id 代表id属性。 3. E.class 代表class属性。 4. E[attr=foo] 代表某一个特定属性。 5. E{foo} 代表标签包含的内容是foo。 6. E&gt;N 代表N是E的子元素。 7. E+N 代表N是E的同级元素。 8. E^N 代表N是E的上级元素。 参考 HTML/CSS 速写神器：Emmet | bubkoo CSS 对应语法总结 单位别名 p 表示% e 表示 em x 表示 ex 快捷键 Ctrl+, 展开缩写 Ctrl+M 匹配对 Ctrl+H 使用缩写包括 Shift+Ctrl+M 合并行 Ctrl+Shift+? 上一个编辑点 Ctrl+Shift+? 下一个编辑点 Ctrl+Shift+? 定位匹配对 Cheat Sheet","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"},{"name":"Emmet","slug":"Sublime-Text/插件/Emmet","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/Emmet/"}]},{"title":"BracketHighlight 配置","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/BracketHighlight/BracketHighlight 配置/","text":"参考 Customizing - BracketHighlighter Documentation //Sublime Text Love - Plugin: BracketHighlighter - 括號高亮 SublimeText插件BracketHighlighter配置 | 我的笔记 高亮方式 支持4种高亮方式:underline/outline/highlight/solid 不用重启就能看到修改效果 括号种类 name meaning Bracket Tag &lt;tag&gt; &lt;/tag&gt; Bracket Curly { } Bracket Round ( ) Bracket Square [ ] Bracket Quote ' ' 、&quot; &quot; Bracket Unmatched 没有成对匹配到的符号（所有种类） 我的配置 以下是我自己 Mac 上的配置，路径什么的根据自己灵活变通更改就好 主要有两个地方要改： My personal configuration: bh_core.sublime-settings 复制默认的值进入 /Users/me/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User 然后根据喜好更改高亮方式 My personal configuration: [Default Theme].tmTheme 这个配置主要是更改 foreground color（前景色），也就是高亮颜色 方法： 上 TmTheme Editor 里搞个 tmTheme 文件下来, 放入 /Users/me/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User 中 打开主题文件,添加如下代码 在下方，与其它标签对齐 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Tag&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.tag&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#66CCCC&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Curly&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.curly&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#CC99CC&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Round&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.round&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#FFCC66&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Square&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.square&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#6699CC&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Angle&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.angle&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#F99157&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Quote&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.quote&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#99CC99&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Unmatched&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.unmatched&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#F2777A&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"},{"name":"BracketHighlight","slug":"Sublime-Text/插件/BracketHighlight","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/BracketHighlight/"}]},{"title":"Barbell Curl 杠铃弯举","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/arms/Barbell Curl/","text":"基本知识 锻炼部位 动作指导 bodybuilding.com Stand up with your torso upright while holding a barbell at a shoulder-width grip. The palm of your hands should be facing forward and the elbows should be close to the torso. This will be your starting position. 站直，握住杠铃，手的握姿和肩部等宽。手掌朝向外面，手肘应该贴近躯干 While holding the upper arms stationary, curl the weights forward while contracting the biceps as you breathe out. Tip: Only the forearms should move. 向上弯曲，抬起杠铃（尽量保持上臂不动，只移动前臂）。当开始碰到二头肌时，呼气 Continue the movement until your biceps are fully contracted and the bar is at shoulder level. Hold the contracted position for a second and squeeze the biceps hard. 继续保持这样的移动，直到二头肌被完全接触（杠铃上升到肩部位置）。保持这个姿势 1 秒钟，在这个位置挤压二头肌 Slowly begin to bring the bar back to starting position as your breathe in. 缓慢放下杠铃，同时吸气 Repeat for the recommended amount of repetitions. 重复以上动作 其他注意点 Once the bar is back in the start position, straighten your arms fully to tense your triceps to ensure that your biceps are worked through the fullest possible range of motion. 当杠铃回到初始位置，完全升直 arms 以使得三头肌紧张，这会让二头肌得到最大范围的移动 The bar should be resting across the thighs. 回到初始位置时，杠铃应该下降到大腿处（也就是要升直 arms ） 尽量保持你二头肌的紧张 使用二头肌作为主要动力，前肩和前臂作为次要肌群 不要摆动身体来将杠铃“晃”上来，身体也不要向后弯曲；保持身体固定 When you lift the weight, do not let the elbows come forward. Do not let the weight drop quickly. Make sure that the barbell does not touch your body. 其他演示视频 Barbell Curl Exercise Guide and Video Barbell Curl Bodybuilding Exercises : Bodybuilding: Standing Bicep Barbell Curls - YouTube 参考 standing barbell curl Barbell Curl Exercise Guide and Video Standing Barbell Curl: Forms, Techniques, Tips, and Pictures","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"arms","slug":"健身/动作/arms","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/arms/"}]},{"title":"Barbell Deadlift","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/back/Barbell Deadlift/","text":"基础知识 锻炼肌肉群 姿势入门 Approach the bar so that it is centered over your feet. Your feet should be about hip-width apart. Bend at the hip to grip the bar at shoulder-width allowing your shoulder blades to protract. Typically, you would use an alternating grip. 走近杠铃，让杠铃的投影处于脚的中间。脚的站距应该和髋宽差不多。髋部弯曲，抓杠铃，手的距离为肩宽 With your feet and your grip set, take a big breath and then lower your hips and flex the knees until your shins contact the bar. Look forward with your head. Keep your chest up and your back arched, and begin driving through the heels to move the weight upward. 脚站稳，手抓牢后，深吸一大口气，继续下降髋部、屈膝，直到小腿碰到杠铃。正视前方（？） After the bar passes the knees aggressively pull the bar back, pulling your shoulder blades together as you drive your hips forward into the bar. 当杠铃经过膝盖后，竭力地向后拉起杠铃（肩胛骨收缩，髋部向前[但不要过度，恢复到正常位置即可]） Lower the bar by bending at the hips and guiding it to the floor.","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"back","slug":"健身/动作/back","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/back/"}]},{"title":"Dumbbell Bench Press","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/chest/Dumbbell Bench Press/","text":"基础知识 锻炼肌肉群 入门指导 Lie down on a flat bench with a dumbbell in each hand resting on top of your thighs. The palms of your hands will be facing each other. 坐在长凳上，握好哑铃，将哑铃放在大腿上，手掌相对。 Then, using your thighs to help raise the dumbbells up, lift the dumbbells one at a time so that you can hold them in front of you at shoulder width. 然后，利用大腿来顶起哑铃，一次顶一个。哑铃的宽度为肩宽 Once at shoulder width, rotate your wrists forward so that the palms of your hands are facing away from you. The dumbbells should be just to the sides of your chest, with your upper arm and forearm creating a 90 degree angle. Be sure to maintain full control of the dumbbells at all times. This will be your starting position. 调整到肩宽后，旋转手腕，调整到手掌朝向外面。哑铃位置应该在胸部旁边，上臂和前臂呈 90°。注意任何时候都要完全控制住哑铃。这就是起始的姿势 Then, as you breathe out, use your chest to push the dumbbells up. Lock your arms at the top of the lift and squeeze your chest, hold for a second and then begin coming down slowly. Tip: Ideally, lowering the weight should take about twice as long as raising it. 然后，伴随着呼气，使用胸部力量将哑铃推上去。在最高处时，锁住手臂，挤压胸部，保持一秒后缓慢降下。提示：下降的时间大约是上升时的两倍长 Repeat the movement for the prescribed amount of repetitions of your training program. 注意 Caution: When you are done, do not drop the dumbbells next to you as this is dangerous to your rotator cuff in your shoulders and others working out around you. 当做完练习后，不要直接丢掉哑铃。这会伤害你的肩膀，也可能伤害到旁边的人 Just lift your legs from the floor bending at the knees, twist your wrists so that the palms of your hands are facing each other and place the dumbbells on top of your thighs. When both dumbbells are touching your thighs simultaneously push your upper torso up (while pressing the dumbbells on your thighs) and also perform a slight kick forward with your legs (keeping the dumbbells on top of the thighs). By doing this combined movement, momentum will help you get back to a sitting position with both dumbbells still on top of your thighs. At this moment you can place the dumbbells on the floor. 利用动量坐起来。不想看英文可看视频 tips Imagine you’re trying to push yourself away from the weights rather than pushing the weights away from yourself. Ensure you maintain some tension in your abs and don’t allow your lower back to arch excessively. Keep your feet flat on the floor and don’t allow the lower body to move during the set. Don’t: Clang the dumbbells together at the top. 不要让哑铃在空中撞击 Breathe in on the descent and breathe out forcefully on the ascent of each repetition. ​ 参考 Dumbbell Bench Press: Video Exercise Guide &amp; Tips","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"chest","slug":"健身/动作/chest","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/chest/"}]},{"title":"Wide-Grip Lat Pulldown","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/back/Wide-Grip Lat Pulldown/","text":"基础知识 锻炼肌肉群 姿势入门 Sit down on a pull-down machine with a wide bar attached to the top pulley. Make sure that you adjust the knee pad of the machine to fit your height. These pads will prevent your body from being raised by the resistance attached to the bar. 在 pull-down 机旁坐下。检查机器上的膝盖垫子的高度是否适合自己。这些垫子的作用是防止你被杆的反向力“翘起” Grab the bar with the palms facing forward using the prescribed grip. Note on grips: For a wide grip, your hands need to be spaced out at a distance wider than shoulder width. For a medium grip, your hands need to be spaced out at a distance equal to your shoulder width and for a close grip at a distance smaller than your shoulder width. 手掌朝前，抓牢杠。因为是宽距握法，所以手伸开的距离要比肩宽大（中距握法则等于肩宽，窄距握法则小于肩宽） As you have both arms extended in front of you holding the bar at the chosen grip width, bring your torso back around 30 degrees or so while creating a curvature on your lower back and sticking your chest out. This is your starting position. 手臂向前握住杠后（按照对应宽度），躯干向后大约30°，挺胸，后背下部弯曲 As you breathe out, bring the bar down until it touches your upper chest by drawing the shoulders and the upper arms down and back. **Tip:**Concentrate on squeezing the back muscles once you reach the full contracted position. The upper torso should remain stationary and only the arms should move. The forearms should do no other work except for holding the bar; therefore do not try to pull down the bar using the forearms. 随着体内气体呼出（这会增强核心肌肉），使用肩部力量拉下杠铃，直到它到达上胸处 tips: 一旦达到 the full contracted position，集中精力挤压后背的肌肉。上半身应该保持固定，只有手臂才应该移动。前臂只是用来 holding 铁杠，不要借助前臂的力量去拉下铁杆 After a second at the contracted position squeezing your shoulder blades together, slowly raise the bar back to the starting position when your arms are fully extended and the lats are fully stretched. Inhale during this portion of the movement. 挤压维持一秒后，缓慢上升，直到手臂完全伸展，背阔肌也完全“铺开”。在这个过程中的某个部分进行吸气 Repeat this motion for the prescribed amount of repetitions.","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"back","slug":"健身/动作/back","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/back/"}]},{"title":"Standing Military Press","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/shoulder/Standing Military Press/","text":"基础知识 锻炼肌肉群 姿势入门指导 Start by placing a barbell that is about chest high on a squat rack. Once you have selected the weights, grab the barbell using a pronated (palms facing forward) grip. Make sure to grip the bar wider than shoulder width apart from each other. 手握姿势：手掌朝前。握距比肩宽大 Slightly bend the knees and place the barbell on your collar bone. Lift the barbell up keeping it lying on your chest. Take a step back and position your feet shoulder width apart from each other. 略微弯曲膝盖，将杠铃放到锁骨高度。举起杠铃，让重量落在胸上。 Once you pick up the barbell with the correct grip length, lift the bar up over your head by locking your arms. Hold at about shoulder level and slightly in front of your head. This is your starting position. 锁定上臂，将杠铃举过头顶。 Lower the bar down to the collarbone slowly as you inhale. Lift the bar back up to the starting position as you exhale. Repeat for the recommended amount of repetitions. 上面应该是网站出错了，前后顺序不对","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"shoulder","slug":"健身/动作/shoulder","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/shoulder/"}]},{"title":"Squat 深蹲","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/legs/Squat/","text":"标准深蹲 当我们是小 baby 时，天生就会标准深蹲！ 还有第三世界深蹲~ 蹲厕！ 基础理论 练习肌肉群 种类 the three most common are the high bar back squat (sometimes called an “Olympic squat” or “Oly Squat”), a low bar back squat, and a front squat. 它们的区别是杠铃位置的不同 basic set up 基本准备 No matter what type of squat you do, the basic set up will be the same find a squat rack, power cage, or a squat stand and set the height of the bar to be about the same height as your collarbone. If your options are either too high or too low, it’s always best to go too low – you don’t want to have to get up on your toes to rack/unrack the bar, especially as the weight gets heavier. 找到一个蹲架等，将杆升到和锁骨位置大致一样高。如果无法调到完美的位置——对你来说感到有些高或有些低，那么选择低的位置。这样在拿取/放置杠铃时不需要踮起脚 动作要领 bodybuilding.com Begin with the barbell supported on top of the traps. The chest should be up and the head facing forward. Adopt a hip-width stance with the feet turned out as needed. 将杠铃从“沟”中顶起。挺胸，头正视，采取和髋部等宽的站姿 Descend by flexing the knees, refraining from moving the hips back as much as possible. This requires that the knees travel forward. Ensure that they stay align with the feet. The goal is to keep the torso as upright as possible. 弯膝下降，尽量不要让髋部（臀）向后移动【note:这部分和其他教程的理念有冲突？】 —— 要实现这样的效果，膝盖必须向前移动，膝盖的移动轨迹和脚的朝向保持一致。这样做的目的是让躯干尽可能保持笔直（是笔直，不是和地面垂直） Continue all the way down, keeping the weight on the front of the heel. At the moment the upper legs contact the lower legs reverse the motion, driving the weight upward. 下降时将重量集中到脚后跟的前方；当大腿接触小腿时，将杠铃顶起 Strength Training 101 重量集中在脚跟和前脚掌(the balls of your feet)上 —— 这可以保护你的膝盖 一个判断方法：做深蹲时，你的脚趾应该可以翘起来 稍微分开脚 —— 5~15 度 挺胸 可以用双手抬一个杠铃片或其他有重量的东西（详见视频） 整个过程绷紧核心肌肉（收紧臀部和腹部） 保持后背笔直，脊柱自然（不弯曲，也不过度上翘） 翘臀 在蹲下时： breathe in, break at your hip and push your butt back. Keep sending your hips backwards as your knees begin to bend. It’s important that you start with your hips back, and not by bending your knees. 吸气，屈髋，臀部后移。在膝盖开始弯曲时，仍旧保持让髋部后移。记住，开始蹲下时，是利用后移的髋部，而不是膝盖的弯曲 视频：Staci Demonstrates A Proper Bodyweight Squat | Nerd Fitness - YouTube Common Faults 常见错误 用脚趾顶起来 在蹲下的时候，脚跟必须贴合在地上 蹲的不够下 In order to maximize the muscles worked in the squat, it needs to be done to at least parallel or lower. 为了锻炼到更多的肌肉，髋部至少要比膝盖低（髋部比膝盖稍低的位置称为平行位置） 如果只是局部蹲下（在平行位置之上），膝盖处会受到更大的压力（体验下！）；蹲的更下反而会减轻对膝盖的压力，虽然这更加难了。 不过有些人天生就蹲不了太下（西欧人中比例很高），根据你的体质，适当选择吧。如果实在蹲不下，不要勉强，蹲到平行也可以了。 位置错误 膝盖 膝盖的移动轨迹须和脚的朝向保持一致 后方 胸要挺起来，肩膀要向后，脊柱要保持自然形态 头 头应该正视前方 Your chin should be in a position where you could hold a tennis ball between your chest and your chin. 你可以这样判断姿势是否正确：下巴和胸口上方的间隔是否跟一个网球🎾差不多大，能刚好夹住一个网球就对了 Todo Strength Training 101: How to Squat Properly | Nerd Fitness #This all seems a bit…complicated 一节 How to Squat with Proper Form: The Definitive Guide #超级详细 参考 Strength Training 101: How to Squat Properly | Nerd Fitness 视频 Barbell Squat Exercise Guide and Video Staci Demonstrates A Proper Bodyweight Squat | Nerd Fitness - YouTube","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"legs","slug":"健身/动作/legs","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/legs/"}]},{"title":"14.2 顺序无关的语句","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 14 - 组织直线型代码/14.2 顺序无关的语句/","text":"如果代码间没有顺序依赖关系，那就设法将相关的语句尽可能地接近（其实这些相关语句可以说是有顺序依赖关系） 就近原则（Principle of Proximity）：把相关的操作放在一起 一条普遍性原则：要让程序易于自上而下地阅读，读者的目光不需要跳来跳去，也不需要进行搜索整个程序来获得所需信息 Making Code Read from Top to Bottom 这其实在前面有提到过：减少“攻击窗口”，使变量、语句“局部化” Grouping Related Statements 把相关的语句组织在一起 哪些语句是相关的？处理了相同的数据、执行了相似的任务，或者具有某种执行顺序上的依赖关系 检查方法：打印出你的代码，把相关的语句画上框。如果语句排列地很好，方框是不会交叠的 相关的语句具有很强的联系，往往可以重构成独立的子程序","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 14 - 组织直线型代码","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-14-组织直线型代码","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-14-组织直线型代码/"}]},{"title":"14.1 语句必须明确顺序","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 14 - 组织直线型代码/14.1 语句必须明确顺序/","text":"首先尽力写没有顺序依赖关系的代码，其次尽力写依赖关系明显的代码 如果语句间存在依赖关系，而且这些关系要求你把语句按照一定的顺序排列（即必须按这一顺序执行），那么要设法将这些依赖关系变得明显，使得阅读代码时可以看出来 note: 何谓依赖关系？一段代码中的语句们必须按照特定的顺序执行，则称这些语句间存在依赖关系。如，在 用户输入 - 处理 - 输出结果 的过程中，必须按照这一顺序书写相应语句，否则程序会出错 设法组织代码，使依赖关系变得非常明显 例子： basic1234ComputeMarketingExpense &apos;计算市场费用ComputeSaleExpense &apos;计算销售费用ComputeTravelExpense &apos;计算旅行费用DisplayExpenseSummary &apos;显示花费报表 明显，DisplayExpenseSummary 必须要在最后执行。而前面三个计算花费的子程序貌似可以打乱顺序（而且他们应该这样做）。可是新手小明在ComputeMarketingExpense里初始化了类的成员变量，以便其他计算费用的子程序可以将数据放进去。——也就是说，在这样的情况下，ComputeMarketingExpense 必须放在第一行。而我们只通过阅读代码是看不出来这样的依赖关系的。 应该做如下修正： basic12345InitializeExpenseDate &apos;初始化成员变量，而不是在 ComputeMarketingExpense 里做这件事ComputeMarketingExpense &apos;计算市场费用ComputeSaleExpense &apos;计算销售费用ComputeTravelExpense &apos;计算旅行费用DisplayExpenseSummary &apos;显示花费报表 Name routines so that dependencies are obvious 使子程序名能突显依赖关系 还是上面的例子，ComputeMarketingExpense 的命名是错误的，因为它不仅计算市场费用，还初始化了成员数据——但这一功能没有反映在名字里 子程序的命名应该能完整描述子程序所执行的全部功能，这样才能看出语句间的依赖关系 Use routine parameters to make dependencies obvious 利用子程序参数来突显依赖关系 toNote 再研读书中的例子 349页 重写代码让数据在子程序间传递，就可以暗示执行顺序是很重要的 当所有的子程序都操作了相同的数据，会暗示你：这些语句的顺序可能是重要的 也可以用数据来表明执行顺序并不重要，例如将参数进行不同的命名，来表示这些子程序不包含共同数据，从而表明调用顺序并不重要 Document unclear dependencies with comments 用注释说明不清晰的依赖关系 首先尽力写没有顺序依赖关系的代码，其次尽力写依赖关系明显的代码，如果担心不够清楚，用文档来说明它 toExemplify-book 但编写代码时更应该使用其他技术来改进，而不是依赖于注释，除非你很难获得权限去修改代码本身 Check for dependencies with assertions or error-handling code 用 断言 或 错误处理代码 来检查依赖关系 可以借助状态变量来记录某个子程序执行的必要条件的状态，在执行子程序前，用断言、处理代码来检查执行的必要条件是否已经成立 注意，因为引入了额外的(变量、初始代码和错误处理代码)，所以复杂度上升了，请在由此获得的好处和增加的出错率间做出权衡","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 14 - 组织直线型代码","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-14-组织直线型代码","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-14-组织直线型代码/"}]},{"title":"15.2 case 语句","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 15 使用条件语句/15.2 case 语句/","text":"很多脚本语言根本不支持 case 语句，C++、Java 这些对 case 的支持也有限 排列顺序 如果所有情况的重要性都相同 假如所有情况的重要性都相同，按字母顺序或数字顺序可以提高可读性 若有少数正常情况和多数的异常情况 将正常情况放在前面，并用注释说明这些是正常情况，其他的是非正常情况 按执行频率排列 上面那条跟这个是相符的，把最经常执行的情况放在前面。这样可以提高可读性和检索的速度 使用 case 语句的提示 Keep the actions of each case simple 让每种情况的操作代码保持简单 情况处理代码要简短，这样可以使得 case 语句的结构更加清晰。如果某种情况执行的操作非常复杂，就将它们写成一个子程序来调用 Don’t make up phony variables to be able to use the case statement 不要为了使用 case 语句而刻意制造虚假的变量 C 系语言对 case 支持有限，不能直接匹配字符串（如 C++中case只可以匹配a constant expression of the same type as the type of condition after conversions and integral promotions） toExemplify-book Use the default clause only to detect legitimate defaults 把 default 子句用于真正的默认情况 如果在你考虑到的情况中，将最后一种列为 other 的话，（即将 default 理解为 the last case），这是很不明智的，这意味着你默认你的 cases 里包含了所有情况。万一你是错的呢？当潜在的错误发生时，你就不能用 default 子句来检测了 default = other cases unexpected 这样，当发现一种新的情况时，修改起来也很容易，只需要增加这种情况就可以了 Use the default clause to detect errors 使用 default 子句检测错误 类似上一条所述 In C++ and Java, avoid dropping through the end of a case statement 避免代码执行越过这个 case 子句的末尾（即避免执行到下一 case 的语句） 这个建议是说： 注意使用 break 不要混用不同的控制结构 toExemplify-book In C++, clearly and unmistakably identify flow-throughs at the end of a case statement 即：如果你需要执行完一个 case 后又接着执行另一个 case，那么要在相应位置给出明确的注释 不过一般来说，极力避免这样的代码 toNote 其他 Why Doesn’t Python Have Switch/Case?","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 15 使用条件语句","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-15-使用条件语句","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-15-使用条件语句/"}]},{"title":"16.1  选择循环的种类","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 16 控制循环 /16.1  选择循环的种类/","text":"选择循环的种类 我们在选择哪种循环作为控制结构时，需要根据循环的灵活度和检查位置做判断 语言 循环的种类 灵活度 检查位置 C，C++，C#，Java For 灵活 开始 While 灵活 开始 do-while 灵活 结尾 foreach 严格（对容器类中的每个元素都要执行） 开始 note: 灵活度：循环的次数是否是一定的？是否需要在每次迭代时检查循环有没有完成？ 检查位置：在检查位置前面的部分至少会执行到一次 while 的使用 注意这样一个事实，如果在一次循环体的执行过程中，就算执行到中间处条件变为假，也不会立即跳出这个循环，剩余的代码还是会执行。执行完后再次在入口处检查条件，发现条件为假，从而退出循环。 也就是只在入口处做检测，若检测通过，则可完整执行一次循环体里的过程 带有退出的循环·使用 带有退出的循环（Loop-with-exit）里，终止条件出现在循环的中间。 （其实也就是终止条件的检测放在何处的问题，若检测通过，则可完整执行一次后面的代码） 在 C++、C、Java 中可以用结构化的 while 和 break 来模拟 toNote （有了一个很好的想法，黑白块） 作用：消除重复代码，容易维护（重复代码的弊端是在修改时可能会忘了另一个地方） for 循环的使用 for 循环是执行次数固定的循环，应该用 for 循环来执行不需要循环内部控制的简单操作 for 循环就是为了简单的用途，无需在循环内部做任何事情去控制它，更复杂的情况请用 while 何谓简单用途？ 简单的递增递减，如对某容器内的元素进行迭代 何谓复杂的情况？ 要在循环内部做一些事情来控制循环，如设置条件从而跳出循环 所以，如果想在内部控制循环，不要通过在 for 循环里直接修改下标这一方式，而是改用 while 循环 深入阅读：“Writing Solid Code” foreach 循环的使用 适用于对数组或其他容器的各项元素进行操作，优势在于消除了人工进行算术处理的出错可能","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 16 控制循环 ","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环/"}]},{"title":"16.4 循环和数组的关系","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 16 控制循环 /16.4 循环和数组的关系/","text":"toNote (内容比较少) 更进一步的阅读 10.7 节 （toRead）","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 16 控制循环 ","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环/"}]},{"title":"16.3 轻松创建循环——由内而外","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 16 控制循环 /16.3 轻松创建循环——由内而外/","text":"编写复杂循环时，可以这样处理： 先从一种情况开始，用字面量（literal）来编写代码 缩进，在外面加上循环头和括号，用循环下标或计算表达式替换掉那些字面量 根据嵌套层次，一直由内而外地加上外部的循环 最后，加上所有需要的初始化 toExemplify-book（非常详细的例子）","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 16 控制循环 ","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环/"}]},{"title":"16.2 循环的控制","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 16 控制循环 /16.2 循环的控制/","text":"问题会出现的地方： 初始化 累加变量 嵌套 循环终止 循环变量 循环下标访问数组元素 应该把循环内部当成一个子程序看待，是一个黑盒；把控制尽可能放到循环体外，使得外围程序只知道控制条件，而不需要知道循环内的内容 note：上面不适用于 while(ture) - break 方法，因为退出条件放在了黑盒中 toExemplify-book 循环&quot;头&quot; 自从一个位置进入循环 ？？是说每次只需从循环头部进入就可以了吗？ 把初始化的代码紧放在循环前面 [[就近原则]] 这会让你在修改代码的时候（如将这个循环放到更大的循环、移动到另一个子程序等等），不会忘记修改相应的初始化代码 用 while(true) 表示无限循环 普遍认为 while(true) 是标准写法，像 for( ; ; ) 也可以接受。但 for i = 1 to 999999999 这种假造无限循环的语句是很不好的 在适当的情况下多使用 for 循环 因为 for 循环的控制代码（初始化、判断条件、循环变量改变）都集中在一处，所以可读性更强，修改时也不会忘记某一地方。如果可以用 for 循环来替代其他类型的循环，就这样做。但要注意，是在恰当的情况下使用 for 循环，可参考[[这里]] 在 while 循环更适用的时候，不要使用 for 循环 这个就是对上一条的补充说明 使用 for 循环时的一种陋习：在 for 循环的循环头中塞入本属于 while 循环的内容（如并不控制循环进度的 housekeeping statements 内务语句）。这会产生一种误导，让人以为这些 housekeeping statements 也在控制着这个循环 toExemplify-book 解决办法是，将这些 for 循环改用 while 循环 循环体 用{ }将循环中的语句包围起来 任何时候都这样做，就是只有一行循环体甚至是空语句。 增加括号不会增加运行时所需时间和存储空间，只会提高可读性和预防修改代码时出错 避免空循环 toExemplify-book 妈的，这个例子太好了！以前就觉得空循环的写法不妥 把循环内务操作放在循环的开头或结尾，不要放在中间 循环内务操作（housekeeping）是指像 i++ 或 j = j + 1 这样的表达式，它们的主要目的是控制循环（进行下一轮循环判断条件的准备）而不是完成循环工作 toExemplify-book 一个循环只做一件事 循环应该和子程序一样：一个循环只做一件事并把它做好 特殊情况的处理 假如在实际情况中，根据上一原则使用了两个或多个循环会导致效率低下（比单独写成一个循环的效率低），那么还是写成两个或多个循环，加上注释说明可以将它们合并起来提高效率，等测量数据显示这部分性能的确很重要时再去合并它们 循环’尾’ 设法确认循环在任何情况下都能够终止 这是基本要求。在脑中模拟，考虑正常的情况、端点，以及每一种异常的情况 使得循环终止条件看起来很明显 正确使用 for 循环的情况下，终止条件是很明显的（就和循环头里指明的一致）。 使用 while 循环时，应该把所有的控制语句都放在 while 子句中，这样也会使得终止条件十分明显，关键在于把控制都放在一个地方（？？） 不要为了终止循环而胡乱改动 for 循环的下标 这一条是上一条的补充。这样做其实会让人阅读代码时看错循环的终止条件。 一旦写好了 for 循环，就不要去试图更改、控制 循环变量；如果需要的话，请使用 while 循环来获得对退出条件更多的控制 避免在循环终止后直接使用循环下标值 这样做不好的原因：一，循环下标的最终取值可能和想象中不同（语言、实现不同造成影响；循环是否是正常终止）；二，思考这个取值是多少，需要花费时间（还可能出错……） 更好且更具自我描述性的做法：新增一个变量，在循环体某个适当的位置把最终结果赋给它。 如多用一个布尔变量记录结果： toExemplify-book 考虑使用安全计数器 安全计数器是指，额外增加一个 safetyCounter 变量，每次循环后都递增它进行计数，以此判断执行次数是不是在合理范围内 这样做的缺点是提高了复杂度（增多了一部分代码；在需要修改的时候也可能忘记修改这一部分），所以不会到处都使用，一般在关键的循环处使用即可 toExemplify-book 提前退出循环 break 和 continue break：终止所在处的整个循环，使该循环正常退出 toExemplify-own continue：不会让程序终止掉整个循环，而是让程序跳过这一次迭代过程中（循环体中） continue语句后面的部分，然后从该循环的下一次迭代的开始位置继续执行 continue 相当于 if( ) then { next iteration } 在 while 循环中考虑利用 break 语句而不是布尔标记变量 ？？？ toNote 379页 小心那些大量充斥着 break 的循环 使用多个 break 不一定就是错的。只是如果一个循环包含很多的 break，就要当心了，因为有可能会误用了某个 break 而连不应该退出的部分都退出了 toExemplify-book 改用一系列的循环可能会更加清晰（而不是只用一个循环、用多个 break 作为出口） 如果语言支持，请使用带标号的 break 结构 Java 支持 labeled break，可以对任何在大括号里的代码段进行标号，使用 break 指定退出 toExemplify-book 在循环开始处用 continue 进行判断 ？？？？ toNote 381 使用 break 和 continue 时要谨慎 我们无法确定使用 break 和 continue 是好是坏 使用了 break，就不能再把循环看成黑盒了，阅读代码的人必须去读循环体才能知道循环是如何控制的（也就是终止条件变得不明显了） 建议：可以使用它们，但是要对可能产生的错误保持警惕（一般来说，错误的产生是因为终止条件发生了变化，程序员容易判断出错）；如果没有有说服力的理由，那么就不用使用它们 去检查端点 在创建循环时，应该用头脑去模拟（甚至进行一些手工的计算）循环的情况 通过这样的训练，才能在最初的编码阶段少犯错、在调试阶段更快找出错误，以及在整体上更好地理解程序，而不是瞎猜 通常要考虑的情况： 开始情况 任意选择的中间情况 最终情况 模拟时，应该确认不会出现任何 off-by-one 错误。如果循环中有复杂的计算，应该拿出计算器来手动检查一下 循环变量的使用 用整数或枚举类型表示数组和循环的边界 浮点数递增会有问题 toExemplify-book 更加有意义的变量名 如果循环嵌套了，使用更加有意义的变量名 一般来说，在简单的循环里使用 i、j、k 等变量名还可以接受。但如果有多层的嵌套循环（复杂度更高了），应该用更有意义的名字提高可读性，帮助理解 参考[[循环下标的命名]] 11.2节 toExemplify-book 用有意义的名字避免循环下标串话 用惯了 i、j、k 可能会导致下标串话（cross-talk） toExemplify-book 什么时候避免 i、j、k ? 某个循环体内的代码多于两三行（……那基本都是啦），或者有增长的可能，或者位于一组嵌套的循环里 —— 都应该避免 i、j、k 作为循环下标、 把循环下标变量的作用域限制在该循环内 这样可以避免循环下标串话和其他在循环外部继续使用循环下标的危险做法 toExemplify-book 在 C++、Java 等语言中，可以在循环内部声明循环下标变量，这样就把它的作用域限制在循环的括号内了 但要注意，不同编译器的实现不同，它们对这种特性下的循环变量作用域的检查也可能不同（具体是什么意思？？toExemplify-book） 循环应该多长 循环的长度可以用代码行数或嵌套层次来衡量 循环要尽可能短，以便可以一目了然 一个标准是不超过显示器的宽度吧（这样也很长了）；不过自从你有意识去编写简单代码，一般很少会写出超过 15~20 行的循环 toExemplify-book 嵌套层次在 3 层以下 循环的嵌套层次过多，会让人很难理解。 缩短的方法是：将某一部分提取为子程序或者将控制结构简化。（当然这是概念上的缩短，编译器还是会将它展开为原来的长度，只是这样做可以让我们更容易把握、分块去理解） 把长循环的内容移到子程序内 这条跟上面那条里的解决方法是差不多的。将循环体内的代码提取为子程序，再加以调用，可以帮助我们在整体上把握循环的运行结构 让长循环格外清晰 在短循环内可以适当使用 break、continue、多个出口和复杂的终止条件 但如果循环很长（即使已通过其他方法简化），那么应该让出口保持单一、退出条件清晰，来控制复杂度~~【就是“循环已经很长了，还搞那么复杂作死啊”的意思】~~","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 16 控制循环 ","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环/"}]},{"title":"19.1 布尔表达式","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.1 布尔表达式/","text":"除了顺序结构外，所有的控制结构都要依赖布尔表达式的求值 使用 true 和 false 做布尔判断 请在布尔表达式的判断里使用 true 和 false 来代表真和假，而不要用 0 和 1 等数值。如果你的语言不直接支持这些写法，那么就用预处理宏或者全局变量来创建它们。 使用 0 和 1等数值的坏处是：降低了可读性，而且意义有时是非常含混的，有时你甚至不能确定它是否是用来做布尔判断的 隐式地比较布尔值，可以使判断语句更清晰 把表达式作为布尔表达式（而不需要“画蛇添足”地再和 true/false 直接比较一次），可以让表达式里的项数更少、可读性更高（更像英语中的对话） 画蛇添足的直接比较： 12if (printerError == False): pass 隐式比较： 12if (not printerError): pass 简化复杂的表达式 判断中项数很多的情况 将复杂的表达式拆分 将原来复杂的判断拆分为几个小部分，将每个小部分的判断结果赋给一些新的布尔变量，再用这些新的布尔变量组合成一个较简单的判断 衡量复杂与简单是根据布尔逻辑判断的项数 将复杂的表达式提取为布尔函数 即使这个复杂的判断只用一次，下面的做法也很有必要，因为可以改善可读性，更加集中于对主程序中整体流程的理解。具体是：将这个判断的过程提取到一个命名良好的子程序里，然后在主程序中判断这个子程序的返回值即可。这个子程序的名字也在主程序中引入了一个抽象，成为一种自说明。 toExemplify-book 涉及到多个变量的复杂判断 使用决策表来代替复杂的条件 具体参考 [[表驱动法]] 编写肯定形式的布尔表达式 否定形式的逻辑表达式可能会让人一时转不过弯，转换为肯定形式会更加清晰 在 if else 语句中 可以把判断条件从否定形式转换为肯定形式，并互换 if 和 else 子句中的代码 这条建议可能会和“在 if 子句中先处理高频的情况”（参考[[……]]）冲突，可以配合下一条建议（更改名字）使用 逆转含义，更换变量的名字 如将 !statusOK 替换成 errorDetected 利用狄摩根定理 toExemplify-book 用括号使布尔表达式更清晰 使用括号降低了对代码阅读者的要求，不再要求他们对该语言的求值优先级很熟练。对于你来说，如果拿不准优先级，使用括号也是非常好的解决方法 使用如下技巧使得括号准确配对 toExemplify-book 现在一般在编辑器中都有这个功能了 把布尔表达式全部括在括号里面 这样能够改善可读性 理解布尔表达式的求值方式 不同语言下对布尔表达式的求值方式可能不同，尤其是要注意是否采用“短路（short-circuit）”求值（或者称为惰性lazy求值） 短路求值 “短路”and：从左往右继续计算，如果发现有一个操作数（operand）为假，则跳过剩余的计算 “短路”or：从左往右继续计算，如果发现有一个操作数（operand）为真，则跳过剩余的计算 用处是：利用这一性质，恰当书写求值顺序，就可以减少判断语句的书写 逻辑运算符 &amp; 和 | Java 中的逻辑运算符 &amp; 和 | 会保证，所有的项都会经过完整的求值 例子 toExemplify-book 按照数轴的顺序来书写数值表达式 具体操作是：从左到右、从小到大地排列元素（常量和变量）。这样会很直观地确定变量所需要的范围 如： 123MIN_ELEMENTS &lt;= i and i &lt;= Max_ELEMENTSi &lt; MIN_ELEMENTSMax_ELEMENTS &lt; i toExemplify-book-pic 与 0 比较时的指导原则 一句话，当 0 作为布尔变量时，隐式比较；其他情况，显式比较 当 0 作为字符终止符、空指针时，上面的建议虽然有违既成的 C 传统，但随之也带来了可读性的改善 toNote 布尔表达式的常见问题 在 C 家族语言中，可以使用把常量放在比较的左端这一技巧 toNote 作者偏向于数轴排序法 在 C++中，可以考虑创建预处理宏来替换 &amp;&amp;、||、==（不得已才这样做） 一般不这样做， 所以，toNote 在 Java 中，要理解 a==b 和 a.equals(b) 的差异 a==b：判断的是 a 和 b 是否引用了同一个对象，即比较的是地址 a.equals(b)：判断这两个对象是否具有相同的值 一般来说，应该使用 a.equals(b) 这样的表达式","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"19.5 编程基础：结构化编程","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.5 编程基础：结构化编程/","text":"结构化编程的核心思想：一个应用程序应该只采用一些单入单出的控制结构。因为这样做会使得程序有序、有规则地执行，不会做不可预知的随便跳转，从而提高可读性，让人更易理解，降低复杂度。 注意，结构化编程和结构化的、自顶向下的设计（structured, top-down design）不一样，结构化编程只适用于具体编码层（the detailed coding level） 单入单出的控制结构 英文为：one-in, one-out control constructs (also called single-entry, single-exit control constructs) 单入单出的控制结构指的是，一个代码块只能从一个位置开始执行，并且只能结束于一个位置，除此之外再无其他入口或出口。 结构化编程的 3 个组成部分 结构化编程的中心论点的一种表述是：任何一种控制流都可以由顺序、选择、迭代这三种结构生成。 本书作者的观点是，除了这三种标准的结构化编程结构之外，对 break、continue、return、throw-catch 等控制结构要持有批判的态度 顺序 顺序指，一组按照先后顺序执行的语句 选择 选择指，有选择地执行语句。如 if-then-else 结构、case 语句 迭代 迭代指，使一组语句多次执行。又称为“循环”。如 for、while","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"19.3 空语句","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.3 空语句/","text":"在 C++等语言中，空语句即一条仅含有分号的语句 指导原则 使用空语句时应突出强调 让空语句的分号自占一行，并且加以缩进 使用一组{ }来强调这一空语句 这样可以告诉代码阅读者，你正在使用空语句，而不是漏写了什么 12345while(True) &#123;&#125;while(True) &#123; ;&#125; 为空语句创建一个 DoNothing() 预处理宏或者内联函数 toNote 考虑换用一个非空的循环体 参考 16.2 [[避开空循环]] toNote","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"19.2 复合语句（语句块）","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.2 复合语句（语句块）/","text":"在多数语言中，可以通过在一组语句的外面括上 { } 来创建复合语句 指导原则 先写出括号对，再填充 block 中的内容 借助如今的编辑器，只需写下 {，即可自动补全，甚至连后退键都不需要了 无论何时，在 if、while 语句中都使用块 即使 if、while 语句后的代码行数是 0 或 1，都要用块来清楚表达","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"19.4 驯服危险的深层嵌套","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.4 驯服危险的深层嵌套/","text":"建议避免超过 3~4 层以上的嵌套 一些避免深层嵌套的方法 对于嵌套的 if 语句 通过拆分嵌套（需要重复检测某些条件）来减少嵌套层次 toExemplify-book 作为代价，你必须要容忍使用一个更加复杂的判断。但如果可以大幅减少桥嵌套层次的话，值得考虑 拆分图示 这个大的嵌套： 1234567891011121314graph LRZ(start) Z --&gt; A&#123;A?&#125; A --&gt; |True| exeA(执行 A part) exeA --&gt; B&#123;B?&#125; A --&gt; |False| NA(跳过 A part) B --&gt; |True| exeB(执行 B part) exeB --&gt; C&#123;C?&#125; B --&gt; |False| NB(跳过 B part) C --&gt; |True| exeC(执行 C part) exeC --&gt; D&#123;D?&#125; C --&gt; |False| NC(跳过 C part) D --&gt; |True| exeD(执行 D part) D --&gt; |False| ND(跳过 D part) 拆分成两个小嵌套 （第二个嵌套中要重复检测在第一个嵌套里的条件） 12345678graph LRZ(start) Z --&gt; A&#123;A?&#125; A --&gt; |True| exeA(执行 A part) exeA --&gt; B&#123;B?&#125; A --&gt; |False| NA(跳过 A part) B --&gt; |True| exeB(执行 B part) B --&gt; |False| NB(跳过 B part) 12345678graph LRZ(start) Z --&gt; |增加判断| C&#123; A? &amp;&amp; B? &amp;&amp; C?&#125; C --&gt; |True| exeC(执行 C part) exeC --&gt; D&#123;D?&#125; C --&gt; |False| NC(跳过 C part) D --&gt; |True| exeD(执行 D part) D --&gt; |False| ND(跳过 D part) 交叉参考 17.3节[[错误处理和 goto]] 用 break 块来简化循环里的嵌套 if toReRead 注意，在 python 中，break cannot be used to break out of an if - it can only break out of loops. （不过你也可以用 return 来实现这一功能） 12345678910111213141516171819202122232425262728293031def deep_loop(s): if 1 &lt;= s: print('1') if 2 &lt;= s: print('2') if 3 &lt;= s: print('3') if 4 &lt;= s: print('4')def use_break(s): for i in range(1): if s &lt; 1: break print('1') if s &lt; 2: break print('2') if s &lt; 3: break print('3') if s &lt; 4: break print('4')while True: n = input('n:') n = int(n) print('deep_loop:') deep_loop(n) print('use_break:') use_break(n) 不过 python 中有 elif，也比较方便了 其他语言未尝试，toExemplify-book 注意，这一技巧很不常见，要和团队商量，团队熟悉、接受后才能使用 把嵌套 if 转换为一组 if-then-else 语句 toNote 类似于 python 中 elif 把嵌套 if 转换成 case 语句 在一些情况下可以利用 case 语句重写，特别是含有整数的判断 toNote 其他 将深层嵌套的代码抽取为单独的子程序 当嵌套是由于条件和迭代二者共同产生的，这么做特别有效。把 if-then-else 分支保留在主循环中（以便显示决策的分支走向），然后将各分支中的复杂语句提取为单独的子程序，再调用 toExemplify-book —— important！ 使用一种更加面向对象的方法 toExemplify-book —— important！ 这个还不熟悉——但隐约有些懂了 重新设计深层嵌套的代码 复杂的代码表明你还没有充分理解你的程序，所以无法简化它 toNote 总结 有些技术在其他章节 toNote","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"19.6 控制结构与复杂度","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.6 控制结构与复杂度/","text":"如果控制流不是影响复杂度的最大因素，那么至少也是最大的因素之一 复杂度的重要性 参考[[……]] 如何衡量复杂度 利用决策点（decision point）数量 最著名的方法，源自 Tom McCabe。又称[[圈复杂度]] 具体操作： 计数从 1 开始，一直往下阅读程序 一旦遇到如下关键字（或其他同性质的词），就加 1： if、while、repeat、for、and、or 对 case 语句中的每一种情况都加 1 对照下表： 子程序中的决策点数量 结论 1 ~ 5 子程序可能还不错，起码不复杂 6 ~ 10 得想办法简化子程序了 10 + 应该将这个子程序的某一部分改写为另一个子程序再调用它 关于上限： 10 个决策点的上限并不是绝对的（如 flask8 推荐上限是12 ），而是应该把决策点的数量当做警示。当警示出现时，就要仔细考虑子程序是否真的过于复杂、是否需要重新设计了 其他衡量手段 智力实体数量 为了理解应用程序，你必须在同一时间记住的智力实体的数量 所用的数据量 ？？ 控制结构中的嵌套层数 toWrite 代码行数 toWrite 同一变量的跨度 toNote 变量的生存期 toNote 输入和输出的量 ？？ 延伸 python 中的 flask8 可以用来衡量圈复杂度","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"Git 的学习资源","date":"2018-03-01T18:13:19.000Z","path":"Git/Git-学习资源/","text":"快速的简单入门 git 使用简易指南[1] 清晰、排版漂亮，包含了常用的一些基本操作 研习 Pro Git[2] Git官方推荐书籍，值得认真阅读一遍；并且由于项目开源、有大量人员参与，中文翻译质量也很高 参考 git 使用简易指南 ↩︎ Pro Git - Book - 中文版 ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"}]},{"title":"Hexo 博客搭建过程注意点","date":"2018-03-01T18:13:19.000Z","path":"Hexo/Hexo 博客搭建过程注意点/","text":"主要记录 Hexo 搭建过程中的一些注意点和一些问题的解决方向。其他详细的基础设置等网上有大量文章，官方文档也有清晰说明 搭建教程 搭建教程在网上有很多（不过有些实在太冗长，按需选择），下面是推荐的几个： 手把手教你使用Hexo + Github Pages搭建个人独立博客 | 令狐葱@前端笔记 # 很好的文章 limedroid/HexoLearning: Hexo博客搭建全攻略 Hexo 相关 配置文件 _config.yml 在 Hexo 中，以 _config.yml 作为配置文件。 在站点根目录下有一份，通常称为 站点配置文件 在每个主题的目录下也有一份，称为 主题配置文件，用于配置主题自带的选项 新手配置时不要弄混了哦 😯 ~ 注意事项‼️：_config.yml 使用的是 yaml 语言，不能有多余的空格，在每个配置选项的冒号后有且只能有一个空格 如： 1theme: next 常用命令行 本地运行，预览效果 启动 sever，在浏览器进行访问： 1$ hexo s -g --debug 支持热更新，修改配置文件后刷新一下可以看到即时效果 但如果修改了 post，则需要重新运行一下。（命令中 g 是 generate 的缩写，s 是 sever 的缩写） 其他通用设置 read more 阅读全文 推荐使用这种方法：在 MarkDown 文章中使用 &lt;!-- more --&gt; 手动进行截断。由 Hexo 原生提供，可以精确控制需要显示的摘录内容，也可以让 Hexo 中的插件更好的识别。[1] 发布到 GitHub 使用 git 部署[2] 1$ npm install hexo-deployer-git --save 在站点配置文件添加设置： 123456789101112deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] # 实例deploy: type: git repo: git@github.com:hmgqzx/dotors.git branch: gh-pages message: \"Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)\" 部署命令： 1$ hexo deploy --generate 额外再搭建另一个博客 - 项目 gh-pages 方式 GitHub上建立的每个项目(repository)都是可以拥有独立主页的，将 hexo 生成的静态内容放置在 gh-pages 分支下即可 当我们想额外搭建另一个博客（使用不用的主题），就可以利用这种方式，在 Github 给的域名（http(s)://&lt;username&gt;.github.io）下创建二级域名 Github 设置 详细步骤参考链接[3] 1~/my-personal-projects/github-repo/motors not empty, please run hexo init on an empty folder and then copy your files into it 因为我们是先在 Github 创建仓库，再 clone 下来，这样文件夹就非空了。需要在另一个地方 hexo init 一个站点，再复制过来（ master 分支） hexo 设置 在 Github 设置好后，项目访问链接是这样的： 1http(s)://&lt;username&gt;.github.io/&lt;projectname&gt; 那么在 hexo 的站点配置文件中，需要这样设置，才能生成对应的链接： 12345678# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;root: /&lt;projectname&gt;/# 实例对照url: https://hmgqzx.github.io/dotors/root: /dotors/ 原因：正如注释所说，因为项目主页站点内容是放在二级域名下的，所以要那样设置 注脚 常见问题 - NexT 使用文档 ↩︎ Deployment | Hexo ↩︎ 手动给你的GitHub项目设置一个主页 | 把生命浪费在美好的代码上 ↩︎","tags":[],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hmgqzx.github.io/wiki/categories/Hexo/"}]},{"title":"Git 其他常见相关问题","date":"2018-03-01T18:13:19.000Z","path":"Git/Git-其他相关问题/","text":"Github 等远程仓库的相关问题 将已存在的项目通过 Git 传到 GitHub 等 主要步骤概括起来就是： 对该已存在的本地项目 git init 对需要的文件进行提交（如有需要，可以编辑 .gitignore 文件、进行多次小提交等操作） 关联 remote repository （远程仓库） push 本地改动到 remote repository （远程仓库） 更详细的具体命令，请参考：[1][2] 参考 Adding an existing project to GitHub using the command line - User Documentation ↩︎ 如何将一个已存在的目录转换为一个 Git 项目并托管到 GitHub 仓库 - Leon’s scribble. ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"}]},{"title":"LaTeX","date":"2018-03-01T18:13:19.000Z","path":"LaTex/LaTeX/","text":"LaTeX札记 | HaHack Handout With Script | HaHack 生成幻灯片的 LaTeX 样式包 安装、配置好一个 TeX 发行版； 选择一个顺手的编辑器（和 PDF 阅读器） 安装 在 OS X 上，主流是用 MacTex，他是一个基于 TeX Live 之上的封装，方便新手 MacTex 为 MacTeX 配置中文支持 | 始终 要做的事情只有两件： 配置一个 UTF-8 的编辑环境； 用 ctex 的语法选择合适的字体。 编辑器 有很多种，各有所长 Latexian GNU Emacs texstudio Sublime Text texmaker Texshop（MacTex自带）","tags":[],"categories":[{"name":"LaTex","slug":"LaTex","permalink":"https://hmgqzx.github.io/wiki/categories/LaTex/"}]},{"title":"JavaScript 中的回调","date":"2018-03-01T18:13:19.000Z","path":"JavaScript/回调函数/","text":"回调是什么？ A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.[1] A callback function, also known as a higher-order function, is a function that is passed to another function (let’s call this other function “otherFunction”) as a parameter, and the callback function is called (or executed) inside the otherFunction. [2] A callback function is essentially a pattern (an established solution to a common problem), and therefore, the use of a callback function is also known as a callback pattern.[2:1] 简单地说: 一个回调函数是，当执行完另外一个函数（通常是异步的）之后，再来执行的一种函数[3]。也就是说，回调函数是，做完其他“任务”后，再 call back 来执行的函数 更进一步地说: 在 JavaScript 中，因为函数是对象，所以可以作为参数传入所谓的高阶函数，也能被高阶函数作为返回值返回[4]。任何函数，只要它作为参数传入且随后被调用，都可称之为回调函数[3:1]。 也就是说，在高阶函数中，作为参数传入的回调函数被当成一个整体来进行调用，从这一层上说，回调函数与抽离出来的子函数没有区别。只是因为他的用途而赋予了“回调”的名称。 How Callback Functions Work? pass definition as parameter When we pass a callback function as an argument to another function, we are only passing the function definition. We are not executing the function in the parameter. And since the containing function has the callback function in its parameter as a function definition, it can execute the callback anytime.[2:2] 我们对 the containing function（“外层的那个函数、方法”）传递的只是回调函数的定义，而不是在参数处执行这个回调函数（执行的话是这个样子`callback()`，是吧） 当 the containing function “拿到” 了回调函数的定义，那么他想在什么时候执行这个回调函数都可以了 closure The callback is a closure. As we know, closures have access to the containing function’s scope, so the callback function can access the containing functions’ variables, and even the variables from the global scope.[2:3] callback 是一个 closure，所以回调函数可以访问 the containing function 里的变量 使用 this 的指向问题 现在可以用 ES6 的箭头函数[5]来解决 “Callback Hell” Problem 也就是多重嵌套的匿名回调，使得代码可读性很低 solutions[2:4]： Name your functions and declare them and pass just the name of the function as the callback, instead of defining an anonymous function in the parameter of the main function. Modularity: Separate your code into modules, so you can export a section of code that does a particular job. Then you can import that module into your larger application. 利用回调函数分离职能[2:5] 使用场合[2:6] For asynchronous execution (such as reading files, and making HTTP requests) In Event Listeners/Handlers In setTimeout and setInterval methods For Generalization: code conciseness 疑问 在 ajax 等中，“引擎”是如何知道所要的数据到达了，从而来执行 callback 呢？ 参考 关于Javascript回调函数的那些事 | 人人都是互联网创意G客 ↩︎ Understand JavaScript Callback Functions and Use Them | JavaScript is Sexy ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ 回归基础：在JavaScript中回调函数是什么？ - 前端 - 掘金 ↩︎ ↩︎ They（Functions） can be “stored in variables, passed as arguments to functions, created within functions, and returned from functions”. ↩︎ 箭头函数 - JavaScript | MDN ↩︎","tags":[],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://hmgqzx.github.io/wiki/categories/JavaScript/"}]},{"title":"Mac OS X 里特有的那些命令行","date":"2018-03-01T18:13:19.000Z","path":"Mac/Mac 命令行工具/","text":"Mac 里的不少配置可以通过特定的命令行来设定，以下是我比较常用的、感兴趣的命令。我一般是在 zsh 里对这些常用的命令设定 alias，非常方便。 更多的命令请参考： herrbischoff/awesome-osx-command-line: Use your OS X terminal shell to do awesome things. Finder Show All File Extensions 显示所有的文件扩展名 1defaults write -g AppleShowAllExtensions -bool true Hide Folder in Finder 隐藏 Finder 里的指定文件夹 1chflags hidden /path/to/folder/ Show Hidden Files 显示隐藏文件 隐藏文件是指以.开头的系统文件等，在 Finder 里默认隐藏；开启显示后，数目会很多，建议平时不用时关闭 12345# Show All #要重启才行？defaults write com.apple.finder AppleShowAllFiles true# Restore Default File Visibilitydefaults write com.apple.finder AppleShowAllFiles false Unhide User Library Folder 不隐藏用户的库文件夹 1chflags nohidden ~/Library Increase Number of Recent Places 增加 Finder 中的“最近使用文件夹”数量 12defaults write -g NSNavRecentPlacesLimit -int 10 &amp;&amp; \\killall Finder Show “Quit Finder” Menu Item 设定 Finder 可退出（强烈推荐） Makes possible to see Finder menu item “Quit Finder” with default shortcut Cmd + Q 这个好用，这样就能使用 Cmd + Q 一次性关闭所有的 Finder 窗口了 1234567# Enabledefaults write com.apple.finder QuitMenuItem -bool true &amp;&amp; \\killall Finder# Disable (Default)defaults write com.apple.finder QuitMenuItem -bool false &amp;&amp; \\killall Finder Path Bar 显示路径栏 开启后会在 Finder 底部显示当前路径信息 12345# Showdefaults write com.apple.finder ShowPathbar -bool true# Hide (Default)defaults write com.apple.finder ShowPathbar -bool false Status Bar 状态栏 在 Finder 最底部，显示当前文件夹项目数量、光标选中数量、硬盘可用容量 12345# Showdefaults write com.apple.finder ShowStatusBar -bool true# Hide (Default)defaults write com.apple.finder ShowStatusBar -bool false Set Current Folder as Default Search Scope 设置当前文件夹为默认搜索域 整理有序的话，大部分情况下只是搜索当前目录，这样就不用每次都要多点击一次来选择了 1defaults write com.apple.finder FXDefaultSearchScope -string &quot;SCcf&quot; Layout Desktop Icon Visibility 显示/隐藏桌面图标 OS X 桌面的右键功能里没有 Windows 的“隐藏桌面图标”选项，可以通过下面的命令实现 1234567# Hide Iconsdefaults write com.apple.finder CreateDesktop -bool false &amp;&amp; \\killall Finder# Show Icons (Default)defaults write com.apple.finder CreateDesktop -bool true &amp;&amp; \\killall Finder Battery 电池 哈哈，这个纯粹是列在这儿，平时并没多大用 Remaining Battery Percentage 剩余电量 1pmset -g batt | egrep \"([0-9]+\\%).*\" -o --colour=auto | cut -f1 -d';' Remaining Battery Time 电池剩余使用时间 1pmset -g batt | egrep \"([0-9]+\\%).*\" -o --colour=auto | cut -f3 -d';' Power Management 电源管理 Prevent System Sleep 防止系统进入睡眠一段时间 参数单位是秒 Prevent sleep for 1 hour: 1caffeinate -u -t 3600 Put Display to Sleep after 15 Minutes of Inactivity 一段时间不活动后关闭显示器 参数单位是分钟 1sudo pmset displaysleep 15 Put Computer to Sleep after 30 Minutes of Inactivity 一段时间不活动后使 Mac 睡眠 参数单位是分钟 1sudo pmset sleep 30 Check System Sleep Idle Time 查看系统进入休眠的间隔 目前我的是 1 分钟 12$ sudo systemsetup -getcomputersleepComputer Sleep: after 1 minutes Set System Sleep Idle Time to 60 Minutes 设置系统进入休眠的间隔 1sudo systemsetup -setcomputersleep 60 Audio Set Audio Volume 1osascript -e &apos;set volume 4&apos; Play Audio File You can play all audio formats that are natively supported by QuickTime. 1afplay -q 1 filename.mp3 TTS 吐槽下，综合各方面考虑，Mac 上可用的 TTS 大概最好的就是系统自带的了。然而——还是那么地垃圾…… Speak Text with System Default Voice 用 TTS 发音朗读文本 1say &apos;All your base are belong to us!&apos; Create Audiobook From Text Uses “Alex” voice, a plain UTF-8 encoded text file for input and AAC output. 1say -v Alex -f file.txt -o &quot;output.m4a&quot; Networking Tools 网络工具 Ping a Host to See Whether It’s Available 这个大概是天朝特色了…… 1ping -o github.com Troubleshoot Routing Problems 1traceroute github.com SSH Remote Login 远程登录 12345# Enable remote loginsudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist# Disable remote loginsudo launchctl unload -w /System/Library/LaunchDaemons/ssh.plist TCP/IP Show Application Using a Certain Port 显示当前占用特定端口的应用列表 （强烈推荐） 这个用来检查端口占用很不错 This outputs all applications currently using port 80. 1sudo lsof -i :80 Show External IP Address 1dig +short myip.opendns.com @resolver1.opendns.com Wi-Fi Show Local IP Address 1ipconfig getifaddr en0 Show Wi-Fi Connection History 1defaults read /Library/Preferences/SystemConfiguration/com.apple.airport.preferences | grep LastConnected -A 7 Show Wi-Fi Network Passwords Exchange SSID with the SSID of the access point you wish to query the password from. 1security find-generic-password -D &quot;AirPort network password&quot; -a &quot;SSID&quot; -gw Spotlight 这个要怎么用？听说这个很久了，还没去具体了解使用 Spotlight Indexing 12345# Disablemdutil -i off -d /path/to/volume# Enable (Default)mdutil -i on /path/to/volume Erase Spotlight Index and Rebuild 重建索引 1mdutil -E /path/to/volume Search via Spotlight 搜索 1mdfind -name &apos;searchterm&apos; Show Spotlight Indexed Metadata 1mdls /path/to/file Screenshots 屏幕截图 目前在用软件Snip，满足基本所需了 Take Delayed Screenshot Takes a screenshot as JPEG after 3 seconds and displays in Preview. 1screencapture -T 3 -t jpg -P delayedpic.jpg Save Screenshots to Given Location Sets location to ~/Desktop. 12defaults write com.apple.screencapture location ~/Desktop &amp;&amp; \\killall SystemUIServer Save Screenshots in Given Format Sets format to png. Other options are bmp, gif, jpg, jpeg, pdf, tiff. 1defaults write com.apple.screencapture type -string &quot;png&quot; Disable Shadow in Screenshots 隐藏截图里的阴影 有阴影好看很多 12defaults write com.apple.screencapture disable-shadow -bool true &amp;&amp; \\killall SystemUIServer Set Default Screenshot Name Date and time remain unchanged. 12defaults write com.apple.screencapture name &quot;Example name&quot; &amp;&amp; \\killall SystemUIServer Login Window Set Login Window Text 1sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText &quot;Your text&quot; Security Application Firewall 这个是不是可以阻止应用联网？？（之前试了下，好像没什么效果，😓） Firewall Service 12345678# Show Statussudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate# Enablesudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on# Disable (Default)sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off Add Application to Firewall 1sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /path/to/file Passwords Generate Secure Password and Copy to Clipboard 1LC_ALL=C tr -dc &quot;[:alpha:][:alnum:]&quot; &lt; /dev/urandom | head -c 20 | pbcopy Physical Access Launch Screen Saver 启动屏幕保护程序 1open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app Lock Screen 锁屏 1/System/Library/CoreServices/Menu\\ Extras/User.menu/Contents/Resources/CGSession -suspend Screensaver Immediate Lock 12345678# Statusdefaults read com.apple.screensaver askForPasswordDelay# Enable (Default)defaults write com.apple.screensaver askForPasswordDelay -int 0# Disable (Integer = lock delay in seconds)defaults write com.apple.screensaver askForPasswordDelay -int 10 Screensaver Password 12345678# Statusdefaults read com.apple.screensaver askForPassword# Enabledefaults write com.apple.screensaver askForPassword -int 1# Disable (Default)defaults write com.apple.screensaver askForPassword -int 0 Shutdown 关机 1sudo poweroff Uptime 已开机时间 How long since your last restart. 12$ uptime15:38 up 19 days, 14:48, 6 users, load averages: 1.85 1.55 1.47","tags":[{"name":"配置","slug":"配置","permalink":"https://hmgqzx.github.io/wiki/tags/配置/"},{"name":"小技巧","slug":"小技巧","permalink":"https://hmgqzx.github.io/wiki/tags/小技巧/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"Hexo 下的 MarkDown 渲染插件","date":"2017-09-08T08:24:24.000Z","path":"Hexo/Hexo 插件/MarkDown 渲染插件/","text":"Hexo 内置的默认渲染插件是 hexo-renderer-marked，缺少很多功能，比如不支持 GFM、上下标、emoji 等。目前在用的是：hexo-renderer-markdown-it-plus [1] hexo-renderer-markdown-it[2] 支持大量扩展功能，对我而言，最重要的就是它的 footnote 插件 安装[3]： 先卸载自带的 hexo-renderer-marked，再安装 配置[4][5]： 在站点根目录下的 _config.yml进行配置 123456789101112# 示例# Markdown-it config## Docs: https://github.com/celsomiranda/hexo-renderer-markdown-it/wikimarkdown: render: html: true plugins: - markdown-it-abbr - markdown-it-footnote anchors: level: 2 collisionSuffix: 'v' hexo-renderer-markdown-it-plus[1:1] hexo-renderer-markdown-it 的“升级”版，在原来基础上增加了一些插件，并且支持第三方 markdown-it 插件。推荐使用这个 安装和配置和 hexo-renderer-markdown-it 类似，详情请看官方主页[1:2] 其他注意事项 如果你想测试效果，则记得先使用 hexo clean 命令清除一下缓存，不然有可能看不到效果，以为自己安装错误……（别问我怎么知道的 😢） 注脚 CHENXCHEN/hexo-renderer-markdown-it-plus: Markdown-it is a markdown parser, done right. A faster and CommonMark compliant alternative for Hexo. #主页 ↩︎ ↩︎ ↩︎ hexojs/hexo-renderer-markdown-it: Markdown-it is a Markdown parser, done right. A faster and CommonMark compliant alternative for Hexo. #主页 ↩︎ Getting Started · hexojs/hexo-renderer-markdown-it Wiki ↩︎ Simple Configuration · hexojs/hexo-renderer-markdown-it Wiki ↩︎ Advanced Configuration · hexojs/hexo-renderer-markdown-it Wiki ↩︎","tags":[],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hmgqzx.github.io/wiki/categories/Hexo/"},{"name":"Hexo 插件","slug":"Hexo/Hexo-插件","permalink":"https://hmgqzx.github.io/wiki/categories/Hexo/Hexo-插件/"}]},{"title":"Dock","date":"2016-10-08T15:28:59.000Z","path":"Mac/Dock/","text":"综合设置 只显示已打开应用[1] 123defaults write com.apple.dock static-only -boolean true; killall Dock# 恢复为默认设置：defaults delete com.apple.dock static-only; killall Dock 注意，标识“最近使用”的堆栈 也会消失 关掉 Dock 动画 主要参考：Mac 加速：干掉那些「炫酷」的动画 - MacTips - 知乎专栏[2] 开启堆栈功能 — 可显示最近使用文件、程序等 1defaults write com.apple.dock persistent-others -array-add '&#123; \"tile-data\" = &#123; \"list-type\" = 1; &#125;; \"tile-type\" = \"recents-tile\"; &#125;'; killall Dock 注意，此功能和 只显示已打开应用 冲突 隐藏 dock 特定 app 图标 主要原理 在 Info.plist 添加 12&lt;key&gt;LSUIElement&lt;/key&gt;&lt;true/&gt; LSUIElement 是 Launch Services Keys [3]中的一项。其 Specifies whether the app is an agent app, that is, an app that should not appear in the Dock or Force Quit window. [4] If this key is set to YES, Launch Services runs the app as an agent app. [4:1] cli 可以用如下命令[5]： 1defaults write /Applications/Adium.app/Contents/Info.plist LSUIElement true 乱码问题 用其他编辑器打开 Info.plist 时，有可能乱码（我不知道什么原因），这时可以使用 Xcode 来打开。它的 Property List Editor 也使得阅读选项非常清晰。[6] 参考 装点你的 Dock：外观篇丨一日一技 · Mac - 少数派 ↩︎ Mac 加速：干掉那些「炫酷」的动画 - MacTips - 知乎专栏 ↩︎ Launch Services Keys ↩︎ Launch Services Keys ↩︎ ↩︎ macos - Hide Adium (or any other app’s) icon in the dock - Ask Different ↩︎ macos - Hide Adium (or any other app’s) icon in the dock - Ask Different ↩︎","tags":[],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"Mac 使用技巧","date":"2016-10-08T15:28:59.000Z","path":"Mac/使用技巧/","text":"macOS 技巧与软件选择 | zrong’s blog 快捷键 Mac 键盘快捷键 - Apple 支持 键位 Command-H 隐藏最前面的 app 的窗口。要查看最前面的 app 但隐藏所有其他 app，请按 Command-Option-H。 Command-Tab 切换 app：在打开的 app 中切换到下一个最近使用的 app。 Shift-Command-波浪号 (~) 切换窗口：切换到最前端应用中下一个最近使用的窗口。 Command-逗号 (,) 偏好设置：打开最前面的 app 的偏好设置。 Option–左箭头 将插入点移至上一字词的词首。 其实可以用Fn键来组合得到同样的功能： Home键=Fn+左方向 End键=Fn+右方向 PageUP=Fn+上方向 PageDOWN=Fn+下方向 向前Delete=Fn+delete键 Finder 快捷键 快捷键 描述 Command-D 复制所选文件。 Command-I 显示所选文件的“显示简介”窗口。 Shift-Command-N 新建文件夹。 Command–左中括号 ([) 前往上一文件夹。 Command–右中括号 (]) 前往下一文件夹。 Command–上箭头 打开包含当前文件夹的文件夹。 Command–Control–上箭头 在新窗口中打开包含当前文件夹的文件夹。 Command–下箭头 打开所选项。 Option-连按 在单独窗口中打开文件夹，并关闭当前窗口。 Command-连按 在单独标签或窗口中打开文件夹。 神奇的option键 以前很多期介绍过option相关的快捷键和功能，比如选中多个文件option+右键，可以显示检查器，按住option点击顶部菜单的电池会显示电池状况，点击wifi会显示网络状况，点击备份…好吧，你们都可以点点试试。别忘了最左边的苹果按钮，option+点击，在下拉菜单点关机、重启都不提示的。 option+点击Dock上活动的程序会隐藏，option+拖拽文件可以复制，按住option输入=输出是≠，option+shift+=，输出是± 快捷键冲突 一个应用的键盘快捷键可能与另一应用的键盘快捷键冲突。例如，按下 Command-空格键可以打开 Spotlight 菜单，但是此快捷键在另一应用中也可以用于切换不同的输入法。 选取苹果菜单 &gt;“系统偏好设置”，然后点按“键盘”。 点按“快捷键”。有冲突的键盘快捷键旁边会出现黄色警告三角形。点按快捷键，然后更改它。 https://github.com/macdao/ocds-guide-to-setting-up-mac#2-常用工具 菜鸟级 Mac 配置（二） | GeekPlux （还没看） 去掉动画 Mac 加速：干掉那些「炫酷」的动画 - MacTips - 知乎专栏 Speed up Mission Control animations in macOS Sierra - Ask Different dotfiles/.macos at master · mathiasbynens/dotfiles 内置的减弱动态效果： Enable Reduce Motion in macOS Sierra to Speed Up Mission Control dock 装点你的 Dock：外观篇丨一日一技 · Mac - 站长之家 只显示已打开应用： 1234defaults write com.apple.dock static-only -boolean true; killall Dock恢复为默认设置：defaults delete com.apple.dock static-only; killall Dock OnyX 相关软件 压缩 Keka - 免费开源的 macOS 文件解压缩程序 关于Mac OS X中的.DS_STORE、._xxx文件 · BlahGeek’s Blog 文件恢复 OS X 上的文件版本恢复功能的实现原理是什么？ - Mac - 知乎 打开文件编辑器，搜索 复原到 选项 禁用更改文件名后缀提示 123defaults write com.apple.finder FXEnableExtensionChangeWarning -bool falsekillall Finder Mission Control 快速 要移除某一空间，请按住 Option 键，然后在 Spaces 栏中点按该空间旁边的 或 。该空间中的所有窗口都会移到另一个已打开的空间中。 一般人大多不會在同一個程式上開超過十個視窗，所以展開之後基本上就能看到所有的畫面了。但如果很不巧的你硬是開了太多視窗 … 那麼還有一招，就是在視窗上面按鍵盤上的空白鍵 ​ 下载 商店下载xcode很慢吧,其实也可以使用迅雷下载的哈.快来GET! - 简书 在开发者网站下 https://developer.apple.com/downloads/ Mac App Store 下载速度慢是谁的原因？ - 苹果公司 (Apple Inc.) - 知乎 不单单是墙的原因 多窗口控制 同程序的不同窗口，窗口不多的时候用 cmd+` 切换很方便 用 Divvy 来安排窗口，出现重叠就用快捷键分配到一个固定区域 三指（我设置为四指）上推的 Mission Control； 比如xcode打开了5个，cmd +~想在两个窗口中循环，则其余三个要cmd+M最小化。 或者cmd+shift+~ 与cmd+~换着用。 另外，很多程序支持cmd+数字切换的，如原生的shell，xquartz command + tab，弹出窗口鼠标也是可以选的 之前找了一个 Alfred的插件，搜索窗口的title，然后打开窗口。后面发现有个 Contexts的神器，直接入手了！公司的项目比较多，一次要开10来个 idea，每次切换窗口找项目好蛋疼，自从用了这个，再也不用切一个，看项目名，然后再切了！ 全屏了，command+`就失效了 我也有这个困惑，看了大家的评论，自己在app store里找了一个多小时终于发现一个叫Snap的应用，绝对可以大大提高窗口切换的效率！ Snap：在 Mac App Store 上的内容 就是一个快速呼出软件的功能 装一个HyperDock+HyperSwitch，爽很多。HyperSwitch可以实现：Option+Tab 窗口切换，Cmd+Tab（程序切换）中集成窗口切换。 隐藏应用程序（Cmd+H）=将当前 App「最小化到本身图标上」（Dock 里此 App 的图标会变成半透明） ，而「单独缩小到 Dock 右端」只是最小化窗口（Cmd+M） 另外，第 3 点「Dock 长时间单击图标」打开的菜单，其实可以用鼠标右键（或使用 Ctrl+单击）呼出 使用内置的 Command-Tab 组合键来切换应用，可能会发现一个问题，它会默认显示所有正在运行的 App，不管这个 App 有没有打开的窗口。 HyperSwitch 让 Command-Tab 窗口切换更好用：HyperSwitch | App+1 - 少数派 有一些缺点，它现在还是 Beta 版本，非常久没有更新过了。设置选项有 bug，部分设置选项是失效的。 HyperSwitch 默认的快捷键是 Option-Tab，你可以直接修改为 Command-Tab，更符合平时的使用习惯。 HyperSwitch 官网 不错，还算好用 可以设置在 all windows 里切换，也可以在当前应用切换 如果应用的某个窗口隐藏的话，在 current app 窗口切换时，会放在最后 如果应用隐藏的话，在 all windows 里不会出现 使用 「command + tab」 的组合键，同时按下键盘上的「上」按键，则会 mission control HyperDock HyperDock 1.7.0.1 窗口预览 - 精品MAC应用分享 窗口预览功能： HyperDock 窗口预览功能更进一步的将Taskbar功能优化。HyperDock 窗口预览功能可以一次性显示相同应用程序所打开的窗口。但像是firefox和Safari这种使用多标签页的显示方式，则只能显示一个窗口预览，无法将所有标签页全部显示。HyperDock 窗口预览状态下，用户可以直接在窗口预览中选择需要使用的程序窗口。同时，在鼠标滑到预览窗口时，当前应用窗口会自动前置。这个和Windows 7 的Taskbar 功能保持一致。你还可以在窗口预览中直接关闭应用程序窗口。 自动排列功能： Windows 7 的窗口自动排列功能方便实现双屏浏览，特别适合多线程工作。Mac OS X 系统是不提供最大化按钮的，只有“最适合大小按钮，最小化和关闭按钮”。HyperDock 窗口自动排列功能可以在 Mac OS X 下实现将当前窗口边缘最大化功能。HyperDock 可以实现拖拉窗口至屏幕上方快速最大化至全屏，Mac OS X 自带是没有窗口最大化快捷操作的。同时，窗口拖沓到左右边缘时，可以直接将窗口占满半边屏幕。方便那些需要同时打开两个窗口的用户。 整合Space使用： HyperDock 还整合了Space管理功能。如果用户启用 Space 模式，只需把鼠标移到 Dock 正在运行的程序上，即可显示该应用程序属于第几个 Space。可以使用鼠标直接拖至当前 Space 桌面，让原本就十分强大的 Space 如虎添翼。 Finder 为什么Mac OS X 在Finder里不可以新建文本文件？ - 知乎 Mac必备神器之Go2Shell以及使用技巧 - 简书 定位到 terminal TerminalFinder Alfred + fi 从 finder 开到iterm Alfred + if 从 iterm 开到finder 有些缓慢 Go2Shell 必须把view-&gt;customize toolbar点出来才拖上去了 － － 1$ open -a Go2Shell --args config Mac必备神器之Go2Shell以及使用技巧 - 简书 听说新版本不好，结合不了其他软件了","tags":[{"name":"使用技巧","slug":"使用技巧","permalink":"https://hmgqzx.github.io/wiki/tags/使用技巧/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"Welcome to Hmgqzx's Wiki Site","date":"1998-12-31T16:00:00.000Z","path":"index/","text":"这是 Hmgqzx 的个人 Wiki 站点，主要将平时搜寻资料时的零散知识点整理一下，以飨各位。 搭建历程 在尝试了多个 Wiki 系统后，我找到了一个基于 Hexo 的 Wiki 主题 Wikitten，感觉还不错，然后就挂在 Github 上啦~ 个人的 Wiki 理念和这个 Wiki 主题的原作者还是很贴近的。简单来说，对于在网上搜索得来的零碎 “知识”（如资源列表、操作指导等）和平时学习得来的零散知识，放在 Wiki 里更为合适；等在这个主题里摸爬滚打一番后，又自己的一番见解了，再内化、提取、总结等，写成 Blog 文章（说来惭愧，一直琢磨着写博客，可现在都还没正儿八经地开始 😓）。 更加详细的论述可以阅读 该Wiki 主题作者的文章 排版问题 这个主题是基于 theme-icarus 的，但是对一些内容的排版解析有些问题，不太符合我的习惯，如行内的 Mathjax 公式都通通另起一行了（经测试，在 icarus 里没有这个问题） 目前是根据个人习惯，用不蒜子增加了访客记录；其他的样式和问题留待以后（ 还是更加习惯 Github 的样式，不久后应该就会动手改 如今已经改了大部分 ） 阅读建议 在平时的记录中，主要是自己对所得资料的总结整理，所以我已经熟悉的内容一般不会再重复记录下去。这样就可能出现如下情况：某些内容对初涉这一主题的人来说会有困扰，我建议你： Google 相关关键字来了解基础知识 点击参考链接阅读原始资料来源（通常会重头讲到尾） 为了对阅读者更加友好，我发布到线上时会尽量再补充多一点细节（但不会太多，那样就本末倒置了，跟转帖没多大区别）。 你可以将这里看成是一种“读者文摘”，其实我也不过是将一些关键字告诉了你，相信你自己 Google 也能继续找到需要的信息。这里的整理，出发点是方便我个人的再次查询，省去每次重复 Google 的时间（况且有时候要不停地变换关键字才能找到需要的那篇文章），而分享出来，可能也帮助大家节省了一点时间，何乐而不为呢？ 其他说明 自 2016 年 10 月左右，我开始采用 MarkDown 记录笔记，来构建个人 Wiki 的本地系统。目前也积累了不少主题。不过大多都是初始记录，只是要用到时才全文搜索（Mac 下推荐 FoxTrot 这个软件）。所以整体来说，这些知识还非常散乱，虽然 Wiki 的初衷是为了记录零碎知识，但是如果将它们直接丢到线上，访客的阅读体验会很差，可以说除了作者之外，基本没人有耐心看下去。故打算定时整理、审视，再发布于此。 （改为：未整理的，打上未整理 的 tag，如果看得下去就看吧 😂） 最后 也许你是通过搜索引擎来到这里，假如这里提供给你一些有价值的信息（而不是让你感到浪费时间），那真是最好不过了！","tags":[],"categories":[]}]}