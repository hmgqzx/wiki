{"pages":[{"title":"About","date":"2018-03-01T18:50:13.000Z","path":"about/index.html","text":""},{"title":"Categories","date":"2018-03-01T18:50:13.000Z","path":"categories/index.html","text":""},{"title":"Tags","date":"2018-03-01T18:50:13.000Z","path":"tags/index.html","text":""}],"posts":[{"title":"Python 字符串的常用知识","date":"2018-03-01T18:13:19.000Z","path":"Python/常用札记/Python 字符串/","text":"字符串处理 删除字符串中不需要的字符 strip() 方法能用于删除开始或结尾的字符。 lstrip() 和 rstrip() 分别从左和从右执行删除操作。 默认情况下，这些方法会去除空白字符，但是你也可以指定其他字符[1] 需要注意的是这些 strip方法不会对字符串的中间的文本执行去除操作。[1:1] 如果要处理中间的空格，需要使用 replace()方法或者是用正则表达式进行替换[1:2] 查找是否含有某个子字符串 最快、最简洁的方法是[2]： 12if text in string: pass str 和 数值类型的转化 Python 中的都是在方法中传入参数，非常简单[3]： 12int('123')str(123) 注脚 2.11 删除字符串中不需要的字符 — python3-cookbook 2.0.0 文档 ↩︎ ↩︎ ↩︎ python - What’s a faster operation, re.match/search or str.find? - Stack Overflow ↩︎ python数据类型转换（str跟int的转换） - Hello World! - CSDN博客 ↩︎","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"},{"name":"常用札记","slug":"Python/常用札记","permalink":"https://hmgqzx.github.io/wiki/categories/Python/常用札记/"}]},{"title":"Welcome to Hmgqzx's Wiki Site","date":"2018-03-01T18:13:19.000Z","path":"index/","text":"这是 Hmgqzx 的个人 Wiki 站点，主要将平时搜寻资料时的零散知识点整理一下，以飨各位。 搭建历程 在尝试了多个 Wiki 系统后，我找到了一个基于 Hexo 的 Wiki 主题 Wikitten，感觉还不错，然后就挂在 Github 上啦~ 个人的 Wiki 理念和这个 Wiki 主题的原作者还是很贴近的。简单来说，对于在网上搜索得来的零碎 “知识”（如资源列表、操作指导等）和平时学习得来的零散知识，放在 Wiki 里更为合适；等在这个主题里摸爬滚打一番后，又自己的一番见解了，再内化、提取、总结等，写成 Blog 文章。 更加详细的就以他的文章代为说明吧 排版问题 这个主题是基于 theme-icarus 的，但是对一些内容的排版解析有些问题，不太符合我的习惯，如行内的 Mathjax 公式都通通另起一行了（经测试，在 icarus 里却没有这个问题） 目前是根据个人习惯，用不蒜子增加了访客记录；其他的样式和问题留待以后（ 还是更加习惯 Github 的样式，不久后应该就会动手改 如今已经改了大部分 ） 阅读建议 在平时的记录中，主要是自己对所得资料的总结整理，所以我已经熟悉的内容一般不会再重复记录下去。这样就可能出现如下情况：某些内容对初涉这一主题的人来说会有困扰，我建议你： Google 相关关键字来了解基础知识 点击参考链接阅读原始资料来源（通常会重头讲到尾） 为了对阅读者更加友好，我发布到线上时会尽量再补充多一点细节（但不会太多，那样就本末倒置了，跟转帖没多大区别）。 你可以将这里看成是一种“读者文摘”，其实我也不过是将一些关键字告诉了你，相信你自己 Google 也能继续找到需要的信息。这里的整理，出发点是方便我个人的再次查询，省去每次重复 Google 的时间（况且有时候要不停地变换关键字才能找到需要的那篇文章），而分享出来，可能也帮助大家节省了一点时间，何乐而不为呢？ 其他说明 自 2016 年 10 月左右，我开始采用 MarkDown 记录笔记，来构建个人 Wiki 的本地系统。目前也积累了不少主题，但是因为大多是初始记录，只是要用到时才快速查询，大部分都没有再重头仔细读一遍、整理一遍。如果就这样全部直接丢到线上，访客的阅读体验会很差。将会定时整理、审视，再发布于此 最后 也许你是通过搜索引擎来到这里，假如这里提供给你一些有价值的信息（而不是让你感到浪费时间），那真是最好不过了！","tags":[],"categories":[]},{"title":"有限状态机 FSM","date":"2018-03-01T18:13:19.000Z","path":"42/有限状态机/","text":"定义 有限状态机（Finite-state machine）是一种用来进行对象行为建模的工具，其作用主要是描述对象在它的生命周期内所经历的状态序列，以及如何响应来自外界的各种事件。[1] 特征 简单说，它有三个特征[2]： 状态总数（state）是有限的。 任一时刻，只处在一种状态之中。 某种条件下，会从一种状态转变（transition）到另一种状态。 几个重要概念[3] 状态（State）：表示对象的某种形态，在当前形态下可能会拥有不同的行为和属性。 转移（Transition）：表示状态变更，并且必须满足确使转移发生的条件来执行。 动作（Action）：表示在给定时刻要进行的活动。 事件（Event）：事件通常会引起状态的变迁，促使状态机从一种状态切换到另一种状态。 状态机的要素[1:1] 状态机可归纳为4个要素，即现态、条件、动作、次态。“现态”和“条件”是因，“动作”和“次态”是果。详解如下： 现态：当前所处的状态。 条件：又称为“事件”。当一个条件被满足，将会触发一个动作，或者执行一次状态的迁移。 动作：条件满足后执行的动作。动作执行完毕后，可以迁移到新的状态，也可以仍旧保持原状态。动作不是必需的，当条件满足后，也可以不执行任何动作，直接迁移到新状态。 次态：条件满足后要迁往的新状态。“次态”是相对于“现态”而言的，“次态”一旦被激活，就转变成新的“现态”了。 我们可以用状态表了表示整个过程，如下图所示。 状态表 注意的问题 避免把某个“程序动作”当作是一种“状态”来处理[1:2] 那么如何区分“动作”和“状态”？“动作”是不稳定的，即使没有条件的触发，“动作”一旦执行完毕就结束了；而“状态”是相对稳定的，如果没有外部条件的触发，一个状态会一直持续下去。 例子 游戏 有限状态机用来编游戏和故事是最好的了。[4] 这有一个寻宝游戏，首先你从‘开始’出发，然后你跟随箭头知道你到达终点。 褒扬和批判 游戏开发 在游戏开发中使用状态机显然不失为一种不错的选择，首先它的概念并不复杂，其次它的实现也十分简单而直接。但它的缺点却也十分明显，例如难以复用，因为它往往需要根据具体的情况来做出反应，当然当状态机的模型复杂到一定的程度之后，也会带来实现和维护上的困难。[3:1] 更多 参考：[5] 代码相关：[2:1] 对JavaScript的意义在于，很多对象可以写成有限状态机。 参考 深入浅出理解有限状态机 - 简书 ↩︎ ↩︎ ↩︎ JavaScript与有限状态机 - 阮一峰的网络日志 ↩︎ ↩︎ 趣说游戏AI开发：对状态机的褒扬和批判 - Runtime - SegmentFault ↩︎ ↩︎ Programming Basics: 有限状态机 ↩︎ 有限状态机 - 维基百科，自由的百科全书 ↩︎","tags":[],"categories":[{"name":"42","slug":"42","permalink":"https://hmgqzx.github.io/wiki/categories/42/"}]},{"title":"Git 其他常见相关问题","date":"2018-03-01T18:13:19.000Z","path":"Git/Git-其他相关问题/","text":"Github 等远程仓库的相关问题 将已存在的项目通过 Git 传到 GitHub 等 主要步骤概括起来就是： 对该已存在的本地项目 git init 对需要的文件进行提交（如有需要，可以编辑 .gitignore 文件、进行多次小提交等操作） 关联 remote repository （远程仓库） push 本地改动到 remote repository （远程仓库） 更详细的具体命令，请参考：[1][2] 参考 Adding an existing project to GitHub using the command line - User Documentation ↩︎ 如何将一个已存在的目录转换为一个 Git 项目并托管到 GitHub 仓库 - Leon’s scribble. ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"}]},{"title":"Git 的学习资源","date":"2018-03-01T18:13:19.000Z","path":"Git/Git-学习资源/","text":"快速的简单入门 git 使用简易指南[1] 清晰、排版漂亮，包含了常用的一些基本操作 研习 Pro Git[2] Git官方推荐书籍，值得认真阅读一遍；并且由于项目开源、有大量人员参与，中文翻译质量也很高 参考 git 使用简易指南 ↩︎ Pro Git - Book - 中文版 ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"}]},{"title":"LaTeX","date":"2018-03-01T18:13:19.000Z","path":"LaTex/LaTeX/","text":"LaTeX札记 | HaHack Handout With Script | HaHack 生成幻灯片的 LaTeX 样式包 安装、配置好一个 TeX 发行版； 选择一个顺手的编辑器（和 PDF 阅读器） 安装 在 OS X 上，主流是用 MacTex，他是一个基于 TeX Live 之上的封装，方便新手 MacTex 为 MacTeX 配置中文支持 | 始终 要做的事情只有两件： 配置一个 UTF-8 的编辑环境； 用 ctex 的语法选择合适的字体。 编辑器 有很多种，各有所长 Latexian GNU Emacs texstudio Sublime Text texmaker Texshop（MacTex自带）","tags":[],"categories":[{"name":"LaTex","slug":"LaTex","permalink":"https://hmgqzx.github.io/wiki/categories/LaTex/"}]},{"title":"JavaScript 中的回调","date":"2018-03-01T18:13:19.000Z","path":"JavaScript/回调函数/","text":"回调是什么？ A callback is a function that is passed as an argument to another function and is executed after its parent function has completed.[1] A callback function, also known as a higher-order function, is a function that is passed to another function (let’s call this other function “otherFunction”) as a parameter, and the callback function is called (or executed) inside the otherFunction. [2] A callback function is essentially a pattern (an established solution to a common problem), and therefore, the use of a callback function is also known as a callback pattern.[2:1] 简单地说: 一个回调函数是，当执行完另外一个函数（通常是异步的）之后，再来执行的一种函数[3]。也就是说，回调函数是，做完其他“任务”后，再 call back 来执行的函数 更进一步地说: 在 JavaScript 中，因为函数是对象，所以可以作为参数传入所谓的高阶函数，也能被高阶函数作为返回值返回[4]。任何函数，只要它作为参数传入且随后被调用，都可称之为回调函数[3:1]。 也就是说，在高阶函数中，作为参数传入的回调函数被当成一个整体来进行调用，从这一层上说，回调函数与抽离出来的子函数没有区别。只是因为他的用途而赋予了“回调”的名称。 How Callback Functions Work? pass definition as parameter When we pass a callback function as an argument to another function, we are only passing the function definition. We are not executing the function in the parameter. And since the containing function has the callback function in its parameter as a function definition, it can execute the callback anytime.[2:2] 我们对 the containing function（“外层的那个函数、方法”）传递的只是回调函数的定义，而不是在参数处执行这个回调函数（执行的话是这个样子`callback()`，是吧） 当 the containing function “拿到” 了回调函数的定义，那么他想在什么时候执行这个回调函数都可以了 closure The callback is a closure. As we know, closures have access to the containing function’s scope, so the callback function can access the containing functions’ variables, and even the variables from the global scope.[2:3] callback 是一个 closure，所以回调函数可以访问 the containing function 里的变量 使用 this 的指向问题 现在可以用 ES6 的箭头函数[5]来解决 “Callback Hell” Problem 也就是多重嵌套的匿名回调，使得代码可读性很低 solutions[2:4]： Name your functions and declare them and pass just the name of the function as the callback, instead of defining an anonymous function in the parameter of the main function. Modularity: Separate your code into modules, so you can export a section of code that does a particular job. Then you can import that module into your larger application. 利用回调函数分离职能[2:5] 使用场合[2:6] For asynchronous execution (such as reading files, and making HTTP requests) In Event Listeners/Handlers In setTimeout and setInterval methods For Generalization: code conciseness 疑问 在 ajax 等中，“引擎”是如何知道所要的数据到达了，从而来执行 callback 呢？ 参考 关于Javascript回调函数的那些事 | 人人都是互联网创意G客 ↩︎ Understand JavaScript Callback Functions and Use Them | JavaScript is Sexy ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ ↩︎ 回归基础：在JavaScript中回调函数是什么？ - 前端 - 掘金 ↩︎ ↩︎ They（Functions） can be “stored in variables, passed as arguments to functions, created within functions, and returned from functions”. ↩︎ 箭头函数 - JavaScript | MDN ↩︎","tags":[],"categories":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://hmgqzx.github.io/wiki/categories/JavaScript/"}]},{"title":"Dock","date":"2018-03-01T18:13:19.000Z","path":"Mac/Dock/","text":"综合设置 只显示已打开应用[1] 123defaults write com.apple.dock static-only -boolean true; killall Dock# 恢复为默认设置：defaults delete com.apple.dock static-only; killall Dock 关掉 Dock 动画 主要参考：[2] 隐藏 dock 特定 app 图标 主要原理 在 Info.plist 添加 12&lt;key&gt;LSUIElement&lt;/key&gt;&lt;true/&gt; LSUIElement 是 Launch Services Keys [3]中的一项。其 Specifies whether the app is an agent app, that is, an app that should not appear in the Dock or Force Quit window. [4] If this key is set to YES, Launch Services runs the app as an agent app. [4:1] cli 可以用如下命令[5]： 1defaults write /Applications/Adium.app/Contents/Info.plist LSUIElement true 乱码问题 用其他编辑器打开 Info.plist 时，有可能乱码（我不知道什么原因），这时可以使用 Xcode 来打开。它的 Property List Editor 也使得阅读选项非常清晰。[6] 参考 装点你的 Dock：外观篇丨一日一技 · Mac - 少数派 ↩︎ Mac 加速：干掉那些「炫酷」的动画 - MacTips - 知乎专栏 ↩︎ Launch Services Keys ↩︎ Launch Services Keys ↩︎ ↩︎ macos - Hide Adium (or any other app’s) icon in the dock - Ask Different ↩︎ macos - Hide Adium (or any other app’s) icon in the dock - Ask Different ↩︎","tags":[],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"QuickLook 预览增强插件","date":"2018-03-01T18:13:19.000Z","path":"Mac/QuickLook 预览增强插件/","text":"QuickLook（快速预览）是 Mac OS X 中一项很好的功能。用户选择文件后，按下空格键即可快速预览。因为不用点击打开，还能使用方向键切换，从而节省了大量的时间。但对于开发者来说，系统内置的功能还不能完全满足需求。 需要预览如下文件时，这些插件帮助了我许多： MarkDown文件 源代码文件，支持语法高亮 纯文本或无后缀的“文本”文件 可直接预览，而不用去设置打开方式，太棒👍 插件 这里是一个列表，包含了不少有用的外部插件，可以通过 brew 安装： sindresorhus/quick-look-plugins: List of useful Quick Look plugins for developers 在这里：QuickLook Plugins List 你能找到更多的插件 附言 还不了解 brew 的普通用户可参考这篇文章 加强你的「一指禅」：Mac QuickLook「快速预览」兼容性扩展教程 - 少数派","tags":[],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"dotfiles","date":"2018-03-01T18:13:19.000Z","path":"Mac/dotfiles/","text":"dotfiles，就是以 . (dot)为前缀的文件，一般在系统里是隐藏的，而很多配置就是这些文件。这里 列出了不少人的配置，可以借鉴 参考 如何優雅地在 Mac 上使用 dotfiles? 善用 dotfiles 個人化自己的工作環境 « Cloudの丘","tags":[],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"Mac OS X 里特有的那些命令行","date":"2018-03-01T18:13:19.000Z","path":"Mac/Mac 命令行工具/","text":"Mac 里的不少配置可以通过特定的命令行来设定，以下是我比较常用的、感兴趣的命令。我一般是在 zsh 里对这些常用的命令设定 alias，非常方便。 更多的命令请参考： herrbischoff/awesome-osx-command-line: Use your OS X terminal shell to do awesome things. Finder Show All File Extensions 显示所有的文件扩展名 1defaults write -g AppleShowAllExtensions -bool true Hide Folder in Finder 隐藏 Finder 里的指定文件夹 1chflags hidden /path/to/folder/ Show Hidden Files 显示隐藏文件 隐藏文件是指以.开头的系统文件等，在 Finder 里默认隐藏；开启显示后，数目会很多，建议平时不用时关闭 12345# Show All #要重启才行？defaults write com.apple.finder AppleShowAllFiles true# Restore Default File Visibilitydefaults write com.apple.finder AppleShowAllFiles false Unhide User Library Folder 不隐藏用户的库文件夹 1chflags nohidden ~/Library Increase Number of Recent Places 增加 Finder 中的“最近使用文件夹”数量 12defaults write -g NSNavRecentPlacesLimit -int 10 &amp;&amp; \\killall Finder Show “Quit Finder” Menu Item 设定 Finder 可退出（强烈推荐） Makes possible to see Finder menu item “Quit Finder” with default shortcut Cmd + Q 这个好用，这样就能使用 Cmd + Q 一次性关闭所有的 Finder 窗口了 1234567# Enabledefaults write com.apple.finder QuitMenuItem -bool true &amp;&amp; \\killall Finder# Disable (Default)defaults write com.apple.finder QuitMenuItem -bool false &amp;&amp; \\killall Finder Path Bar 显示路径栏 开启后会在 Finder 底部显示当前路径信息 12345# Showdefaults write com.apple.finder ShowPathbar -bool true# Hide (Default)defaults write com.apple.finder ShowPathbar -bool false Status Bar 状态栏 在 Finder 最底部，显示当前文件夹项目数量、光标选中数量、硬盘可用容量 12345# Showdefaults write com.apple.finder ShowStatusBar -bool true# Hide (Default)defaults write com.apple.finder ShowStatusBar -bool false Set Current Folder as Default Search Scope 设置当前文件夹为默认搜索域 整理有序的话，大部分情况下只是搜索当前目录，这样就不用每次都要多点击一次来选择了 1defaults write com.apple.finder FXDefaultSearchScope -string &quot;SCcf&quot; Layout Desktop Icon Visibility 显示/隐藏桌面图标 OS X 桌面的右键功能里没有 Windows 的“隐藏桌面图标”选项，可以通过下面的命令实现 1234567# Hide Iconsdefaults write com.apple.finder CreateDesktop -bool false &amp;&amp; \\killall Finder# Show Icons (Default)defaults write com.apple.finder CreateDesktop -bool true &amp;&amp; \\killall Finder Battery 电池 哈哈，这个纯粹是列在这儿，平时并没多大用 Remaining Battery Percentage 剩余电量 1pmset -g batt | egrep \"([0-9]+\\%).*\" -o --colour=auto | cut -f1 -d';' Remaining Battery Time 电池剩余使用时间 1pmset -g batt | egrep \"([0-9]+\\%).*\" -o --colour=auto | cut -f3 -d';' Power Management 电源管理 Prevent System Sleep 防止系统进入睡眠一段时间 参数单位是秒 Prevent sleep for 1 hour: 1caffeinate -u -t 3600 Put Display to Sleep after 15 Minutes of Inactivity 一段时间不活动后关闭显示器 参数单位是分钟 1sudo pmset displaysleep 15 Put Computer to Sleep after 30 Minutes of Inactivity 一段时间不活动后使 Mac 睡眠 参数单位是分钟 1sudo pmset sleep 30 Check System Sleep Idle Time 查看系统进入休眠的间隔 目前我的是 1 分钟 12$ sudo systemsetup -getcomputersleepComputer Sleep: after 1 minutes Set System Sleep Idle Time to 60 Minutes 设置系统进入休眠的间隔 1sudo systemsetup -setcomputersleep 60 Audio Set Audio Volume 1osascript -e &apos;set volume 4&apos; Play Audio File You can play all audio formats that are natively supported by QuickTime. 1afplay -q 1 filename.mp3 TTS 吐槽下，综合各方面考虑，Mac 上可用的 TTS 大概最好的就是系统自带的了。然而——还是那么地垃圾…… Speak Text with System Default Voice 用 TTS 发音朗读文本 1say &apos;All your base are belong to us!&apos; Create Audiobook From Text Uses “Alex” voice, a plain UTF-8 encoded text file for input and AAC output. 1say -v Alex -f file.txt -o &quot;output.m4a&quot; Networking Tools 网络工具 Ping a Host to See Whether It’s Available 这个大概是天朝特色了…… 1ping -o github.com Troubleshoot Routing Problems 1traceroute github.com SSH Remote Login 远程登录 12345# Enable remote loginsudo launchctl load -w /System/Library/LaunchDaemons/ssh.plist# Disable remote loginsudo launchctl unload -w /System/Library/LaunchDaemons/ssh.plist TCP/IP Show Application Using a Certain Port 显示当前占用特定端口的应用列表 （强烈推荐） 这个用来检查端口占用很不错 This outputs all applications currently using port 80. 1sudo lsof -i :80 Show External IP Address 1dig +short myip.opendns.com @resolver1.opendns.com Wi-Fi Show Local IP Address 1ipconfig getifaddr en0 Show Wi-Fi Connection History 1defaults read /Library/Preferences/SystemConfiguration/com.apple.airport.preferences | grep LastConnected -A 7 Show Wi-Fi Network Passwords Exchange SSID with the SSID of the access point you wish to query the password from. 1security find-generic-password -D &quot;AirPort network password&quot; -a &quot;SSID&quot; -gw Spotlight 这个要怎么用？听说这个很久了，还没去具体了解使用 Spotlight Indexing 12345# Disablemdutil -i off -d /path/to/volume# Enable (Default)mdutil -i on /path/to/volume Erase Spotlight Index and Rebuild 重建索引 1mdutil -E /path/to/volume Search via Spotlight 搜索 1mdfind -name &apos;searchterm&apos; Show Spotlight Indexed Metadata 1mdls /path/to/file Screenshots 屏幕截图 目前在用软件Snip，满足基本所需了 Take Delayed Screenshot Takes a screenshot as JPEG after 3 seconds and displays in Preview. 1screencapture -T 3 -t jpg -P delayedpic.jpg Save Screenshots to Given Location Sets location to ~/Desktop. 12defaults write com.apple.screencapture location ~/Desktop &amp;&amp; \\killall SystemUIServer Save Screenshots in Given Format Sets format to png. Other options are bmp, gif, jpg, jpeg, pdf, tiff. 1defaults write com.apple.screencapture type -string &quot;png&quot; Disable Shadow in Screenshots 隐藏截图里的阴影 有阴影好看很多 12defaults write com.apple.screencapture disable-shadow -bool true &amp;&amp; \\killall SystemUIServer Set Default Screenshot Name Date and time remain unchanged. 12defaults write com.apple.screencapture name &quot;Example name&quot; &amp;&amp; \\killall SystemUIServer Login Window Set Login Window Text 1sudo defaults write /Library/Preferences/com.apple.loginwindow LoginwindowText &quot;Your text&quot; Security Application Firewall 这个是不是可以阻止应用联网？？（之前试了下，好像没什么效果，😓） Firewall Service 12345678# Show Statussudo /usr/libexec/ApplicationFirewall/socketfilterfw --getglobalstate# Enablesudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate on# Disable (Default)sudo /usr/libexec/ApplicationFirewall/socketfilterfw --setglobalstate off Add Application to Firewall 1sudo /usr/libexec/ApplicationFirewall/socketfilterfw --add /path/to/file Passwords Generate Secure Password and Copy to Clipboard 1LC_ALL=C tr -dc &quot;[:alpha:][:alnum:]&quot; &lt; /dev/urandom | head -c 20 | pbcopy Physical Access Launch Screen Saver 启动屏幕保护程序 1open /System/Library/Frameworks/ScreenSaver.framework/Versions/A/Resources/ScreenSaverEngine.app Lock Screen 锁屏 1/System/Library/CoreServices/Menu\\ Extras/User.menu/Contents/Resources/CGSession -suspend Screensaver Immediate Lock 12345678# Statusdefaults read com.apple.screensaver askForPasswordDelay# Enable (Default)defaults write com.apple.screensaver askForPasswordDelay -int 0# Disable (Integer = lock delay in seconds)defaults write com.apple.screensaver askForPasswordDelay -int 10 Screensaver Password 12345678# Statusdefaults read com.apple.screensaver askForPassword# Enabledefaults write com.apple.screensaver askForPassword -int 1# Disable (Default)defaults write com.apple.screensaver askForPassword -int 0 Shutdown 关机 1sudo poweroff Uptime 已开机时间 How long since your last restart. 12$ uptime15:38 up 19 days, 14:48, 6 users, load averages: 1.85 1.55 1.47","tags":[{"name":"配置","slug":"配置","permalink":"https://hmgqzx.github.io/wiki/tags/配置/"},{"name":"小技巧","slug":"小技巧","permalink":"https://hmgqzx.github.io/wiki/tags/小技巧/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"Homebrew","date":"2018-03-01T18:13:19.000Z","path":"Mac/homebrew/","text":"Homebrew 是 Mac OS X 上的软件包管理系统，使用它可以方便地安装、更新许多软件（“无人值守”~自动化）。称之为“ Mac 必备神器”一点也不为过。 Homebrew 常用命令 常用的命令没几个： 12345678$ brew install wget # 安装源码$ brew info svn # 显示软件的各种信息，包括版本啊源码地址啊等等$ brew uninstall wget # 卸载软件，很爽，一键静默卸载$ brew search git # 模糊搜索brew 支持的软件。如果不加软件名，就会列出所有它支持的软件。多的很。$ brew list # 列出本机通过brew安装的所有软件$ brew update # 跟新brew软件自身$ brew upgrade wget # 更新安装过的软件,如果不加软件名，就更新所有可以更新的软件$ brew cleanup # 清除下载的各种缓存 装任何东西前都看看能不能用 brew 啊！（很多包/软件都支持 brew 安装） 1$ brew search &lt;软件名&gt; 查看 brew 安装的某个包所在路径 1$ brew ls &lt;package-name&gt; services utility brew services are really useful for managing system services, type $ brew services --help for more info. 查看所有的已启用的服务 1$ brew services list 可以用来检查某些包如Tomcat的运行情况（从而判断是否已正确安装） Cellar 包安装路径 Homebrew 安装的包在 /usr/local/Cellar/ 下 Homebrew keeps packages (known as kegs) in the Cellar, where you can check config and data files. It is a directory located at: 1$ ls /usr/local/Cellar/ 有时因为要指定某个包的执行程序如Tomcat等来启动，需要填写安装路径，可以这样查找： 1$ brew ls &lt;package-name&gt; homebrew-dupes System duplicate formulae for the Homebrew package manager —— homebrew-dupes 因为 homebrew 默认的措施是：not to offer duplicates for system tools。所以当我们需要安装像 grep（系统自带版本太低）等系统工具时就要用到 homebrew-dupes 这个 repository 以作替代 槽点 安装 MySQL 就不要用 Homebrew 了，多台机器上试验过，会存在问题。还是推荐用官网 dmg 安装","tags":[],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]},{"title":"Python 数据持久化","date":"2018-03-01T18:13:19.000Z","path":"Python/Python 数据持久化/","text":"参考 Python 数据持久化方式——JSON与Pickle - BrieflyX’s Base pickle| Hmgqzx’s Wiki JSON 和 Pickle 的比较 JSON是文本形式的存储，Pickle则是二进制形式（至少常用二进制） JSON是人可读的，Pickle不可读 JSON广泛应用于除Python外的其他领域，Pickle是Python独有的。 JSON只能dump一些python的内置对象，Pickle可以存储几乎所有对象。","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"Python 中的常量","date":"2018-03-01T18:13:19.000Z","path":"Python/Python 常量/","text":"Python在语法上并没有定义常量，尽管PEP 8定义了常量的命名规范为大写字母和下划线组成。 解决方案 Constants in Python 参考 Python常量 - Like的世界","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"19.6 控制结构与复杂度","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.6 控制结构与复杂度/","text":"如果控制流不是影响复杂度的最大因素，那么至少也是最大的因素之一 复杂度的重要性 参考[[……]] 如何衡量复杂度 利用决策点（decision point）数量 最著名的方法，源自 Tom McCabe。又称[[圈复杂度]] 具体操作： 计数从 1 开始，一直往下阅读程序 一旦遇到如下关键字（或其他同性质的词），就加 1： if、while、repeat、for、and、or 对 case 语句中的每一种情况都加 1 对照下表： 子程序中的决策点数量 结论 1 ~ 5 子程序可能还不错，起码不复杂 6 ~ 10 得想办法简化子程序了 10 + 应该将这个子程序的某一部分改写为另一个子程序再调用它 关于上限： 10 个决策点的上限并不是绝对的（如 flask8 推荐上限是12 ），而是应该把决策点的数量当做警示。当警示出现时，就要仔细考虑子程序是否真的过于复杂、是否需要重新设计了 其他衡量手段 智力实体数量 为了理解应用程序，你必须在同一时间记住的智力实体的数量 所用的数据量 ？？ 控制结构中的嵌套层数 toWrite 代码行数 toWrite 同一变量的跨度 toNote 变量的生存期 toNote 输入和输出的量 ？？ 延伸 python 中的 flask8 可以用来衡量圈复杂度","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"Pyenv —— Python版本管理工具","date":"2018-03-01T18:13:19.000Z","path":"Python/Python 虚拟环境/","text":"pyenv可以帮助你建立多个版本的 python 环境，它们相互隔离，不会污染到系统自带的 Python（ pip 安装的包也是在各自目录下的） 安装 安装 pyenv pyenv 项目主页#安装步骤 12$ brew update$ brew install pyenv 添加环境变量 PYENV_ROOT指向pyenv检出的根目录，并向$PATH添加$PYENV_ROOT/bin以提供访问pyenv这条命令的路径(这里的shell配置文件依不同SHELL而需作修改,如bash：~/.bash_profile，Zsh：~/.zshrc ） ZSH 用 brew 安装的话，配置好环境变量的了（我自己又按手动方法在 zsh 里加了环境变量） After installation, you’ll still need to add 12eval \"$(pyenv init -)\"eval \"$(pyenv virtualenv-init -)\" to your profile (as stated in the caveats). You’ll only ever have to do this once. pyenv 项目主页#安装步骤 Define environment variable PYENV_ROOT to point to the path where pyenv repo is cloned and add $PYENV_ROOT/bin to your $PATH for access to the pyenv command-line utility. 123# 我的 zsh 将环境变量放在另一个文件（env.sh）中，在那里添加环境变量就可以了$ echo 'export PYENV_ROOT=\"$HOME/.pyenv\"' &gt;&gt; ~/.zshrc$ echo 'export PATH=\"$PYENV_ROOT/bin:$PATH\"' &gt;&gt; ~/.zshrc Add pyenv init to your shell to enable shims and autocompletion. Please make sure eval &quot;$(pyenv init -)&quot;is placed toward the end of the shell configuration file since it manipulates PATH during the initialization. 12# 使用自动完成功能，要将配置写在 shell configuration file 末尾$ echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc Restart your shell so the path changes take effect. 1$ exec $SHELL # 重启shell(因为修改了$PATH) 安装 pyenv-virtualenv pyenv-virtualenv 项目主页#安装步骤 使用 brew 安装 1$ brew install pyenv-virtualenv Add pyenv virtualenv-init to your shell to enable auto-activation of virtualenvs. This is entirely optional but pretty useful. See “Activate virtualenv” below. 12345# 使用自动完成等功能，直接将下面这句写在 shell configuration file (~/.zshrc) 末尾就可以eval \"$(pyenv virtualenv-init -)\"# 用命令的话是下面那样：$ echo 'eval \"$(pyenv init -)\"' &gt;&gt; ~/.zshrc 使用 pyenv 使用 命令参考 · yyuu/pyenv pyenv install安装指定的版本 12$ pyenv install -v 2.7.13 #添加-v参数用于显示细节$ pyenv rehash #安装新版本的python或者其他二进制包后都需要运行，或者重启shell pyenv-virtualenv 使用 创建 创建虚拟环境–pyenv virtualenv 版本号 虚拟环境名。 1$ pyenv virtualenv 3.5.1 venv-3.5.1 删除 123$ pyenv uninstall my-virtual-env# 删除时会弹出对话框，输入‘y’确认# 或者你可以直接删除 ~/.pyenv/versions中的相应目录 仅查看python的虚拟环境 1$ pyenv virtualenvs 自动激活 123$ mkdir myproject$ cd myproject$ pyenv local myenv 手动激活 You can also activate and deactivate a pyenv virtualenv manually: 12pyenv activate &lt;name&gt;pyenv deactivate 管理版本的其他简单方法 不要更改系统默认的python2（因为改了可能会导致系统某些用python2写的系统文件出错），每次执行时加版本号，python 就是2的版本，python3就是3的版本；用 pip会安装包到 2 的版本，用pip3会安装到 3的版本。 直接在自己写的程序里指定环境变量，如 #!/usr/bin/env python3。 参考 python虚拟开发环境配置 - 简书 #配置好了 #相关使用可以再参考这个 Python多版本管理器pyenv和虚拟环境pyenv-virtualenv的安装设置 - 简书 使用pyenv搭建python虚拟环境 - 运维之美 | 十条","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"pyc文件","date":"2018-03-01T18:13:19.000Z","path":"Python/pyc文件/","text":"Python什么情况下会生成pyc文件？ - 知乎 简单来说，&quot;.pyc&quot; 就是编译过的 “.py” 源代码 具体过程 如果 Python 进程在机器上拥有写入权限，那么它将把程序的字节码保存为一个以 .pyc 为扩展名的文件。当程序运行之后，你会在那些源代码的附近（也就是说同一个目录下）看到这些文件 作用 Python这样保存字节码是作为一种启动速度的优化。下一次运行程序时，如果你在上次保存字节码之后没有修改过源代码的话，Python将会加载.pyc文件并跳过编译这个步骤。当Python必须重编译时，它会自动检查源文件和字节码文件的时间戳：如果你又保存了源代码，下次程序运行时，字节码将自动重新创建。 A program doesn't run any faster when it is read from a ‘.pyc’ or ‘.pyo’ file than when it is read from a ‘.py’ file; the only thing that’s faster about ‘.pyc’ or ‘.pyo’files is the speed with which they are loaded. .pyc 文件的作用是提高 load 的速度 When a script is run by giving its name on the command line, the bytecode for the script is never written to a ‘.pyc’ or ‘.pyo’ file. Thus, the startup time of a script may be reduced by moving most of its code to a module and having a small bootstrap script that imports that module. It is also possible to name a ‘.pyc’ or ‘.pyo’file directly on the command line. 在 import 别的 py 文件时，那个 py 文件会被存一份 pyc 加速下次装载。而主文件因为只需要装载一次就没有存 pyc。","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"Python collections模块","date":"2018-03-01T18:13:19.000Z","path":"Python/collections模块/","text":"collections模块 Ordered Dict 不可不知的Python模块: collections | piglei’s blog 在Python中，dict这个数据结构由于hash的特性，是无序的 内置字典： 可以看到，在迭代时是“乱”序的 1234567891011a = dict(one=1, two=2, three=3, four=4)print(a)for k, v in a.items(): print(k, v)# run:&#123;'three': 3, 'four': 4, 'one': 1, 'two': 2&#125;three 3four 4one 1two 2 OrderedDict： 12345678910111213from collections import OrderedDictb = OrderedDict(one=1, two=2, three=3, four=4)print(b)for k, v in b.items(): print(k, v) # run:OrderedDict([('one', 1), ('two', 2), ('four', 4), ('three', 3)])one 1two 2four 4three 3 顺序以添加顺序为准，和修改的顺序无关。","tags":[{"name":"Python模块","slug":"Python模块","permalink":"https://hmgqzx.github.io/wiki/tags/Python模块/"}],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"pickle","date":"2018-03-01T18:13:19.000Z","path":"Python/pickle/","text":"有时，我们需要将一个Python对象保存到硬盘里，这时就可以用 pickle 来将其序列化为一个字节流，以便保存。（在需要的时候，可以 load to 重建对象） pickle 是内置的 参考 5.21 序列化Python对象 — python3-cookbook 2.0.0 文档 #解释得非常详细 12.1. pickle — Python object serialization — Python 3.6.1 documentation pickle模块介绍 - Goodpy - 博客园 Python中使用pickle持久化对象 – oldj’s blog #评论中的内容不错","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"}]},{"title":"Sublime Text 主题","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/Sublime Text 主题/","text":"平时我没有怎么折腾主题，你可以在 TmTheme Editor 找到很多不同配色的主题，并且可以再加自定义后下载 我使用的 我一直使用着默认的 Monokai，往年不变…… Monokai • TmTheme Editor","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"}]},{"title":"SSH","date":"2018-03-01T18:13:19.000Z","path":"Unix/ssh/","text":"全称为 Secure Shell，是一项创建在应用层和传输层基础上的安全协议，为计算机上的Shell（壳层）提供安全的传输和使用环境。[1] 其优点是安全可靠（目前），传输的数据可以是经过压缩的[1:1] 基本操作 登录 123$ ssh &lt;user-name&gt;@&lt;host&gt;# 示例$ ssh pipi@192.168.13.202 关闭连接 关闭与对方的连接：直接输入exit 即可 其他操作 修改端口 默认端口是22，使用 p 参数（port）可以修改端口 123$ ssh -p &lt;port&gt; &lt;user-name&gt;@&lt;host&gt; # 示例$ ssh -p 2222 pipi@192.168.13.202 端口转发 参考[2] 原理 请参考[1:2][3] 常见问题 WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED! 场景：一次我将树莓派 A 的 sd 卡拆下，装到另一台树莓派 B 上后，连接树莓派 B 就出现这个警告 解决方法： 1$ ssh-keygen -R \"you server hostname or ip\" 原因： 在第一次 ssh 连接远程服务器时，会生成一个认证，保存在本地这边的 known_hosts。出现这个错误时，只要重新 key generate 就好[4] 更多 我还没仔细看的 一篇很详细的 tutorial [5] 参考 Secure Shell - 维基百科，自由的百科全书 ↩︎ ↩︎ ↩︎ SSH原理与运用（二）：远程操作与端口转发 - 阮一峰的网络日志 ↩︎ SSH原理与运用（一）：远程登录 - 阮一峰的网络日志 ↩︎ SSH連現時出現「WARNING: REMOTE HOST IDENTIFICATION HAS CHANGED!」解決辦法 | 電腦故我在 ↩︎ SSH Tutorial for Linux - Support Documentation ↩︎","tags":[],"categories":[{"name":"Unix","slug":"Unix","permalink":"https://hmgqzx.github.io/wiki/categories/Unix/"}]},{"title":"Zsh 安装","date":"2018-03-01T18:13:19.000Z","path":"Zsh/zsh-安装/","text":"","tags":[],"categories":[{"name":"Zsh","slug":"Zsh","permalink":"https://hmgqzx.github.io/wiki/categories/Zsh/"}]},{"title":"PlantUML —— UML 绘图工具","date":"2018-03-01T18:13:19.000Z","path":"其他工具/PlantUML/","text":"PlantUML 是一个画图脚本语言，用它可以方便地画出许多UML图 官方文档 PlantUML 语言参考文档 #中文 PlantUML Language Reference Guide 特点 支持种类 支持的UML图包括：时序图、用例图、类图、组件图、活动图。 • Sequence diagram, • Usecase diagram, • Class diagram, • Activity diagram, • Component diagram, • State diagram, • Object diagram. 安装 You can easily install GraphViz by installing brew on your Mac machine. This could fix issues if you have installed GraphViz as .dmg package. brew install libtool brew link libtool brew install graphviz brew link --overwrite graphviz Sublime 插件 使用 sublime_diagram_plugin 插件 找到 Package Control:Add Repository 再输入 https://github.com/jvantuyl/sublime_diagram_plugin.git 插件地址 默认绑定：Command + M：渲染 Chrome 插件 Sublime的plantuml插件有点鸡肋。Chrome 下的插件 PlantUML Viewer 可以自动刷新 Advanced usage Advanced usage pages 可以用来生成数独等…… 基本语法 使用 title 来指定标题 线条的形式：-&gt; —&gt; …&gt; 加冒号 : 来添加注释 使用 == xxx == 来分隔时序图 使用 actor 来定义参与者 使用括号 (xxx) 来表示用例，用例用椭圆形表达 组件图 使用方括号 [xxx] 来表示组件 可以把几个组件合并成一个包，可以使用的关键字为 package, node, folder, frame, cloud, database。不同的关键字图形不一样。 参考 使用 Sublime + PlantUML 高效地画图 - 简书 #这个是中文的，入门还可以","tags":[],"categories":[{"name":"其他工具","slug":"其他工具","permalink":"https://hmgqzx.github.io/wiki/categories/其他工具/"}]},{"title":"nodePPT —— 自动化生成 PPT","date":"2018-03-01T18:13:19.000Z","path":"其他工具/nodePPT/","text":"之前每当要做一个 PPT 时，内心是十分抗拒的，因为要靠鼠标拖来拖去！ 而 nodePPT 让我不再烦恼这个问题，现在只需书写一份 MarkDown，在其中指定样式、效果，即可生成一份 PPT 详细参考项目主页：GitHub - ksky521/nodePPT: This is probably the best web presentation tool so far!","tags":[],"categories":[{"name":"其他工具","slug":"其他工具","permalink":"https://hmgqzx.github.io/wiki/categories/其他工具/"}]},{"title":"Git 中提交一大段、多行的注释","date":"2018-03-01T18:13:19.000Z","path":"Git/Git 中提交注释相关/Git-提交大段注释/","text":"如果要添加大段注释，必须要调用文本编辑器。可以使用 core.editor 选项来修改默认的编辑器[1]。 具体配置 两大编辑器 12$ git config --global core.editor emacs$ git config --global core.editor vim 注意： mac 下，指定 vim 提交时，在文本编辑界面，命令模式要使用英文输入法才能响应（如果使用中文输入法敲命令，会报警，还会插入命令的字符） 其他编辑器 1$ git config --global core.editor \"[your editor] -w\" -w 通知 Git 使用其他的指定编辑器 macvim 用 macvim 做commit时的编辑器，用 -f参数能避免下面的提示。（-w 参数无效） Aborting commit due to empty commit message. 在终端修改 git config 如下： 1git config --global core.editor \"/bin/mvim -f\" 使用方法 使用 git commit 调用 例子： 12345touch README.mdgit initgit add README.md# git commit -m \"first commit\" # 命令行添加提交信息git commit # 编辑器添加提交信息 参考 Git - 配置 Git # core.editor ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"},{"name":"Git 中提交注释相关","slug":"Git/Git-中提交注释相关","permalink":"https://hmgqzx.github.io/wiki/categories/Git/Git-中提交注释相关/"}]},{"title":"Git 常用命令","date":"2018-03-01T18:13:19.000Z","path":"Git/Git 命令/Git-常用命令/","text":"如下是个人较常用或一些没有百分百记住的命令，附有 alias (别名)[1] 查看改变 12$ git diff &lt;filename&gt;$ g d &lt;filename&gt; 提交注释 提交一行注释 12$ git commit -m 'your-comment'$ gcmsg 'your-comment' 编辑器提交多行注释 1$ git commit # 设置好后，会进入相应编辑器 分支操作 （新建并）切换分支 12$ git checkout -b &lt;your-branch&gt;$ gcb &lt;your-branch&gt; 作用：切换到指定分支，如果该 branch 尚不存在，则会被新建 场景：在工作中经常需要新建分支，然后切换过去，这个命令结合了两者 撤销改变 git checkout 可以使用如下命令“撤销”掉指定文件的本地改动： 1$ git checkout -- &lt;filename&gt; 此命令会使用 HEAD 中的最新内容替换掉你的工作目录中的文件。已添加到缓存区的改动，以及新文件，都不受影响。 其他 config 将配置列出来，主要是用来看用户名和邮箱 12$ git config --list$ gcf 注脚和参考 别名的使用需要自己配置，或者是使用插件，具体可以看本 wiki 相关条目内容 ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"},{"name":"Git 命令","slug":"Git/Git-命令","permalink":"https://hmgqzx.github.io/wiki/categories/Git/Git-命令/"}]},{"title":"Git 命令的 alias 别名","date":"2018-03-01T18:13:19.000Z","path":"Git/Git 命令/Git-alias别名/","text":"启用别名 Oh My Zsh 如果你使用 Oh My Zsh，事情非常美好。 Oh My Zsh 中默认启用一个 Git 插件[1]，提供了一套系统别名（alias）。 这样，在命令行中输入 gaa 就相当于 git add --all，快捷很多；而且这套别名应该算是国际通用的。 此外，还推荐一个可以 &lt; 提醒当前输入命令 的 alias &gt; 的插件：alias-tips[2] 参考 Plugin:git · robbyrussell/oh-my-zsh Wiki ↩︎ djui/alias-tips: An oh-my-zsh plugin to help remembering those aliases you defined once ↩︎","tags":[],"categories":[{"name":"Git","slug":"Git","permalink":"https://hmgqzx.github.io/wiki/categories/Git/"},{"name":"Git 命令","slug":"Git/Git-命令","permalink":"https://hmgqzx.github.io/wiki/categories/Git/Git-命令/"}]},{"title":"Aria 2 —— Mac 的下载利器","date":"2018-03-01T18:13:19.000Z","path":"Mac/常用命令行软件/Aria2/","text":"Aria 2 是一个下载利器，可以说是 Mac 和 Linux 下的 IDM（只能用于 Windows 平台）。 下载速度体验 刚开始使用 Mac 时，为下载问题可愁了头，Chrome、Safari 等浏览器很多时候速度很慢。Mac 版百度云网盘更是没眼看。 使用 Aria 2 下载百度云网盘资源，一般可达到满速的 30%，不掉速，还算可以接受（除此之外我也不知道其他更好的办法了 😅） 下载一般 http 协议资源，基本满速 安装和配置 用 brew 安装；没什么特殊需求的话，基本开箱即用 自定义配置可参考这里[1] 常用命令 下载多个文件 从文件读取 文件中的链接一行一个即可；默认同时最多下载 5 个（即-j5） 1$aria2c -i /Users/me/Downloads/aria2c-url.txt 因为 Aria2c 只支持一个实例，所以同时下载多个文件时要用这种方法，建一个 alias 非常方便 参考 Aria2c 使用举例 #虽是中文，但很多过时了，不如看 官方 help Aria 2——下载器中的小清新 | SinoSky ↩︎","tags":[{"name":"工具推荐","slug":"工具推荐","permalink":"https://hmgqzx.github.io/wiki/tags/工具推荐/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"},{"name":"常用命令行软件","slug":"Mac/常用命令行软件","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/常用命令行软件/"}]},{"title":"Chrome 易忘快捷键","date":"2018-03-01T18:13:19.000Z","path":"Mac/常用软件常用快捷键/Chrome/","text":"关闭当前窗口（而不是标签页）： ⌘ + Shift + w 跳转到与查找栏中搜索字词相匹配的下一条内容：⌘ + g 跳转到与查找栏中搜索字词相匹配的上一条内容：⌘ + Shift + g 打开查找栏后，搜索选定文本：⌘ + e（先选定文本，按 ⌘ + e ，再按 ⌘ + g 导航【同时会自动显示搜索栏，单单按 ⌘ + e 还不会显示搜索栏 】） 开发相关 打开“开发者工具”：⌘ + Option + i 显示当前网页的 HTML 源代码（不可修改）：⌘ + Option + u 打开 JavaScript 控制台：⌘ + Option + j 总结：基本是 ⌘ + Option + key 形式 参考 Chrome 键盘快捷键 - Chrome帮助","tags":[{"name":"快捷键","slug":"快捷键","permalink":"https://hmgqzx.github.io/wiki/tags/快捷键/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"},{"name":"常用软件常用快捷键","slug":"Mac/常用软件常用快捷键","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/常用软件常用快捷键/"}]},{"title":"Mac OS X 下常用软件的常用快捷键","date":"2018-03-01T18:13:19.000Z","path":"Mac/常用软件常用快捷键/index/","text":"切换到 Mac OS X 后，一些常用软件的快捷键和在 Windows 使用时不同。另一些开发软件，快捷键又太多，不好记忆。 虽然在 Mac 里搜索菜单项（这点比 Windows 好），但由于以上所述原因，还是有必要对常用的软件的常用快捷键总结一下。当然，一些很熟悉的我就没有列出了（以个人标准评定熟悉与否，见谅）","tags":[{"name":"快捷键","slug":"快捷键","permalink":"https://hmgqzx.github.io/wiki/tags/快捷键/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"},{"name":"常用软件常用快捷键","slug":"Mac/常用软件常用快捷键","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/常用软件常用快捷键/"}]},{"title":"Python 的在线学习资源","date":"2018-03-01T18:13:19.000Z","path":"Python/学习资源推荐/Python在线学习资源/","text":"这里是一些 Python 的在线学习资源，大部分我有看过（且还在看），感觉质量很高，值得推荐。 这里推荐的资源主要关于语言本身，还包含一些实践指导。 入门 廖雪峰的教程[1] 中文资源里不错的入门教程，有 Python2 和 Python3，建议从 Python3 学起 Learn X in Y minutes[2] 语法速成，也可当总结来看 Python 入门指南[3] 本手册非正式的向读者介绍了 Python 语言及其体系相关的基本知识与概念。 笨方法学 Python[4] 这本书面向没有太多基础的人群去学习Python，在国外有很多的粉丝 这本我没仔细看过，不予评价…… 进阶 Python Cookbook[5] 这本书的目标读者是那些想深入理解 Python 语言机制和现代编程风格的有经验的 Python 程序员。 本书大部分内容集中于在标准库，框架和应用程序中广泛使用的高级技术。 这本书不适合 Python 的初学者。事实上，本书假定读者具有 Python 教程或入门书籍中所教授的基础知识。 本书也不是那种快速参考手册 （例如快速查询某个模块下的某个函数） Python最佳实践指南[6] 这份手工制作的指南旨在为Python初学者和专家提供一个 关于Python安装、配置、和日常使用的最佳实践手册。 几乎介绍了 Python 的方方面面，也可在入门时读下，有个整体的框架脉络 全栈 Full Stack Python[7] 从学习资源、开发环境到 web 开发、部署、测试等等，各方面都讲了 各类疑难杂症解答 Stackoverflow 这里[8]是 taizilongxu 翻译的Stack Overflow关于 Python 的部分 Python Cookbook[5:1] 本书旨在聚焦几个最重要的主题，演示几种可能的解决方案， 提供一个跳板引导读者进入一些更高级的内容 每个示例都只是一个入门指导，如果读者想深入研究，需要自己去查阅更多资料。 我们假定读者可以很熟练的使用搜索引擎以及知道怎样查询在线的 Python 文档。 参考 Python教程 - 廖雪峰的官方网站 ↩︎ Learn python in Y Minutes - Python ↩︎ Python 入门指南 — Python tutorial 3.6.0 documentation ↩︎ 序言 | Learn Python the Hard Way 中文版 #目前已出到第四版，这里是第三版 ↩︎ Python Cookbook 3rd Edition Documentation — python3-cookbook 2.0.0 文档 ↩︎ ↩︎ Python最佳实践指南！ — The Hitchhiker’s Guide to Python ↩︎ Full Stack Python 简体中文网站 ↩︎ Stackoverflow about Python | Stackoverflow about Python ↩︎","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"},{"name":"学习资源推荐","slug":"Python/学习资源推荐","permalink":"https://hmgqzx.github.io/wiki/categories/Python/学习资源推荐/"}]},{"title":"Python 字典的常用知识","date":"2018-03-01T18:13:19.000Z","path":"Python/常用札记/Python 字典/","text":"字典处理 合并两个字典 如果使用 Python 3.5+，那么如下方式是最快、最简洁、最 Pythonic 的[1][2]： 1combine-dict = &#123;**dictA, **dictB&#125; 这段代码在功能上与如下方案是等价的： 新建了一个空字典，然后依次往里面填充了来自dictA和dictB的元素 123combine-dict = &#123;&#125;combine-dict.update(dictA)combine-dict.update(dictB) 注脚 The Idiomatic Way to Merge Dictionaries in Python - Trey Hunner ↩︎ 怎样合并字典最符合Python语言习惯？| 编程派 | Coding Python ↩︎","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"},{"name":"常用札记","slug":"Python/常用札记","permalink":"https://hmgqzx.github.io/wiki/categories/Python/常用札记/"}]},{"title":"Hexo 博客搭建过程注意点","date":"2018-03-01T18:13:19.000Z","path":"Hexo/Hexo 博客搭建过程注意点/","text":"主要记录 Hexo 搭建过程中的一些注意点和一些问题的解决方向。其他详细的基础设置等网上有大量文章，官方文档也有清晰说明 搭建教程 搭建教程在网上有很多（不过有些实在太冗长，按需选择），下面是推荐的几个： 手把手教你使用Hexo + Github Pages搭建个人独立博客 | 令狐葱@前端笔记 # 很好的文章 limedroid/HexoLearning: Hexo博客搭建全攻略 Hexo 相关 配置文件 _config.yml 在 Hexo 中，以 _config.yml 作为配置文件。 在站点根目录下有一份，通常称为 站点配置文件 在每个主题的目录下也有一份，称为 主题配置文件，用于配置主题自带的选项 新手配置时不要弄混了哦 😯 ~ 注意事项‼️：_config.yml 使用的是 yaml 语言，不能有多余的空格，在每个配置选项的冒号后有且只能有一个空格 如： 1theme: next 常用命令行 本地运行，预览效果 启动 sever，在浏览器进行访问： 1$ hexo s -g --debug 支持热更新，修改配置文件后刷新一下可以看到即时效果 但如果修改了 post，则需要重新运行一下。（命令中 g 是 generate 的缩写，s 是 sever 的缩写） 其他通用设置 read more 阅读全文 推荐使用这种方法：在 MarkDown 文章中使用 &lt;!-- more --&gt; 手动进行截断。由 Hexo 原生提供，可以精确控制需要显示的摘录内容，也可以让 Hexo 中的插件更好的识别。[1] 发布到 GitHub 使用 git 部署[2] 1$ npm install hexo-deployer-git --save 在站点配置文件添加设置： 123456789101112deploy: type: git repo: &lt;repository url&gt; branch: [branch] message: [message] # 实例deploy: type: git repo: git@github.com:hmgqzx/dotors.git branch: gh-pages message: \"Site updated: &#123;&#123; now('YYYY-MM-DD HH:mm:ss') &#125;&#125;)\" 部署命令： 1$ hexo deploy --generate 额外再搭建另一个博客 - 项目 gh-pages 方式 GitHub上建立的每个项目(repository)都是可以拥有独立主页的，将 hexo 生成的静态内容放置在 gh-pages 分支下即可 当我们想额外搭建另一个博客（使用不用的主题），就可以利用这种方式，在 Github 给的域名（http(s)://&lt;username&gt;.github.io）下创建二级域名 Github 设置 详细步骤参考链接[3] 1~/my-personal-projects/github-repo/motors not empty, please run hexo init on an empty folder and then copy your files into it 因为我们是先在 Github 创建仓库，再 clone 下来，这样文件夹就非空了。需要在另一个地方 hexo init 一个站点，再复制过来（ master 分支） hexo 设置 在 Github 设置好后，项目访问链接是这样的： 1http(s)://&lt;username&gt;.github.io/&lt;projectname&gt; 那么在 hexo 的站点配置文件中，需要这样设置，才能生成对应的链接： 12345678# URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: http(s)://&lt;username&gt;.github.io/&lt;projectname&gt;root: /&lt;projectname&gt;/# 实例对照url: https://hmgqzx.github.io/dotors/root: /dotors/ 原因：正如注释所说，因为项目主页站点内容是放在二级域名下的，所以要那样设置 注脚 常见问题 - NexT 使用文档 ↩︎ Deployment | Hexo ↩︎ 手动给你的GitHub项目设置一个主页 | 把生命浪费在美好的代码上 ↩︎","tags":[],"categories":[{"name":"Hexo","slug":"Hexo","permalink":"https://hmgqzx.github.io/wiki/categories/Hexo/"}]},{"title":"Python 模块的导入","date":"2018-03-01T18:13:19.000Z","path":"Python/模块用法/模块导入/","text":"101 在平时的使用中，主要是要知道： 常规导入和 使用 from 语句导入这两种不同方式下，该如何调用函数 常规导入[1] 123&gt;&gt;&gt; import random&gt;&gt;&gt; random.randrange(7) # 调用相关函数时需要说明模块名5 这种不消多说，只需要使用import一词，然后指定希望导入的模块或包即可。不过调用相关函数时需要像上面那样说明模块名。 Python 风格 虽然可以一次性导入多个包或模块，但 Python风格指南建议将每个导入语句单独成行。 对模块重命名 123&gt;&gt;&gt; import random as r&gt;&gt;&gt; r.random()0.4967213766468448 使用from语句导入[1:1] 123&gt;&gt;&gt; from random import randint&gt;&gt;&gt; randint(1,1024) # 相对于常规导入，使用 from 语句导入可以直接调用该函数779 这种方式允许我们只导入一个模块或库中的某个部分[2]。同时，相对于常规导入，使用 from 语句导入可以直接调用该函数。 全盘导入 1from os import * ❗️: 虽然这种做法有时挺方便，但是不建议这样做，因为会打乱命名空间，造成混乱。 选择性导入多个项 圆括号法 12from os import (path, walk, unlink, uname, remove, rename) 续行符法 12from os import path, walk, unlink, uname, \\ remove, rename 相对导入[1:2] 使用原因 为了避免偶然情况下导入标准库中的模块产生冲突 使用场合 如果你编写了很多相关性强的代码，那么应该采用这种导入方式。你会发现PyPI上有很多流行的包也是采用了相对导入 参考 注 Python 101: All about imports | The Mouse Vs. The Python 中文翻译： Python导入模块的几种姿势| 编程派 | Coding Python ↩︎ ↩︎ ↩︎ 在复杂的代码库中，能够看出某个函数是从哪里导入的这点很有用的 ↩︎","tags":[],"categories":[{"name":"Python","slug":"Python","permalink":"https://hmgqzx.github.io/wiki/categories/Python/"},{"name":"模块用法","slug":"Python/模块用法","permalink":"https://hmgqzx.github.io/wiki/categories/Python/模块用法/"}]},{"title":"PlainTasks","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/PlainTasks/","text":"PlainTasks 是一个Sublime Text 插件，可以用来管理 todo-list。 我目前是利用它来帮助践行番茄工作法（每天的 todo 作为单独的一个文件记录，如2017-07-16.todo；脑里蹦出来的注意放在临时的collect.todo；经过整理、安排后的将来计划放入activity-inventory.todo） 阅读插件主页获取更多信息：aziz/PlainTasks: An opinionated todo-list plugin for Sublime Text editor (version 2 and 3) 笔记 下面是我学习使用该插件过程中的一点笔记（较简略，我只是为了掌握更多所需的内容而摘抄节选在此） 标签快捷添加 type t, press tab — it’ll become @today — this one is highlighted differently than other tags; c, tab — @critical; h, tab — @high; l, tab — @low; 打开超链接：cmd + shift + U 超链接格式：skype:nickname file link：.\\filename ，一行一个文件 有点疑惑，支持什么格式?——在 tutorial 里有，在 preferences-&gt;package setting 中 notes Use _ or * for italic and bold just like in Markdown. 截止日期 （高频使用） d, tab — @due( ) 详细格式见下面 Editor Useful Tools: Use ⌘ + control + up/down to move tasks up and down. Use ⌘ + r to see a list of projects and quickly jump between them due 格式 比较常用的： Notation Meaning @due(+) tomorrow as well as @due( +1) or @due( +1d) @due(+2:) two hours since current date @due(+:555) 555 minutes since current date 解释：格式是 +[number][DdWw][h:m] [ ]里的选项是可选的，当没有指定[DdWw]的选项时，[number]默认是天数，单独指定小时使用[h:]，单独指定分钟数使用[:m]（因为要指定是0 hour，不然少了 : 就解析为天数了） 更多请看插件主页 Changing color scheme 我不喜欢默认的屎黄色……还是黑色好点。在 preferences-&gt;package setting 中可以找到设置，里面的配置文件提供了几个主题 If you don’t like colors used in bundled schemes just copy any .hidden-tmTheme from PlainTasks to your User directory, change colors and paste the code below in your user settings file: 12&gt;&#123; &quot;color_scheme&quot;: &quot;Path to your custom color scheme file. e.g. Packages/User/custom_plaintasks.hidden-tmTheme&quot; &#125;&gt; N.B., sometimes you have to restart Sublime Text to apply changes made in tmTheme file. N.B., scope_past_due, scope_due_soon, and scope_misformatted settings can assign any scopes defined in tmTheme file, e.g. you can set &quot;scope_past_due&quot;: &quot;my.own.super.expired.whatever&quot; and then just add style definition in tmTheme for this scope. 其他 预览（Mac 空格键） qlstephen 这个插件虽然声称只是用来预览 without a file extension 的纯文本，但经测试，也可以预览 .todo 后缀的文件","tags":[{"name":"番茄工作法","slug":"番茄工作法","permalink":"https://hmgqzx.github.io/wiki/tags/番茄工作法/"}],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"}]},{"title":"Sublime Text 插件","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/Sublime Text 插件/","text":"参考 写这篇之前已经安装几个不错的插件，因为熟悉了所以没有记录在这里——包括 package control的配置等；建议参考如下链接 sublime text3 常用插件 · GitBook 如何优雅地使用Sublime Text | 晚晴幽草轩 一个前端程序猿的Sublime Text3的自我修养 | 三省吾身丶丶 jikeytang/sublime-text: sublime-text 我近期尝试中的其他插件 AdvancedNewFile 快速新建文件 假设有文件夹file。我们正在输入代码，又想在新的子目录下新建html文件的话用传统方式得很多步，新建目录，新建文件，保存等等等。 但是有了该插件之后，事情就变得简单了许多，只需要按下Ctrl+Shift+N，输入文件夹以及文件名，你就会看到如下效果:（回车，你会发现已经子目录下的文件已经新建完成了！） 还没配置好,不太会用 HTML-CSS-JS Prettify 代码格式化 其实有了这个代码格式化插件，就可以删除上面的代码格式化插件了。因为功能确实强大！ 官网插件配置 FED社区：sublime text 3 插件：HTML-CSS-JS Prettify 其实我把官网的配置趴下来之后就改了两个地方： &quot;selector_separator_newline&quot;: false： 不需要每个CSS选择器单独占一行 &quot;allowed_file_extensions&quot;: [&quot;..这是老的，新增在--&gt;&quot;,&quot;vue&quot;],：将vue的组件当成html来进行格式化 默认快捷键：cmd+Shift+H ###liveReload 文件保存浏览器即时刷新 该插件在window下，有很多问题会导致不能使用，mac下可以正常使用 需安装对应的chrome插件：chrome商店下载，完成后需勾选允许访问文件网址 为了避免每一次启动实时刷新在sulime里面启动一遍插件，可在插件设置中增加如下字段： 123456&#123; &quot;enabled_plugins&quot;: [ &quot;SimpleReloadPlugin&quot;, &quot;SimpleRefresh&quot; ]&#125; 这时就只需要在浏览器端点一下小圆圈就好了 FileDiffs 比较文件差异 手下的几个码农的代码风格与自己并不相同，经常代码汇总过来我都不知道他们改了什么，这个插件还是很给力的。 sidebar 123456789101112[ //borwser preview. &#123; &quot;keys&quot;: [&quot;f2&quot;], &quot;command&quot;: &quot;side_bar_files_open_with&quot;, &quot;args&quot;: &#123; &quot;paths&quot;: [], &quot;application&quot;: &quot;/Applications/Google Chrome.app&quot;, &quot;extensions&quot;: &quot;.html&quot; &#125; &#125;] ColorPick 快捷键设置 /Users/me/Library/Application Support/Sublime Text 3/Packages/ColorPick/Default (OSX).sublime-keymap","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"}]},{"title":"SideBarEnhancements","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/SideBarEnhancements/","text":"SideBarEnhancements是一个快捷键增强插件，使用最广泛的就是用来定义浏览器预览文件。 打开Package Setting &gt; Side Bar &gt; Key Bindings - User即可自定义浏览器预览快捷键，如下代码定义chrome所示： 123456789101112[ //borwser preview. &#123; \"keys\": [\"f2\"], \"command\": \"side_bar_files_open_with\", \"args\": &#123; \"paths\": [], \"application\": \"/Applications/Google Chrome.app\", \"extensions\": \".*\" &#125; &#125;] keys字段表示绑定的快捷键，command字段表示关联的程序，application表示要打开的软件，最后extensions表示将要使用软件打开何种扩展文件，.*表示所有文件。","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"}]},{"title":"Vim 中设置 tab 自动转换为 4 个空格","date":"2018-03-01T18:13:19.000Z","path":"Vim/Vim 札记/Vim中设置tab与空格/","text":"设置方法 在 .vimrc 文件（没有就在 $HOME 下新建一个）中设置[1]： 123456789filetype plugin indent on\" show existing tab with 4 spaces widthset tabstop=4\" when indenting with '&gt;', use 4 spaces widthset shiftwidth=4\" Sets the number of columns for a TABset softtabstop=4\" On pressing tab, insert 4 spacesset expandtab 另一个回答附有有更通俗的注释[2]： 1234567891011filetype plugin indent onset tabstop=4 \" The width of a TAB is set to 4. \" Still it is a \\t. It is just that \" Vim will interpret it to be having \" a width of 4.set shiftwidth=4 \" Indents will have a width of 4set softtabstop=4 \" Sets the number of columns for a TABset expandtab \" Expand TABs to spaces filetype 命令说明 文档说明[3][4] 1filetype plugin indent on 这行命令主要是用于开启文件类型检测 作用 vim通过对文件类型的识别，可以为不同类型的文件，设置不同的选项值、定义不同键绑定等。例如，对于c类型的文件，它就和bash脚本有不同的注释格式、不同的缩进格式、不同的关键字等。vim在设置文件类型后，会触发FileType事件，执行FileType相关的自动命令，对不同类型的文件区别对待。[5] commands 命令具体说明 以下列出了设置时需要使用的命令的说明：tabstop, shiftwidth, expandtab, 和 softtabstop tabstop Set tabstop to tell vim how many columns a tab counts for.[6] tabstop 设置 vim 中每个 tab 展开的列数 softtabstop Set softtabstop to control how many columns vim uses when you hit Tab in insert mode.[6:1] 顾名思义，softtabstop 是 tabstop 的 soft 版本 expandtab When expandtab is set, hitting Tab in insert mode will produce the appropriate number of spaces.[6:2] 对 expandtab 进行设置后，点击 tab 就会将其转换为对应数量的空格 shiftwidth Set shiftwidth to control how many columns text is indented with the reindent operations (&lt;&lt; and &gt;&gt;) and automatic C-style indentation.[6:3] 综合 设置情况 Vim 行为 softtabstop &lt; tabstop；expandtab 没有设置 混合使用 tab 和 space 来生成期望的 spacing softtabstop = tabstop；expandtab 没有设置 总是使用 tab 设置了 expandtab 总是使用 空格 可以看到，我们应该设置 expandtab，以让 Vim 自动将 tab 转换成对应的空格 参考 whitespace - Tab key == 4 spaces and auto-indent after curly braces in Vim - Stack Overflow ↩︎ vim - Redefine tab as 4 spaces - Stack Overflow ↩︎ indentation - What is the difference between filetype plugin indent on and filetype indent on? - Vi and Vim Stack Exchange ↩︎ Vim documentation: filetype (英）VIM: filetype（中） ↩︎ vi/vim使用进阶: 开启文件类型检测 – 易水博客 ↩︎ Secrets of tabs in vim ↩︎ ↩︎ ↩︎ ↩︎","tags":[],"categories":[{"name":"Vim","slug":"Vim","permalink":"https://hmgqzx.github.io/wiki/categories/Vim/"},{"name":"Vim 札记","slug":"Vim/Vim-札记","permalink":"https://hmgqzx.github.io/wiki/categories/Vim/Vim-札记/"}]},{"title":"autojump 自动跳转目录","date":"2018-03-01T18:13:19.000Z","path":"Zsh/插件/autojump/","text":"autojump 是一个目录导航插件，让你不用 cd 来 cd 去 它记录访问过的目录，实现智能跳转。使用 autojump 的简写 j ＋ 目录名 ，可随意的在目录间跳转，支持各种模糊匹配、补全。[1] 安装 OS X 推荐使用 brew 安装： 1brew install autojump 其他方法[1:1] 虽然下面的方法可用，但是不如 brew 安装来得方便 跟其他插件一样，首先要在 .zshrc[2] 中找到 plugins=，加入 autojump 12# 各插件名之间用英文空格隔开plugins=(git autojump) 除此之外，还要继续在上述文件中添加 1[[ -s $(brew --prefix)/etc/profile.d/autojump.sh ]] &amp;&amp; . $(brew --prefix)/etc/profile.d/autojump.sh 最后 source ~/.zshrc 一下 使用[3] j is a convenience wrapper function around autojump Jump To A Directory That Contains foo: 1j foo 前提是要用 cd 命令进入过对应文件夹一次，以让 autojump 记录 tips: 对于有多个可能的补全，可以按下 tab 来选择，看上去就像这样： 1234567891011&gt; $ j mu__&#123;你按着 tab 来到了这里，然后下面是供补全的选择&#125;&gt; mu__1__/Users/me/tutorial-projects/NeteaseCloudMusicApi&gt; mu__2__/Users/me/tutorial-projects/vue/vue-cli-multi-page&gt; mu__3__/Users/me/tutorial-projects/musicbox&gt; mu__4__/Users/me/temp/Cocoa-mupdf&gt; mu__5__/Users/me/tutorial-projects/musicbox/NEMbox&gt; mu__6__/Users/me/tutorial-projects/NeteaseCloudMusicApi&gt; mu__7__/Users/me/Music/网易云音乐&gt; mu__8__/Users/me/tutorial-projects/vue/vue-cli-multi-page&gt; mu__9__/Users/me/tutorial-projects/musicbox&gt; Jump To A Child Directory: 1jc bar Open File Manager To Directories (instead of jumping): 1jo music Opening a file manager to a child directory: 1jco images 进阶使用 查看这篇文章[4]，或者查看帮助及官网[3:1] 参考 Mac-zsh 安装和使用(原创) - 陈斌彬的技术博客 ↩︎ ↩︎ linux - What does the ‘rc’ in .bashrc, etc. mean? - Super User # It stands for “run commands”. ↩︎ wting/autojump: A cd command that learns - easily navigate directories from the command line #官网 ↩︎ ↩︎ 自动补完不算什么，一键直达目录才是终极神器 ↩︎","tags":[],"categories":[{"name":"Zsh","slug":"Zsh","permalink":"https://hmgqzx.github.io/wiki/categories/Zsh/"},{"name":"插件","slug":"Zsh/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Zsh/插件/"}]},{"title":"对乙酰氨基酚","date":"2018-03-01T18:13:19.000Z","path":"生活/感冒/对乙酰氨基酚/","text":"对乙酰氨基酚（英语：Acetaminophen，也称扑热息痛（Paracetamol），简称APAP）是一种广泛使用的非处方止痛及退烧药。对乙酰氨基酚常用来缓解头痛及各种轻至中度疼痛，也是许多感冒药的成分之一。虽然对乙酰氨基酚可以用来治疗炎性疼痛，但是其并不是非甾体抗炎药（NSAID），因为其抗炎作用非常弱。 虽然按推荐剂量服用对乙酰氨基酚很安全，但是轻微过量即可能致命。与其他非处方镇痛药相比，对乙酰氨基酚在低剂量时较安全，但是高剂量时毒性明显更高。 其他 对乙酰氨基酚对猫和狗有着较强的毒性，因此任何情况下都不要给药。猫缺少必要的酶来代谢对乙酰氨基酚，使药物浓度下降到安全水准，因此微量的对乙酰氨基酚就可导致猫死亡 参考","tags":[],"categories":[{"name":"生活","slug":"生活","permalink":"https://hmgqzx.github.io/wiki/categories/生活/"},{"name":"感冒","slug":"生活/感冒","permalink":"https://hmgqzx.github.io/wiki/categories/生活/感冒/"}]},{"title":"布洛芬","date":"2018-03-01T18:13:19.000Z","path":"生活/感冒/布洛芬/","text":"布洛芬（英语：Ibuprofen），是一种非甾体抗炎药（NSAID），用来止痛，退烧和消炎。通常认为布洛芬的抗炎效果比其他NSAID弱，而止痛效果较强。与其他NSAID相比，布洛芬导致胃肠道出血的风险较低。 在所有非选择性非类固醇消炎止痛药中，服用布洛芬产生药物不良反应的事例最少。但是上述情况只有在低剂量时是成立的。 参考","tags":[],"categories":[{"name":"生活","slug":"生活","permalink":"https://hmgqzx.github.io/wiki/categories/生活/"},{"name":"感冒","slug":"生活/感冒","permalink":"https://hmgqzx.github.io/wiki/categories/生活/感冒/"}]},{"title":"感冒","date":"2018-03-01T18:13:19.000Z","path":"生活/感冒/感冒/","text":"如果感冒的症状比较轻， 最明智的选择是多喝水，多休息，等着它自己痊愈就行了。 感冒药成分 常见的感冒药的有效成分主要是如下组合[1]： 解热镇痛药 抗过敏药 减充血药 止咳药和祛痰药 解热镇痛药 常见的解热镇痛药有：阿司匹林、对乙酰氨基酚（扑热息痛）、布洛芬、双氯芬酸。 常规使用下，选择 对乙酰氨基酚 即可 服用解热镇痛药时还要注意不要饮酒，否则可增加副作用和对肝脏的损伤。 抗过敏药 在感冒时，体内会产生更多的组胺，从而产生诸如鼻子发痒、流鼻涕、打喷嚏等类似过敏的症状。[1:1] 在感冒药中常用的抗过敏成分是氯苯那敏（扑尔敏）和苯海拉明。 使用抗过敏药需要注意的是，常用的此类药物都有让人嗜睡的副作用 减充血药 在感冒时，鼻腔粘膜中的小血管充血肿胀，使得鼻粘膜也肿了起来，这就造成了鼻子不通气的情况。 感冒药中常用的减充血药是伪麻黄碱。 这类药物具有广泛的收缩血管的作用，使用后会造成血压上升。这对于血压正常的人尚不足以构成威胁，但本身患有高血压的人就要小心了。 另外，伪麻黄碱对中枢有一定的兴奋作用 止咳药和祛痰药 参考[1:2] 注脚 科学松鼠会 » 感冒药攻略（内含囧插图……） ↩︎ ↩︎ ↩︎","tags":[],"categories":[{"name":"生活","slug":"生活","permalink":"https://hmgqzx.github.io/wiki/categories/生活/"},{"name":"感冒","slug":"生活/感冒","permalink":"https://hmgqzx.github.io/wiki/categories/生活/感冒/"}]},{"title":"元学习理论","date":"2018-03-01T18:13:19.000Z","path":"元理论/元学习/元学习理论/","text":"参考 如何长时间高效学习？ - Andrew Xu 的回答 - 知乎 Learning How to Learn, Part 1 Learning How to Learn: Powerful Mental Tools to Help You Master Tough Subjects:（翻译）有关学习的10个好习惯和10个坏习惯 如何学习：学习困难科目的实用思维方法 Learning How to Learn: Powerful Mental Tools to Help You Master Tough Subjects 你有什么相见恨晚的高效学习方法？ - 高太爷的回答 - 知乎 怎样看待 12 个月内自学完成 4 年麻省理工学院计算机科学的 33 门课程的 Scott H. Young 所谓的超速学习理论和方法（费曼技巧）以及背后「Get More from Life」的理念？ - 知乎 (还没看完) 人在学习和思考时两种不同的模式：专注模式 (Focused mode) 和发散模式 (Diffuse mode)。这两个模式是可以互相切换的，但不能同时进行。可以在紧张的学习新知识的时候通过洗澡、散步等让自己放松的事情主动进入发散模式来帮助加深理解。 记忆分为长期记忆 (Lone-term memory) 和工作记忆 (Working memory)。工作记忆也就是短期记忆，一般认为可以存放4块 (Chunks, 关于chunk后面会深入介绍) 信息，就像一块不太好用的黑板，不仅大小有限，而且很容易就被抹掉了 长期记忆的容量很大，从工作记忆转化到长期记忆需要时间以及不断的重复 重复的技巧：spaced repetition, 就是一晚上重复20遍的效果不如你每天重复几遍 影响学习的因素 睡眠 睡眠对学习也十分重要 (下面论据以前都听过，但是我没有去看过原始论文) 我们觉醒时大脑会产生有毒的物质，而睡觉时大脑细胞收缩，细胞间隙变大，脑脊液可以通过并且清理掉这些东西。 睡眠时大脑会整理你的想法和你学习的内容，不重要的记忆会被清理掉，而你想要记住的会得到加强。 睡眠时大脑还可以重复你白天学习的复杂知识，对解决难题和理解知识都有帮助。 在睡觉之前看的东西更容易进入你的梦境，而梦到它又有助于你对它的理解 锻炼身体 锻炼身体很重要。 除了散步洗澡听音乐等让你放松的方式会帮助你进入发散模式，锻炼身体能让你从之前集中精力的地方解放出来，使得发散模式有机会呈现，锻炼身体对大脑生长新的神经元有益。 新生成的神经结构如果不通过重复来巩固的话会消失，而锻炼身体可以延长神经结构的寿命，它被证实比任何药物都有效。而且锻炼影响的不仅仅是大脑细胞，全身细胞都受益。 chunk chunk 是已经加工好的知识，是我们解决问题的时候真正会使用的东西。 生成chunk的方法：Focus, Understand, Practice。 Focus 形成chunk的首要条件就是集中注意力。学习过程中的分心会导致chunk无法形成，理由如下图所示： 在形成chunk的时候，你的working memory像一只四脚章鱼一样，在努力建立新的神经结构，分心会占用章鱼有限的四只脚使得原本的chunk很难形成。 Form Chunk with Distraction Understand 不要将“啊哈”那样的顿悟或者看到答案瞬间的会心一笑当成真正的理解。如果初次理解后长时间不温故，那么很快就会想不起来了（印象／颜色淡了）。所以第一次真正学会了某样东西应该是在你合上书自己做出来了一遍之后。看别人的画作不意味着你也能画出来，听别人唱歌也不意味着你也能一模一样的张口就唱，你必须自己练习几遍。 Recall 人们自然会觉得repeat（重复）学过的东西多了就记住了，形成chunk了。实际上有种更好的方法，叫recall（回想）。Recall能调动更多的记忆，使得chuck更整洁干净。在不同的地点Recall好处更多，可以让你不用受环境限制。很多时候有书本在手边google在眼前，你会觉得你掌握了新的知识，但实际上是一种illusion of competence.如何避免幻觉？mini test，自己给自己小测验，它让你真正掌握知识。Recall也算是一种有效的mini test。 技巧 专注于过程 一直想着结果，可能会激活痛觉中枢，让你痛苦，进度放慢或拖延；应该专注于过程，想着下一步该如何做，将注意力集中在做事上面，做一个番茄时间，先不去考虑结果如何 计划的制定 要在每晚睡觉前做好第二天的日计划，因为研究表明睡眠中大脑会自动梳理如何做这些任务，使你第二天做的时候更容易上手。 不要过多的画重点 学习时不要过多的画重点，因为这可能会给你一种错觉，你会误以为记住了这些划过的内容，提倡在学习的过程中多提炼中心思想。或者通过回想来自己写出笔记，而不是单纯地复制整理 deliberate practice 对于我们已经掌握的东西，没必要一直重复学习了，你更应该多花时间和精力在你感觉最难的部分 通过习惯的养成来克服拖延 拖延会越陷越深，以至于恶性循环，但是如果只用意志力来克服拖延，也不是好的做法，因为消耗了意志力，很痛苦 习惯养成的方法 导火线：导火线就是会引发你下一步的习惯性动作的东西，或者说是你所处的环境。如果下一步的习惯性动作是好的，那么增加它；否则，减少它。 习惯性动作：要减少坏影响的习惯性动作。方法是想象接下来的计划，每一步的步骤，完成后的效果等等 奖励：只付出不奖励是不可取的，但也不能盲目奖励 信念：相信自己可以慢慢变好，并为之努力 缓解疲劳 在疲劳来临之前休息放松是最好的缓解疲劳的方法 定结束时间 在结束时间前，认认真真做好清单上的事情；结束时间后，就不要多想，尽情地放松下","tags":[],"categories":[{"name":"元理论","slug":"元理论","permalink":"https://hmgqzx.github.io/wiki/categories/元理论/"},{"name":"元学习","slug":"元理论/元学习","permalink":"https://hmgqzx.github.io/wiki/categories/元理论/元学习/"}]},{"title":"","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/abs/Plank/","text":"","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"abs","slug":"健身/动作/abs","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/abs/"}]},{"title":"BracketHighlight 配置","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/BracketHighlight/BracketHighlight 配置/","text":"参考 Customizing - BracketHighlighter Documentation //Sublime Text Love - Plugin: BracketHighlighter - 括號高亮 SublimeText插件BracketHighlighter配置 | 我的笔记 高亮方式 支持4种高亮方式:underline/outline/highlight/solid 不用重启就能看到修改效果 括号种类 name meaning Bracket Tag &lt;tag&gt; &lt;/tag&gt; Bracket Curly { } Bracket Round ( ) Bracket Square [ ] Bracket Quote ' ' 、&quot; &quot; Bracket Unmatched 没有成对匹配到的符号（所有种类） 我的配置 以下是我自己 Mac 上的配置，路径什么的根据自己灵活变通更改就好 主要有两个地方要改： My personal configuration: bh_core.sublime-settings 复制默认的值进入 /Users/me/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User 然后根据喜好更改高亮方式 My personal configuration: [Default Theme].tmTheme 这个配置主要是更改 foreground color（前景色），也就是高亮颜色 方法： 上 TmTheme Editor 里搞个 tmTheme 文件下来, 放入 /Users/me/Library/Application\\ Support/Sublime\\ Text\\ 3/Packages/User 中 打开主题文件,添加如下代码 在下方，与其它标签对齐 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Tag&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.tag&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#66CCCC&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Curly&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.curly&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#CC99CC&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Round&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.round&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#FFCC66&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Square&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.square&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#6699CC&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Angle&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.angle&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#F99157&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Quote&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.quote&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#99CC99&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;&lt;dict&gt; &lt;key&gt;name&lt;/key&gt; &lt;string&gt;Bracket Unmatched&lt;/string&gt; &lt;key&gt;scope&lt;/key&gt; &lt;string&gt;brackethighlighter.unmatched&lt;/string&gt; &lt;key&gt;settings&lt;/key&gt; &lt;dict&gt; &lt;key&gt;foreground&lt;/key&gt; &lt;string&gt;#F2777A&lt;/string&gt; &lt;/dict&gt;&lt;/dict&gt;","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"},{"name":"BracketHighlight","slug":"Sublime-Text/插件/BracketHighlight","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/BracketHighlight/"}]},{"title":"Emmet 语法简单总结","date":"2018-03-01T18:13:19.000Z","path":"Sublime Text/插件/Emmet/Emmet 语法/","text":"根据当前文件的解析模式来判断要使用 HTML 语法还是 CSS 语法来解析 在没有后缀的文件中，你可以按下shift + ctrl + p呼出面板，输入seth就可以设置当前文件的解析模式为 HTML HTML 对应语法总结 HTML 文档初始结构 输入!或html:5 id 用 # 标记 class 用 . 标记 多个 class 也是用 . 间隔即可 层次控制 平级元素 + 后代 &gt; 提升层次 ^ 当使用 div&gt;ul&gt;li 的指令之后，再继续写下去，那么后续内容都是在 li 下级的。如果我想编写一个跟 ul 平级的 span 标签，那么我需要先用 ^ 提升到上一个层次。 重复 * ul&gt;li*5 分组 () 用括号进行分组，表示一个代码块，分组内部的嵌套和层级关系和分组外部无关 分组也能使用 * 其他 自定义属性 [] 编号 $ ul&gt;li.item$*5 ​ HTML 简写规则简单总结 1. E 代表HTML标签。 2. E#id 代表id属性。 3. E.class 代表class属性。 4. E[attr=foo] 代表某一个特定属性。 5. E{foo} 代表标签包含的内容是foo。 6. E&gt;N 代表N是E的子元素。 7. E+N 代表N是E的同级元素。 8. E^N 代表N是E的上级元素。 参考 HTML/CSS 速写神器：Emmet | bubkoo CSS 对应语法总结 单位别名 p 表示% e 表示 em x 表示 ex 快捷键 Ctrl+, 展开缩写 Ctrl+M 匹配对 Ctrl+H 使用缩写包括 Shift+Ctrl+M 合并行 Ctrl+Shift+? 上一个编辑点 Ctrl+Shift+? 下一个编辑点 Ctrl+Shift+? 定位匹配对 Cheat Sheet","tags":[],"categories":[{"name":"Sublime Text","slug":"Sublime-Text","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/"},{"name":"插件","slug":"Sublime-Text/插件","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/"},{"name":"Emmet","slug":"Sublime-Text/插件/Emmet","permalink":"https://hmgqzx.github.io/wiki/categories/Sublime-Text/插件/Emmet/"}]},{"title":"Barbell Deadlift","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/back/Barbell Deadlift/","text":"基础知识 锻炼肌肉群 姿势入门 Approach the bar so that it is centered over your feet. Your feet should be about hip-width apart. Bend at the hip to grip the bar at shoulder-width allowing your shoulder blades to protract. Typically, you would use an alternating grip. 走近杠铃，让杠铃的投影处于脚的中间。脚的站距应该和髋宽差不多。髋部弯曲，抓杠铃，手的距离为肩宽 With your feet and your grip set, take a big breath and then lower your hips and flex the knees until your shins contact the bar. Look forward with your head. Keep your chest up and your back arched, and begin driving through the heels to move the weight upward. 脚站稳，手抓牢后，深吸一大口气，继续下降髋部、屈膝，直到小腿碰到杠铃。正视前方（？） After the bar passes the knees aggressively pull the bar back, pulling your shoulder blades together as you drive your hips forward into the bar. 当杠铃经过膝盖后，竭力地向后拉起杠铃（肩胛骨收缩，髋部向前[但不要过度，恢复到正常位置即可]） Lower the bar by bending at the hips and guiding it to the floor.","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"back","slug":"健身/动作/back","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/back/"}]},{"title":"Barbell Curl 杠铃弯举","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/arms/Barbell Curl/","text":"基本知识 锻炼部位 动作指导 bodybuilding.com Stand up with your torso upright while holding a barbell at a shoulder-width grip. The palm of your hands should be facing forward and the elbows should be close to the torso. This will be your starting position. 站直，握住杠铃，手的握姿和肩部等宽。手掌朝向外面，手肘应该贴近躯干 While holding the upper arms stationary, curl the weights forward while contracting the biceps as you breathe out. Tip: Only the forearms should move. 向上弯曲，抬起杠铃（尽量保持上臂不动，只移动前臂）。当开始碰到二头肌时，呼气 Continue the movement until your biceps are fully contracted and the bar is at shoulder level. Hold the contracted position for a second and squeeze the biceps hard. 继续保持这样的移动，直到二头肌被完全接触（杠铃上升到肩部位置）。保持这个姿势 1 秒钟，在这个位置挤压二头肌 Slowly begin to bring the bar back to starting position as your breathe in. 缓慢放下杠铃，同时吸气 Repeat for the recommended amount of repetitions. 重复以上动作 其他注意点 Once the bar is back in the start position, straighten your arms fully to tense your triceps to ensure that your biceps are worked through the fullest possible range of motion. 当杠铃回到初始位置，完全升直 arms 以使得三头肌紧张，这会让二头肌得到最大范围的移动 The bar should be resting across the thighs. 回到初始位置时，杠铃应该下降到大腿处（也就是要升直 arms ） 尽量保持你二头肌的紧张 使用二头肌作为主要动力，前肩和前臂作为次要肌群 不要摆动身体来将杠铃“晃”上来，身体也不要向后弯曲；保持身体固定 When you lift the weight, do not let the elbows come forward. Do not let the weight drop quickly. Make sure that the barbell does not touch your body. 其他演示视频 Barbell Curl Exercise Guide and Video Barbell Curl Bodybuilding Exercises : Bodybuilding: Standing Bicep Barbell Curls - YouTube 参考 standing barbell curl Barbell Curl Exercise Guide and Video Standing Barbell Curl: Forms, Techniques, Tips, and Pictures","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"arms","slug":"健身/动作/arms","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/arms/"}]},{"title":"Dumbbell Bench Press","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/chest/Dumbbell Bench Press/","text":"基础知识 锻炼肌肉群 入门指导 Lie down on a flat bench with a dumbbell in each hand resting on top of your thighs. The palms of your hands will be facing each other. 坐在长凳上，握好哑铃，将哑铃放在大腿上，手掌相对。 Then, using your thighs to help raise the dumbbells up, lift the dumbbells one at a time so that you can hold them in front of you at shoulder width. 然后，利用大腿来顶起哑铃，一次顶一个。哑铃的宽度为肩宽 Once at shoulder width, rotate your wrists forward so that the palms of your hands are facing away from you. The dumbbells should be just to the sides of your chest, with your upper arm and forearm creating a 90 degree angle. Be sure to maintain full control of the dumbbells at all times. This will be your starting position. 调整到肩宽后，旋转手腕，调整到手掌朝向外面。哑铃位置应该在胸部旁边，上臂和前臂呈 90°。注意任何时候都要完全控制住哑铃。这就是起始的姿势 Then, as you breathe out, use your chest to push the dumbbells up. Lock your arms at the top of the lift and squeeze your chest, hold for a second and then begin coming down slowly. Tip: Ideally, lowering the weight should take about twice as long as raising it. 然后，伴随着呼气，使用胸部力量将哑铃推上去。在最高处时，锁住手臂，挤压胸部，保持一秒后缓慢降下。提示：下降的时间大约是上升时的两倍长 Repeat the movement for the prescribed amount of repetitions of your training program. 注意 Caution: When you are done, do not drop the dumbbells next to you as this is dangerous to your rotator cuff in your shoulders and others working out around you. 当做完练习后，不要直接丢掉哑铃。这会伤害你的肩膀，也可能伤害到旁边的人 Just lift your legs from the floor bending at the knees, twist your wrists so that the palms of your hands are facing each other and place the dumbbells on top of your thighs. When both dumbbells are touching your thighs simultaneously push your upper torso up (while pressing the dumbbells on your thighs) and also perform a slight kick forward with your legs (keeping the dumbbells on top of the thighs). By doing this combined movement, momentum will help you get back to a sitting position with both dumbbells still on top of your thighs. At this moment you can place the dumbbells on the floor. 利用动量坐起来。不想看英文可看视频 tips Imagine you’re trying to push yourself away from the weights rather than pushing the weights away from yourself. Ensure you maintain some tension in your abs and don’t allow your lower back to arch excessively. Keep your feet flat on the floor and don’t allow the lower body to move during the set. Don’t: Clang the dumbbells together at the top. 不要让哑铃在空中撞击 Breathe in on the descent and breathe out forcefully on the ascent of each repetition. ​ 参考 Dumbbell Bench Press: Video Exercise Guide &amp; Tips","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"chest","slug":"健身/动作/chest","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/chest/"}]},{"title":"Wide-Grip Lat Pulldown","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/back/Wide-Grip Lat Pulldown/","text":"基础知识 锻炼肌肉群 姿势入门 Sit down on a pull-down machine with a wide bar attached to the top pulley. Make sure that you adjust the knee pad of the machine to fit your height. These pads will prevent your body from being raised by the resistance attached to the bar. 在 pull-down 机旁坐下。检查机器上的膝盖垫子的高度是否适合自己。这些垫子的作用是防止你被杆的反向力“翘起” Grab the bar with the palms facing forward using the prescribed grip. Note on grips: For a wide grip, your hands need to be spaced out at a distance wider than shoulder width. For a medium grip, your hands need to be spaced out at a distance equal to your shoulder width and for a close grip at a distance smaller than your shoulder width. 手掌朝前，抓牢杠。因为是宽距握法，所以手伸开的距离要比肩宽大（中距握法则等于肩宽，窄距握法则小于肩宽） As you have both arms extended in front of you holding the bar at the chosen grip width, bring your torso back around 30 degrees or so while creating a curvature on your lower back and sticking your chest out. This is your starting position. 手臂向前握住杠后（按照对应宽度），躯干向后大约30°，挺胸，后背下部弯曲 As you breathe out, bring the bar down until it touches your upper chest by drawing the shoulders and the upper arms down and back. **Tip:**Concentrate on squeezing the back muscles once you reach the full contracted position. The upper torso should remain stationary and only the arms should move. The forearms should do no other work except for holding the bar; therefore do not try to pull down the bar using the forearms. 随着体内气体呼出（这会增强核心肌肉），使用肩部力量拉下杠铃，直到它到达上胸处 tips: 一旦达到 the full contracted position，集中精力挤压后背的肌肉。上半身应该保持固定，只有手臂才应该移动。前臂只是用来 holding 铁杠，不要借助前臂的力量去拉下铁杆 After a second at the contracted position squeezing your shoulder blades together, slowly raise the bar back to the starting position when your arms are fully extended and the lats are fully stretched. Inhale during this portion of the movement. 挤压维持一秒后，缓慢上升，直到手臂完全伸展，背阔肌也完全“铺开”。在这个过程中的某个部分进行吸气 Repeat this motion for the prescribed amount of repetitions.","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"back","slug":"健身/动作/back","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/back/"}]},{"title":"Squat 深蹲","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/legs/Squat/","text":"标准深蹲 当我们是小 baby 时，天生就会标准深蹲！ 还有第三世界深蹲~ 蹲厕！ 基础理论 练习肌肉群 种类 the three most common are the high bar back squat (sometimes called an “Olympic squat” or “Oly Squat”), a low bar back squat, and a front squat. 它们的区别是杠铃位置的不同 basic set up 基本准备 No matter what type of squat you do, the basic set up will be the same find a squat rack, power cage, or a squat stand and set the height of the bar to be about the same height as your collarbone. If your options are either too high or too low, it’s always best to go too low – you don’t want to have to get up on your toes to rack/unrack the bar, especially as the weight gets heavier. 找到一个蹲架等，将杆升到和锁骨位置大致一样高。如果无法调到完美的位置——对你来说感到有些高或有些低，那么选择低的位置。这样在拿取/放置杠铃时不需要踮起脚 动作要领 bodybuilding.com Begin with the barbell supported on top of the traps. The chest should be up and the head facing forward. Adopt a hip-width stance with the feet turned out as needed. 将杠铃从“沟”中顶起。挺胸，头正视，采取和髋部等宽的站姿 Descend by flexing the knees, refraining from moving the hips back as much as possible. This requires that the knees travel forward. Ensure that they stay align with the feet. The goal is to keep the torso as upright as possible. 弯膝下降，尽量不要让髋部（臀）向后移动【note:这部分和其他教程的理念有冲突？】 —— 要实现这样的效果，膝盖必须向前移动，膝盖的移动轨迹和脚的朝向保持一致。这样做的目的是让躯干尽可能保持笔直（是笔直，不是和地面垂直） Continue all the way down, keeping the weight on the front of the heel. At the moment the upper legs contact the lower legs reverse the motion, driving the weight upward. 下降时将重量集中到脚后跟的前方；当大腿接触小腿时，将杠铃顶起 Strength Training 101 重量集中在脚跟和前脚掌(the balls of your feet)上 —— 这可以保护你的膝盖 一个判断方法：做深蹲时，你的脚趾应该可以翘起来 稍微分开脚 —— 5~15 度 挺胸 可以用双手抬一个杠铃片或其他有重量的东西（详见视频） 整个过程绷紧核心肌肉（收紧臀部和腹部） 保持后背笔直，脊柱自然（不弯曲，也不过度上翘） 翘臀 在蹲下时： breathe in, break at your hip and push your butt back. Keep sending your hips backwards as your knees begin to bend. It’s important that you start with your hips back, and not by bending your knees. 吸气，屈髋，臀部后移。在膝盖开始弯曲时，仍旧保持让髋部后移。记住，开始蹲下时，是利用后移的髋部，而不是膝盖的弯曲 视频：Staci Demonstrates A Proper Bodyweight Squat | Nerd Fitness - YouTube Common Faults 常见错误 用脚趾顶起来 在蹲下的时候，脚跟必须贴合在地上 蹲的不够下 In order to maximize the muscles worked in the squat, it needs to be done to at least parallel or lower. 为了锻炼到更多的肌肉，髋部至少要比膝盖低（髋部比膝盖稍低的位置称为平行位置） 如果只是局部蹲下（在平行位置之上），膝盖处会受到更大的压力（体验下！）；蹲的更下反而会减轻对膝盖的压力，虽然这更加难了。 不过有些人天生就蹲不了太下（西欧人中比例很高），根据你的体质，适当选择吧。如果实在蹲不下，不要勉强，蹲到平行也可以了。 位置错误 膝盖 膝盖的移动轨迹须和脚的朝向保持一致 后方 胸要挺起来，肩膀要向后，脊柱要保持自然形态 头 头应该正视前方 Your chin should be in a position where you could hold a tennis ball between your chest and your chin. 你可以这样判断姿势是否正确：下巴和胸口上方的间隔是否跟一个网球🎾差不多大，能刚好夹住一个网球就对了 Todo Strength Training 101: How to Squat Properly | Nerd Fitness #This all seems a bit…complicated 一节 How to Squat with Proper Form: The Definitive Guide #超级详细 参考 Strength Training 101: How to Squat Properly | Nerd Fitness 视频 Barbell Squat Exercise Guide and Video Staci Demonstrates A Proper Bodyweight Squat | Nerd Fitness - YouTube","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"legs","slug":"健身/动作/legs","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/legs/"}]},{"title":"Standing Military Press","date":"2018-03-01T18:13:19.000Z","path":"健身/动作/shoulder/Standing Military Press/","text":"基础知识 锻炼肌肉群 姿势入门指导 Start by placing a barbell that is about chest high on a squat rack. Once you have selected the weights, grab the barbell using a pronated (palms facing forward) grip. Make sure to grip the bar wider than shoulder width apart from each other. 手握姿势：手掌朝前。握距比肩宽大 Slightly bend the knees and place the barbell on your collar bone. Lift the barbell up keeping it lying on your chest. Take a step back and position your feet shoulder width apart from each other. 略微弯曲膝盖，将杠铃放到锁骨高度。举起杠铃，让重量落在胸上。 Once you pick up the barbell with the correct grip length, lift the bar up over your head by locking your arms. Hold at about shoulder level and slightly in front of your head. This is your starting position. 锁定上臂，将杠铃举过头顶。 Lower the bar down to the collarbone slowly as you inhale. Lift the bar back up to the starting position as you exhale. Repeat for the recommended amount of repetitions. 上面应该是网站出错了，前后顺序不对","tags":[],"categories":[{"name":"健身","slug":"健身","permalink":"https://hmgqzx.github.io/wiki/categories/健身/"},{"name":"动作","slug":"健身/动作","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/"},{"name":"shoulder","slug":"健身/动作/shoulder","permalink":"https://hmgqzx.github.io/wiki/categories/健身/动作/shoulder/"}]},{"title":"14.1 语句必须明确顺序","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 14 - 组织直线型代码/14.1 语句必须明确顺序/","text":"首先尽力写没有顺序依赖关系的代码，其次尽力写依赖关系明显的代码 如果语句间存在依赖关系，而且这些关系要求你把语句按照一定的顺序排列（即必须按这一顺序执行），那么要设法将这些依赖关系变得明显，使得阅读代码时可以看出来 note: 何谓依赖关系？一段代码中的语句们必须按照特定的顺序执行，则称这些语句间存在依赖关系。如，在 用户输入 - 处理 - 输出结果 的过程中，必须按照这一顺序书写相应语句，否则程序会出错 设法组织代码，使依赖关系变得非常明显 例子： basic1234ComputeMarketingExpense &apos;计算市场费用ComputeSaleExpense &apos;计算销售费用ComputeTravelExpense &apos;计算旅行费用DisplayExpenseSummary &apos;显示花费报表 明显，DisplayExpenseSummary 必须要在最后执行。而前面三个计算花费的子程序貌似可以打乱顺序（而且他们应该这样做）。可是新手小明在ComputeMarketingExpense里初始化了类的成员变量，以便其他计算费用的子程序可以将数据放进去。——也就是说，在这样的情况下，ComputeMarketingExpense 必须放在第一行。而我们只通过阅读代码是看不出来这样的依赖关系的。 应该做如下修正： basic12345InitializeExpenseDate &apos;初始化成员变量，而不是在 ComputeMarketingExpense 里做这件事ComputeMarketingExpense &apos;计算市场费用ComputeSaleExpense &apos;计算销售费用ComputeTravelExpense &apos;计算旅行费用DisplayExpenseSummary &apos;显示花费报表 Name routines so that dependencies are obvious 使子程序名能突显依赖关系 还是上面的例子，ComputeMarketingExpense 的命名是错误的，因为它不仅计算市场费用，还初始化了成员数据——但这一功能没有反映在名字里 子程序的命名应该能完整描述子程序所执行的全部功能，这样才能看出语句间的依赖关系 Use routine parameters to make dependencies obvious 利用子程序参数来突显依赖关系 toNote 再研读书中的例子 349页 重写代码让数据在子程序间传递，就可以暗示执行顺序是很重要的 当所有的子程序都操作了相同的数据，会暗示你：这些语句的顺序可能是重要的 也可以用数据来表明执行顺序并不重要，例如将参数进行不同的命名，来表示这些子程序不包含共同数据，从而表明调用顺序并不重要 Document unclear dependencies with comments 用注释说明不清晰的依赖关系 首先尽力写没有顺序依赖关系的代码，其次尽力写依赖关系明显的代码，如果担心不够清楚，用文档来说明它 toExemplify-book 但编写代码时更应该使用其他技术来改进，而不是依赖于注释，除非你很难获得权限去修改代码本身 Check for dependencies with assertions or error-handling code 用 断言 或 错误处理代码 来检查依赖关系 可以借助状态变量来记录某个子程序执行的必要条件的状态，在执行子程序前，用断言、处理代码来检查执行的必要条件是否已经成立 注意，因为引入了额外的(变量、初始代码和错误处理代码)，所以复杂度上升了，请在由此获得的好处和增加的出错率间做出权衡","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 14 - 组织直线型代码","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-14-组织直线型代码","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-14-组织直线型代码/"}]},{"title":"14.2 顺序无关的语句","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 14 - 组织直线型代码/14.2 顺序无关的语句/","text":"如果代码间没有顺序依赖关系，那就设法将相关的语句尽可能地接近（其实这些相关语句可以说是有顺序依赖关系） 就近原则（Principle of Proximity）：把相关的操作放在一起 一条普遍性原则：要让程序易于自上而下地阅读，读者的目光不需要跳来跳去，也不需要进行搜索整个程序来获得所需信息 Making Code Read from Top to Bottom 这其实在前面有提到过：减少“攻击窗口”，使变量、语句“局部化” Grouping Related Statements 把相关的语句组织在一起 哪些语句是相关的？处理了相同的数据、执行了相似的任务，或者具有某种执行顺序上的依赖关系 检查方法：打印出你的代码，把相关的语句画上框。如果语句排列地很好，方框是不会交叠的 相关的语句具有很强的联系，往往可以重构成独立的子程序","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 14 - 组织直线型代码","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-14-组织直线型代码","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-14-组织直线型代码/"}]},{"title":"15.2 case 语句","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 15 使用条件语句/15.2 case 语句/","text":"很多脚本语言根本不支持 case 语句，C++、Java 这些对 case 的支持也有限 排列顺序 如果所有情况的重要性都相同 假如所有情况的重要性都相同，按字母顺序或数字顺序可以提高可读性 若有少数正常情况和多数的异常情况 将正常情况放在前面，并用注释说明这些是正常情况，其他的是非正常情况 按执行频率排列 上面那条跟这个是相符的，把最经常执行的情况放在前面。这样可以提高可读性和检索的速度 使用 case 语句的提示 Keep the actions of each case simple 让每种情况的操作代码保持简单 情况处理代码要简短，这样可以使得 case 语句的结构更加清晰。如果某种情况执行的操作非常复杂，就将它们写成一个子程序来调用 Don’t make up phony variables to be able to use the case statement 不要为了使用 case 语句而刻意制造虚假的变量 C 系语言对 case 支持有限，不能直接匹配字符串（如 C++中case只可以匹配a constant expression of the same type as the type of condition after conversions and integral promotions） toExemplify-book Use the default clause only to detect legitimate defaults 把 default 子句用于真正的默认情况 如果在你考虑到的情况中，将最后一种列为 other 的话，（即将 default 理解为 the last case），这是很不明智的，这意味着你默认你的 cases 里包含了所有情况。万一你是错的呢？当潜在的错误发生时，你就不能用 default 子句来检测了 default = other cases unexpected 这样，当发现一种新的情况时，修改起来也很容易，只需要增加这种情况就可以了 Use the default clause to detect errors 使用 default 子句检测错误 类似上一条所述 In C++ and Java, avoid dropping through the end of a case statement 避免代码执行越过这个 case 子句的末尾（即避免执行到下一 case 的语句） 这个建议是说： 注意使用 break 不要混用不同的控制结构 toExemplify-book In C++, clearly and unmistakably identify flow-throughs at the end of a case statement 即：如果你需要执行完一个 case 后又接着执行另一个 case，那么要在相应位置给出明确的注释 不过一般来说，极力避免这样的代码 toNote 其他 Why Doesn’t Python Have Switch/Case?","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 15 使用条件语句","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-15-使用条件语句","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-15-使用条件语句/"}]},{"title":"16.1  选择循环的种类","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 16 控制循环 /16.1  选择循环的种类/","text":"选择循环的种类 我们在选择哪种循环作为控制结构时，需要根据循环的灵活度和检查位置做判断 语言 循环的种类 灵活度 检查位置 C，C++，C#，Java For 灵活 开始 While 灵活 开始 do-while 灵活 结尾 foreach 严格（对容器类中的每个元素都要执行） 开始 note: 灵活度：循环的次数是否是一定的？是否需要在每次迭代时检查循环有没有完成？ 检查位置：在检查位置前面的部分至少会执行到一次 while 的使用 注意这样一个事实，如果在一次循环体的执行过程中，就算执行到中间处条件变为假，也不会立即跳出这个循环，剩余的代码还是会执行。执行完后再次在入口处检查条件，发现条件为假，从而退出循环。 也就是只在入口处做检测，若检测通过，则可完整执行一次循环体里的过程 带有退出的循环·使用 带有退出的循环（Loop-with-exit）里，终止条件出现在循环的中间。 （其实也就是终止条件的检测放在何处的问题，若检测通过，则可完整执行一次后面的代码） 在 C++、C、Java 中可以用结构化的 while 和 break 来模拟 toNote （有了一个很好的想法，黑白块） 作用：消除重复代码，容易维护（重复代码的弊端是在修改时可能会忘了另一个地方） for 循环的使用 for 循环是执行次数固定的循环，应该用 for 循环来执行不需要循环内部控制的简单操作 for 循环就是为了简单的用途，无需在循环内部做任何事情去控制它，更复杂的情况请用 while 何谓简单用途？ 简单的递增递减，如对某容器内的元素进行迭代 何谓复杂的情况？ 要在循环内部做一些事情来控制循环，如设置条件从而跳出循环 所以，如果想在内部控制循环，不要通过在 for 循环里直接修改下标这一方式，而是改用 while 循环 深入阅读：“Writing Solid Code” foreach 循环的使用 适用于对数组或其他容器的各项元素进行操作，优势在于消除了人工进行算术处理的出错可能","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 16 控制循环 ","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环/"}]},{"title":"16.3 轻松创建循环——由内而外","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 16 控制循环 /16.3 轻松创建循环——由内而外/","text":"编写复杂循环时，可以这样处理： 先从一种情况开始，用字面量（literal）来编写代码 缩进，在外面加上循环头和括号，用循环下标或计算表达式替换掉那些字面量 根据嵌套层次，一直由内而外地加上外部的循环 最后，加上所有需要的初始化 toExemplify-book（非常详细的例子）","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 16 控制循环 ","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环/"}]},{"title":"16.2 循环的控制","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 16 控制循环 /16.2 循环的控制/","text":"问题会出现的地方： 初始化 累加变量 嵌套 循环终止 循环变量 循环下标访问数组元素 应该把循环内部当成一个子程序看待，是一个黑盒；把控制尽可能放到循环体外，使得外围程序只知道控制条件，而不需要知道循环内的内容 note：上面不适用于 while(ture) - break 方法，因为退出条件放在了黑盒中 toExemplify-book 循环&quot;头&quot; 自从一个位置进入循环 ？？是说每次只需从循环头部进入就可以了吗？ 把初始化的代码紧放在循环前面 [[就近原则]] 这会让你在修改代码的时候（如将这个循环放到更大的循环、移动到另一个子程序等等），不会忘记修改相应的初始化代码 用 while(true) 表示无限循环 普遍认为 while(true) 是标准写法，像 for( ; ; ) 也可以接受。但 for i = 1 to 999999999 这种假造无限循环的语句是很不好的 在适当的情况下多使用 for 循环 因为 for 循环的控制代码（初始化、判断条件、循环变量改变）都集中在一处，所以可读性更强，修改时也不会忘记某一地方。如果可以用 for 循环来替代其他类型的循环，就这样做。但要注意，是在恰当的情况下使用 for 循环，可参考[[这里]] 在 while 循环更适用的时候，不要使用 for 循环 这个就是对上一条的补充说明 使用 for 循环时的一种陋习：在 for 循环的循环头中塞入本属于 while 循环的内容（如并不控制循环进度的 housekeeping statements 内务语句）。这会产生一种误导，让人以为这些 housekeeping statements 也在控制着这个循环 toExemplify-book 解决办法是，将这些 for 循环改用 while 循环 循环体 用{ }将循环中的语句包围起来 任何时候都这样做，就是只有一行循环体甚至是空语句。 增加括号不会增加运行时所需时间和存储空间，只会提高可读性和预防修改代码时出错 避免空循环 toExemplify-book 妈的，这个例子太好了！以前就觉得空循环的写法不妥 把循环内务操作放在循环的开头或结尾，不要放在中间 循环内务操作（housekeeping）是指像 i++ 或 j = j + 1 这样的表达式，它们的主要目的是控制循环（进行下一轮循环判断条件的准备）而不是完成循环工作 toExemplify-book 一个循环只做一件事 循环应该和子程序一样：一个循环只做一件事并把它做好 特殊情况的处理 假如在实际情况中，根据上一原则使用了两个或多个循环会导致效率低下（比单独写成一个循环的效率低），那么还是写成两个或多个循环，加上注释说明可以将它们合并起来提高效率，等测量数据显示这部分性能的确很重要时再去合并它们 循环’尾’ 设法确认循环在任何情况下都能够终止 这是基本要求。在脑中模拟，考虑正常的情况、端点，以及每一种异常的情况 使得循环终止条件看起来很明显 正确使用 for 循环的情况下，终止条件是很明显的（就和循环头里指明的一致）。 使用 while 循环时，应该把所有的控制语句都放在 while 子句中，这样也会使得终止条件十分明显，关键在于把控制都放在一个地方（？？） 不要为了终止循环而胡乱改动 for 循环的下标 这一条是上一条的补充。这样做其实会让人阅读代码时看错循环的终止条件。 一旦写好了 for 循环，就不要去试图更改、控制 循环变量；如果需要的话，请使用 while 循环来获得对退出条件更多的控制 避免在循环终止后直接使用循环下标值 这样做不好的原因：一，循环下标的最终取值可能和想象中不同（语言、实现不同造成影响；循环是否是正常终止）；二，思考这个取值是多少，需要花费时间（还可能出错……） 更好且更具自我描述性的做法：新增一个变量，在循环体某个适当的位置把最终结果赋给它。 如多用一个布尔变量记录结果： toExemplify-book 考虑使用安全计数器 安全计数器是指，额外增加一个 safetyCounter 变量，每次循环后都递增它进行计数，以此判断执行次数是不是在合理范围内 这样做的缺点是提高了复杂度（增多了一部分代码；在需要修改的时候也可能忘记修改这一部分），所以不会到处都使用，一般在关键的循环处使用即可 toExemplify-book 提前退出循环 break 和 continue break：终止所在处的整个循环，使该循环正常退出 toExemplify-own continue：不会让程序终止掉整个循环，而是让程序跳过这一次迭代过程中（循环体中） continue语句后面的部分，然后从该循环的下一次迭代的开始位置继续执行 continue 相当于 if( ) then { next iteration } 在 while 循环中考虑利用 break 语句而不是布尔标记变量 ？？？ toNote 379页 小心那些大量充斥着 break 的循环 使用多个 break 不一定就是错的。只是如果一个循环包含很多的 break，就要当心了，因为有可能会误用了某个 break 而连不应该退出的部分都退出了 toExemplify-book 改用一系列的循环可能会更加清晰（而不是只用一个循环、用多个 break 作为出口） 如果语言支持，请使用带标号的 break 结构 Java 支持 labeled break，可以对任何在大括号里的代码段进行标号，使用 break 指定退出 toExemplify-book 在循环开始处用 continue 进行判断 ？？？？ toNote 381 使用 break 和 continue 时要谨慎 我们无法确定使用 break 和 continue 是好是坏 使用了 break，就不能再把循环看成黑盒了，阅读代码的人必须去读循环体才能知道循环是如何控制的（也就是终止条件变得不明显了） 建议：可以使用它们，但是要对可能产生的错误保持警惕（一般来说，错误的产生是因为终止条件发生了变化，程序员容易判断出错）；如果没有有说服力的理由，那么就不用使用它们 去检查端点 在创建循环时，应该用头脑去模拟（甚至进行一些手工的计算）循环的情况 通过这样的训练，才能在最初的编码阶段少犯错、在调试阶段更快找出错误，以及在整体上更好地理解程序，而不是瞎猜 通常要考虑的情况： 开始情况 任意选择的中间情况 最终情况 模拟时，应该确认不会出现任何 off-by-one 错误。如果循环中有复杂的计算，应该拿出计算器来手动检查一下 循环变量的使用 用整数或枚举类型表示数组和循环的边界 浮点数递增会有问题 toExemplify-book 更加有意义的变量名 如果循环嵌套了，使用更加有意义的变量名 一般来说，在简单的循环里使用 i、j、k 等变量名还可以接受。但如果有多层的嵌套循环（复杂度更高了），应该用更有意义的名字提高可读性，帮助理解 参考[[循环下标的命名]] 11.2节 toExemplify-book 用有意义的名字避免循环下标串话 用惯了 i、j、k 可能会导致下标串话（cross-talk） toExemplify-book 什么时候避免 i、j、k ? 某个循环体内的代码多于两三行（……那基本都是啦），或者有增长的可能，或者位于一组嵌套的循环里 —— 都应该避免 i、j、k 作为循环下标、 把循环下标变量的作用域限制在该循环内 这样可以避免循环下标串话和其他在循环外部继续使用循环下标的危险做法 toExemplify-book 在 C++、Java 等语言中，可以在循环内部声明循环下标变量，这样就把它的作用域限制在循环的括号内了 但要注意，不同编译器的实现不同，它们对这种特性下的循环变量作用域的检查也可能不同（具体是什么意思？？toExemplify-book） 循环应该多长 循环的长度可以用代码行数或嵌套层次来衡量 循环要尽可能短，以便可以一目了然 一个标准是不超过显示器的宽度吧（这样也很长了）；不过自从你有意识去编写简单代码，一般很少会写出超过 15~20 行的循环 toExemplify-book 嵌套层次在 3 层以下 循环的嵌套层次过多，会让人很难理解。 缩短的方法是：将某一部分提取为子程序或者将控制结构简化。（当然这是概念上的缩短，编译器还是会将它展开为原来的长度，只是这样做可以让我们更容易把握、分块去理解） 把长循环的内容移到子程序内 这条跟上面那条里的解决方法是差不多的。将循环体内的代码提取为子程序，再加以调用，可以帮助我们在整体上把握循环的运行结构 让长循环格外清晰 在短循环内可以适当使用 break、continue、多个出口和复杂的终止条件 但如果循环很长（即使已通过其他方法简化），那么应该让出口保持单一、退出条件清晰，来控制复杂度~~【就是“循环已经很长了，还搞那么复杂作死啊”的意思】~~","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 16 控制循环 ","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环/"}]},{"title":"16.4 循环和数组的关系","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 16 控制循环 /16.4 循环和数组的关系/","text":"toNote (内容比较少) 更进一步的阅读 10.7 节 （toRead）","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 16 控制循环 ","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-16-控制循环/"}]},{"title":"19.1 布尔表达式","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.1 布尔表达式/","text":"除了顺序结构外，所有的控制结构都要依赖布尔表达式的求值 使用 true 和 false 做布尔判断 请在布尔表达式的判断里使用 true 和 false 来代表真和假，而不要用 0 和 1 等数值。如果你的语言不直接支持这些写法，那么就用预处理宏或者全局变量来创建它们。 使用 0 和 1等数值的坏处是：降低了可读性，而且意义有时是非常含混的，有时你甚至不能确定它是否是用来做布尔判断的 隐式地比较布尔值，可以使判断语句更清晰 把表达式作为布尔表达式（而不需要“画蛇添足”地再和 true/false 直接比较一次），可以让表达式里的项数更少、可读性更高（更像英语中的对话） 画蛇添足的直接比较： 12if (printerError == False): pass 隐式比较： 12if (not printerError): pass 简化复杂的表达式 判断中项数很多的情况 将复杂的表达式拆分 将原来复杂的判断拆分为几个小部分，将每个小部分的判断结果赋给一些新的布尔变量，再用这些新的布尔变量组合成一个较简单的判断 衡量复杂与简单是根据布尔逻辑判断的项数 将复杂的表达式提取为布尔函数 即使这个复杂的判断只用一次，下面的做法也很有必要，因为可以改善可读性，更加集中于对主程序中整体流程的理解。具体是：将这个判断的过程提取到一个命名良好的子程序里，然后在主程序中判断这个子程序的返回值即可。这个子程序的名字也在主程序中引入了一个抽象，成为一种自说明。 toExemplify-book 涉及到多个变量的复杂判断 使用决策表来代替复杂的条件 具体参考 [[表驱动法]] 编写肯定形式的布尔表达式 否定形式的逻辑表达式可能会让人一时转不过弯，转换为肯定形式会更加清晰 在 if else 语句中 可以把判断条件从否定形式转换为肯定形式，并互换 if 和 else 子句中的代码 这条建议可能会和“在 if 子句中先处理高频的情况”（参考[[……]]）冲突，可以配合下一条建议（更改名字）使用 逆转含义，更换变量的名字 如将 !statusOK 替换成 errorDetected 利用狄摩根定理 toExemplify-book 用括号使布尔表达式更清晰 使用括号降低了对代码阅读者的要求，不再要求他们对该语言的求值优先级很熟练。对于你来说，如果拿不准优先级，使用括号也是非常好的解决方法 使用如下技巧使得括号准确配对 toExemplify-book 现在一般在编辑器中都有这个功能了 把布尔表达式全部括在括号里面 这样能够改善可读性 理解布尔表达式的求值方式 不同语言下对布尔表达式的求值方式可能不同，尤其是要注意是否采用“短路（short-circuit）”求值（或者称为惰性lazy求值） 短路求值 “短路”and：从左往右继续计算，如果发现有一个操作数（operand）为假，则跳过剩余的计算 “短路”or：从左往右继续计算，如果发现有一个操作数（operand）为真，则跳过剩余的计算 用处是：利用这一性质，恰当书写求值顺序，就可以减少判断语句的书写 逻辑运算符 &amp; 和 | Java 中的逻辑运算符 &amp; 和 | 会保证，所有的项都会经过完整的求值 例子 toExemplify-book 按照数轴的顺序来书写数值表达式 具体操作是：从左到右、从小到大地排列元素（常量和变量）。这样会很直观地确定变量所需要的范围 如： 123MIN_ELEMENTS &lt;= i and i &lt;= Max_ELEMENTSi &lt; MIN_ELEMENTSMax_ELEMENTS &lt; i toExemplify-book-pic 与 0 比较时的指导原则 一句话，当 0 作为布尔变量时，隐式比较；其他情况，显式比较 当 0 作为字符终止符、空指针时，上面的建议虽然有违既成的 C 传统，但随之也带来了可读性的改善 toNote 布尔表达式的常见问题 在 C 家族语言中，可以使用把常量放在比较的左端这一技巧 toNote 作者偏向于数轴排序法 在 C++中，可以考虑创建预处理宏来替换 &amp;&amp;、||、==（不得已才这样做） 一般不这样做， 所以，toNote 在 Java 中，要理解 a==b 和 a.equals(b) 的差异 a==b：判断的是 a 和 b 是否引用了同一个对象，即比较的是地址 a.equals(b)：判断这两个对象是否具有相同的值 一般来说，应该使用 a.equals(b) 这样的表达式","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"19.2 复合语句（语句块）","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.2 复合语句（语句块）/","text":"在多数语言中，可以通过在一组语句的外面括上 { } 来创建复合语句 指导原则 先写出括号对，再填充 block 中的内容 借助如今的编辑器，只需写下 {，即可自动补全，甚至连后退键都不需要了 无论何时，在 if、while 语句中都使用块 即使 if、while 语句后的代码行数是 0 或 1，都要用块来清楚表达","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"19.3 空语句","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.3 空语句/","text":"在 C++等语言中，空语句即一条仅含有分号的语句 指导原则 使用空语句时应突出强调 让空语句的分号自占一行，并且加以缩进 使用一组{ }来强调这一空语句 这样可以告诉代码阅读者，你正在使用空语句，而不是漏写了什么 12345while(True) &#123;&#125;while(True) &#123; ;&#125; 为空语句创建一个 DoNothing() 预处理宏或者内联函数 toNote 考虑换用一个非空的循环体 参考 16.2 [[避开空循环]] toNote","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"19.4 驯服危险的深层嵌套","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.4 驯服危险的深层嵌套/","text":"建议避免超过 3~4 层以上的嵌套 一些避免深层嵌套的方法 对于嵌套的 if 语句 通过拆分嵌套（需要重复检测某些条件）来减少嵌套层次 toExemplify-book 作为代价，你必须要容忍使用一个更加复杂的判断。但如果可以大幅减少桥嵌套层次的话，值得考虑 拆分图示 这个大的嵌套： 1234567891011121314graph LRZ(start) Z --&gt; A&#123;A?&#125; A --&gt; |True| exeA(执行 A part) exeA --&gt; B&#123;B?&#125; A --&gt; |False| NA(跳过 A part) B --&gt; |True| exeB(执行 B part) exeB --&gt; C&#123;C?&#125; B --&gt; |False| NB(跳过 B part) C --&gt; |True| exeC(执行 C part) exeC --&gt; D&#123;D?&#125; C --&gt; |False| NC(跳过 C part) D --&gt; |True| exeD(执行 D part) D --&gt; |False| ND(跳过 D part) 拆分成两个小嵌套 （第二个嵌套中要重复检测在第一个嵌套里的条件） 12345678graph LRZ(start) Z --&gt; A&#123;A?&#125; A --&gt; |True| exeA(执行 A part) exeA --&gt; B&#123;B?&#125; A --&gt; |False| NA(跳过 A part) B --&gt; |True| exeB(执行 B part) B --&gt; |False| NB(跳过 B part) 12345678graph LRZ(start) Z --&gt; |增加判断| C&#123; A? &amp;&amp; B? &amp;&amp; C?&#125; C --&gt; |True| exeC(执行 C part) exeC --&gt; D&#123;D?&#125; C --&gt; |False| NC(跳过 C part) D --&gt; |True| exeD(执行 D part) D --&gt; |False| ND(跳过 D part) 交叉参考 17.3节[[错误处理和 goto]] 用 break 块来简化循环里的嵌套 if toReRead 注意，在 python 中，break cannot be used to break out of an if - it can only break out of loops. （不过你也可以用 return 来实现这一功能） 12345678910111213141516171819202122232425262728293031def deep_loop(s): if 1 &lt;= s: print('1') if 2 &lt;= s: print('2') if 3 &lt;= s: print('3') if 4 &lt;= s: print('4')def use_break(s): for i in range(1): if s &lt; 1: break print('1') if s &lt; 2: break print('2') if s &lt; 3: break print('3') if s &lt; 4: break print('4')while True: n = input('n:') n = int(n) print('deep_loop:') deep_loop(n) print('use_break:') use_break(n) 不过 python 中有 elif，也比较方便了 其他语言未尝试，toExemplify-book 注意，这一技巧很不常见，要和团队商量，团队熟悉、接受后才能使用 把嵌套 if 转换为一组 if-then-else 语句 toNote 类似于 python 中 elif 把嵌套 if 转换成 case 语句 在一些情况下可以利用 case 语句重写，特别是含有整数的判断 toNote 其他 将深层嵌套的代码抽取为单独的子程序 当嵌套是由于条件和迭代二者共同产生的，这么做特别有效。把 if-then-else 分支保留在主循环中（以便显示决策的分支走向），然后将各分支中的复杂语句提取为单独的子程序，再调用 toExemplify-book —— important！ 使用一种更加面向对象的方法 toExemplify-book —— important！ 这个还不熟悉——但隐约有些懂了 重新设计深层嵌套的代码 复杂的代码表明你还没有充分理解你的程序，所以无法简化它 toNote 总结 有些技术在其他章节 toNote","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"19.5 编程基础：结构化编程","date":"2018-03-01T18:13:19.000Z","path":"书籍阅读笔记/编程/ Code Complete 代码大全/Chapter 19 一般控制问题/19.5 编程基础：结构化编程/","text":"结构化编程的核心思想：一个应用程序应该只采用一些单入单出的控制结构。因为这样做会使得程序有序、有规则地执行，不会做不可预知的随便跳转，从而提高可读性，让人更易理解，降低复杂度。 注意，结构化编程和结构化的、自顶向下的设计（structured, top-down design）不一样，结构化编程只适用于具体编码层（the detailed coding level） 单入单出的控制结构 英文为：one-in, one-out control constructs (also called single-entry, single-exit control constructs) 单入单出的控制结构指的是，一个代码块只能从一个位置开始执行，并且只能结束于一个位置，除此之外再无其他入口或出口。 结构化编程的 3 个组成部分 结构化编程的中心论点的一种表述是：任何一种控制流都可以由顺序、选择、迭代这三种结构生成。 本书作者的观点是，除了这三种标准的结构化编程结构之外，对 break、continue、return、throw-catch 等控制结构要持有批判的态度 顺序 顺序指，一组按照先后顺序执行的语句 选择 选择指，有选择地执行语句。如 if-then-else 结构、case 语句 迭代 迭代指，使一组语句多次执行。又称为“循环”。如 for、while","tags":[],"categories":[{"name":"书籍阅读笔记","slug":"书籍阅读笔记","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/"},{"name":"编程","slug":"书籍阅读笔记/编程","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/"},{"name":" Code Complete 代码大全","slug":"书籍阅读笔记/编程/Code-Complete-代码大全","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/"},{"name":"Chapter 19 一般控制问题","slug":"书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题","permalink":"https://hmgqzx.github.io/wiki/categories/书籍阅读笔记/编程/Code-Complete-代码大全/Chapter-19-一般控制问题/"}]},{"title":"Mac 使用技巧","date":"2016-10-08T15:28:59.000Z","path":"Mac/使用技巧/","text":"macOS 技巧与软件选择 | zrong’s blog 快捷键 Mac 键盘快捷键 - Apple 支持 键位 Command-H 隐藏最前面的 app 的窗口。要查看最前面的 app 但隐藏所有其他 app，请按 Command-Option-H。 Command-Tab 切换 app：在打开的 app 中切换到下一个最近使用的 app。 Shift-Command-波浪号 (~) 切换窗口：切换到最前端应用中下一个最近使用的窗口。 Command-逗号 (,) 偏好设置：打开最前面的 app 的偏好设置。 Option–左箭头 将插入点移至上一字词的词首。 其实可以用Fn键来组合得到同样的功能： Home键=Fn+左方向 End键=Fn+右方向 PageUP=Fn+上方向 PageDOWN=Fn+下方向 向前Delete=Fn+delete键 Finder 快捷键 快捷键 描述 Command-D 复制所选文件。 Command-I 显示所选文件的“显示简介”窗口。 Shift-Command-N 新建文件夹。 Command–左中括号 ([) 前往上一文件夹。 Command–右中括号 (]) 前往下一文件夹。 Command–上箭头 打开包含当前文件夹的文件夹。 Command–Control–上箭头 在新窗口中打开包含当前文件夹的文件夹。 Command–下箭头 打开所选项。 Option-连按 在单独窗口中打开文件夹，并关闭当前窗口。 Command-连按 在单独标签或窗口中打开文件夹。 神奇的option键 以前很多期介绍过option相关的快捷键和功能，比如选中多个文件option+右键，可以显示检查器，按住option点击顶部菜单的电池会显示电池状况，点击wifi会显示网络状况，点击备份…好吧，你们都可以点点试试。别忘了最左边的苹果按钮，option+点击，在下拉菜单点关机、重启都不提示的。 option+点击Dock上活动的程序会隐藏，option+拖拽文件可以复制，按住option输入=输出是≠，option+shift+=，输出是± 快捷键冲突 一个应用的键盘快捷键可能与另一应用的键盘快捷键冲突。例如，按下 Command-空格键可以打开 Spotlight 菜单，但是此快捷键在另一应用中也可以用于切换不同的输入法。 选取苹果菜单 &gt;“系统偏好设置”，然后点按“键盘”。 点按“快捷键”。有冲突的键盘快捷键旁边会出现黄色警告三角形。点按快捷键，然后更改它。 https://github.com/macdao/ocds-guide-to-setting-up-mac#2-常用工具 菜鸟级 Mac 配置（二） | GeekPlux （还没看） 去掉动画 Mac 加速：干掉那些「炫酷」的动画 - MacTips - 知乎专栏 Speed up Mission Control animations in macOS Sierra - Ask Different dotfiles/.macos at master · mathiasbynens/dotfiles 内置的减弱动态效果： Enable Reduce Motion in macOS Sierra to Speed Up Mission Control dock 装点你的 Dock：外观篇丨一日一技 · Mac - 站长之家 只显示已打开应用： 1234defaults write com.apple.dock static-only -boolean true; killall Dock恢复为默认设置：defaults delete com.apple.dock static-only; killall Dock OnyX 相关软件 压缩 Keka - 免费开源的 macOS 文件解压缩程序 关于Mac OS X中的.DS_STORE、._xxx文件 · BlahGeek’s Blog 文件恢复 OS X 上的文件版本恢复功能的实现原理是什么？ - Mac - 知乎 打开文件编辑器，搜索 复原到 选项 禁用更改文件名后缀提示 123defaults write com.apple.finder FXEnableExtensionChangeWarning -bool falsekillall Finder Mission Control 快速 要移除某一空间，请按住 Option 键，然后在 Spaces 栏中点按该空间旁边的 或 。该空间中的所有窗口都会移到另一个已打开的空间中。 一般人大多不會在同一個程式上開超過十個視窗，所以展開之後基本上就能看到所有的畫面了。但如果很不巧的你硬是開了太多視窗 … 那麼還有一招，就是在視窗上面按鍵盤上的空白鍵 ​ 下载 商店下载xcode很慢吧,其实也可以使用迅雷下载的哈.快来GET! - 简书 在开发者网站下 https://developer.apple.com/downloads/ Mac App Store 下载速度慢是谁的原因？ - 苹果公司 (Apple Inc.) - 知乎 不单单是墙的原因 多窗口控制 同程序的不同窗口，窗口不多的时候用 cmd+` 切换很方便 用 Divvy 来安排窗口，出现重叠就用快捷键分配到一个固定区域 三指（我设置为四指）上推的 Mission Control； 比如xcode打开了5个，cmd +~想在两个窗口中循环，则其余三个要cmd+M最小化。 或者cmd+shift+~ 与cmd+~换着用。 另外，很多程序支持cmd+数字切换的，如原生的shell，xquartz command + tab，弹出窗口鼠标也是可以选的 之前找了一个 Alfred的插件，搜索窗口的title，然后打开窗口。后面发现有个 Contexts的神器，直接入手了！公司的项目比较多，一次要开10来个 idea，每次切换窗口找项目好蛋疼，自从用了这个，再也不用切一个，看项目名，然后再切了！ 全屏了，command+`就失效了 我也有这个困惑，看了大家的评论，自己在app store里找了一个多小时终于发现一个叫Snap的应用，绝对可以大大提高窗口切换的效率！ Snap：在 Mac App Store 上的内容 就是一个快速呼出软件的功能 装一个HyperDock+HyperSwitch，爽很多。HyperSwitch可以实现：Option+Tab 窗口切换，Cmd+Tab（程序切换）中集成窗口切换。 隐藏应用程序（Cmd+H）=将当前 App「最小化到本身图标上」（Dock 里此 App 的图标会变成半透明） ，而「单独缩小到 Dock 右端」只是最小化窗口（Cmd+M） 另外，第 3 点「Dock 长时间单击图标」打开的菜单，其实可以用鼠标右键（或使用 Ctrl+单击）呼出 使用内置的 Command-Tab 组合键来切换应用，可能会发现一个问题，它会默认显示所有正在运行的 App，不管这个 App 有没有打开的窗口。 HyperSwitch 让 Command-Tab 窗口切换更好用：HyperSwitch | App+1 - 少数派 有一些缺点，它现在还是 Beta 版本，非常久没有更新过了。设置选项有 bug，部分设置选项是失效的。 HyperSwitch 默认的快捷键是 Option-Tab，你可以直接修改为 Command-Tab，更符合平时的使用习惯。 HyperSwitch 官网 不错，还算好用 可以设置在 all windows 里切换，也可以在当前应用切换 如果应用的某个窗口隐藏的话，在 current app 窗口切换时，会放在最后 如果应用隐藏的话，在 all windows 里不会出现 使用 「command + tab」 的组合键，同时按下键盘上的「上」按键，则会 mission control HyperDock HyperDock 1.7.0.1 窗口预览 - 精品MAC应用分享 窗口预览功能： HyperDock 窗口预览功能更进一步的将Taskbar功能优化。HyperDock 窗口预览功能可以一次性显示相同应用程序所打开的窗口。但像是firefox和Safari这种使用多标签页的显示方式，则只能显示一个窗口预览，无法将所有标签页全部显示。HyperDock 窗口预览状态下，用户可以直接在窗口预览中选择需要使用的程序窗口。同时，在鼠标滑到预览窗口时，当前应用窗口会自动前置。这个和Windows 7 的Taskbar 功能保持一致。你还可以在窗口预览中直接关闭应用程序窗口。 自动排列功能： Windows 7 的窗口自动排列功能方便实现双屏浏览，特别适合多线程工作。Mac OS X 系统是不提供最大化按钮的，只有“最适合大小按钮，最小化和关闭按钮”。HyperDock 窗口自动排列功能可以在 Mac OS X 下实现将当前窗口边缘最大化功能。HyperDock 可以实现拖拉窗口至屏幕上方快速最大化至全屏，Mac OS X 自带是没有窗口最大化快捷操作的。同时，窗口拖沓到左右边缘时，可以直接将窗口占满半边屏幕。方便那些需要同时打开两个窗口的用户。 整合Space使用： HyperDock 还整合了Space管理功能。如果用户启用 Space 模式，只需把鼠标移到 Dock 正在运行的程序上，即可显示该应用程序属于第几个 Space。可以使用鼠标直接拖至当前 Space 桌面，让原本就十分强大的 Space 如虎添翼。 Finder 为什么Mac OS X 在Finder里不可以新建文本文件？ - 知乎 Mac必备神器之Go2Shell以及使用技巧 - 简书 定位到 terminal TerminalFinder Alfred + fi 从 finder 开到iterm Alfred + if 从 iterm 开到finder 有些缓慢 Go2Shell 必须把view-&gt;customize toolbar点出来才拖上去了 － － 1$ open -a Go2Shell --args config Mac必备神器之Go2Shell以及使用技巧 - 简书 听说新版本不好，结合不了其他软件了","tags":[{"name":"使用技巧","slug":"使用技巧","permalink":"https://hmgqzx.github.io/wiki/tags/使用技巧/"}],"categories":[{"name":"Mac","slug":"Mac","permalink":"https://hmgqzx.github.io/wiki/categories/Mac/"}]}]}